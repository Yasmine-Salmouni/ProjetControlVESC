
ProjetControlOdriveBis_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f600  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0800f790  0800f790  00010790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fefc  0800fefc  000111d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800fefc  0800fefc  00010efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff04  0800ff04  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ff04  0800ff04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff0c  0800ff0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ff10  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111d8  2**0
                  CONTENTS
 10 .bss          00005124  200001d8  200001d8  000111d8  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  200052fc  200052fc  000111d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b57a  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058c9  00000000  00000000  0003c782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c0  00000000  00000000  00042050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000197a  00000000  00000000  00044110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296d4  00000000  00000000  00045a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027c07  00000000  00000000  0006f15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2d47  00000000  00000000  00096d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00179aac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1cc  00000000  00000000  00179af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00183cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f778 	.word	0x0800f778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800f778 	.word	0x0800f778

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <_ZN17MotorComputationsC1Ef>:

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

MotorComputations::MotorComputations(float torqueConstant)
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
    : torqueConstant(torqueConstant) {}
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_ZNK17MotorComputations24computeTorqueFromCurrentEf>:

float MotorComputations::computeTorqueFromCurrent(float current) const {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	ed87 0a00 	vstr	s0, [r7]
    return current * torqueConstant;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	edd7 7a00 	vldr	s15, [r7]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <_ZNK17MotorComputations24computeCurrentFromTorqueEf>:

float MotorComputations::computeCurrentFromTorque(float torque) const {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	ed87 0a00 	vstr	s0, [r7]
    return torque / torqueConstant;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ed97 7a00 	vldr	s14, [r7]
 800107e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001082:	eef0 7a66 	vmov.f32	s15, s13
}
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	0000      	movs	r0, r0
	...

08001098 <_ZNK17MotorComputations12computeOmegaEf>:

float MotorComputations::computeOmega(float cadence_rpm) const {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
    return cadence_rpm * 2.0f * M_PI / 60.0f;  // conversion tr/min → rad/s
 80010a4:	edd7 7a00 	vldr	s15, [r7]
 80010a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ac:	ee17 0a90 	vmov	r0, s15
 80010b0:	f7ff fa4a 	bl	8000548 <__aeabi_f2d>
 80010b4:	a30f      	add	r3, pc, #60	@ (adr r3, 80010f4 <_ZNK17MotorComputations12computeOmegaEf+0x5c>)
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f7ff fa9d 	bl	80005f8 <__aeabi_dmul>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <_ZNK17MotorComputations12computeOmegaEf+0x58>)
 80010cc:	f7ff fbbe 	bl	800084c <__aeabi_ddiv>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4610      	mov	r0, r2
 80010d6:	4619      	mov	r1, r3
 80010d8:	f7ff fd86 	bl	8000be8 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	ee07 3a90 	vmov	s15, r3
}
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	f3af 8000 	nop.w
 80010f0:	404e0000 	.word	0x404e0000
 80010f4:	54442d18 	.word	0x54442d18
 80010f8:	400921fb 	.word	0x400921fb

080010fc <_ZNK17MotorComputations12computePowerEff>:

float MotorComputations::computePower(float torque, float cadence_rpm) const {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	ed87 0a02 	vstr	s0, [r7, #8]
 8001108:	edc7 0a01 	vstr	s1, [r7, #4]
    float omega = computeOmega(cadence_rpm);
 800110c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff ffc1 	bl	8001098 <_ZNK17MotorComputations12computeOmegaEf>
 8001116:	ed87 0a05 	vstr	s0, [r7, #20]
    return torque * omega;
 800111a:	ed97 7a02 	vldr	s14, [r7, #8]
 800111e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN17MotorComputations17setTorqueConstantEf>:

void MotorComputations::setTorqueConstant(float value) {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	ed87 0a00 	vstr	s0, [r7]
    torqueConstant = value;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	601a      	str	r2, [r3, #0]

}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <_ZN13VESCInterface9getValuesEv>:
private:
    UART_HandleTypeDef *uart;   // handle UART utilisé pour communiquer
    VESCValues values;          // dernières valeurs reçues

    // Méthode interne pour envoyer un paquet et attendre une réponse (pour GET_VALUES)
    int getValues() {
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ce      	sub	sp, #312	@ 0x138
 8001154:	af00      	add	r7, sp, #0
 8001156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800115a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800115e:	6018      	str	r0, [r3, #0]
        // Construire la requête COMM_GET_VALUES
        uint8_t txBuf[6];  // 6 octets: start, len, id, CRC16(2B), stop
        uint16_t crc;
        txBuf[0] = 0x02;       // Start byte (short packet)
 8001160:	2302      	movs	r3, #2
 8001162:	f887 3118 	strb.w	r3, [r7, #280]	@ 0x118
        txBuf[1] = 0x01;       // Length = 1 (payload size)
 8001166:	2301      	movs	r3, #1
 8001168:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
        txBuf[2] = COMM_GET_VALUES;  // Payload: command ID
 800116c:	2304      	movs	r3, #4
 800116e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
        crc = crc16(&txBuf[2], 1);   // CRC16 sur 1 octet (0x04)
 8001172:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001176:	1c99      	adds	r1, r3, #2
 8001178:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800117c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001180:	2201      	movs	r2, #1
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	f000 f9fa 	bl	800157c <_ZN13VESCInterface5crc16EPKht>
 8001188:	4603      	mov	r3, r0
 800118a:	f8a7 3132 	strh.w	r3, [r7, #306]	@ 0x132
        txBuf[3] = (crc >> 8) & 0xFF;  // CRC high byte
 800118e:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	b29b      	uxth	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        txBuf[4] = crc & 0xFF;        // CRC low byte
 800119c:	f8b7 3132 	ldrh.w	r3, [r7, #306]	@ 0x132
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
        txBuf[5] = 0x03;       // End byte
 80011a6:	2303      	movs	r3, #3
 80011a8:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d

        // Envoyer la requête
        if (HAL_UART_Transmit(uart, txBuf, sizeof(txBuf), 100) != HAL_OK) {
 80011ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80011bc:	2364      	movs	r3, #100	@ 0x64
 80011be:	2206      	movs	r2, #6
 80011c0:	f005 fe16 	bl	8006df0 <HAL_UART_Transmit>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <_ZN13VESCInterface9getValuesEv+0x88>
            return 0;  // échec envoi
 80011d4:	2300      	movs	r3, #0
 80011d6:	e1b3      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Lire l'octet de départ de la réponse
        uint8_t startByte;
        if (HAL_UART_Receive(uart, &startByte, 1, 100) != HAL_OK) {
 80011d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80011dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	f207 1117 	addw	r1, r7, #279	@ 0x117
 80011e8:	2364      	movs	r3, #100	@ 0x64
 80011ea:	2201      	movs	r2, #1
 80011ec:	f005 fe8b 	bl	8006f06 <HAL_UART_Receive>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_ZN13VESCInterface9getValuesEv+0xb4>
            return 0;  // timeout ou pas de réponse
 8001200:	2300      	movs	r3, #0
 8001202:	e19d      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }
        if (startByte != 0x02 && startByte != 0x03) {
 8001204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001208:	2b02      	cmp	r3, #2
 800120a:	d005      	beq.n	8001218 <_ZN13VESCInterface9getValuesEv+0xc8>
 800120c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001210:	2b03      	cmp	r3, #3
 8001212:	d001      	beq.n	8001218 <_ZN13VESCInterface9getValuesEv+0xc8>
            return 0;  // octet de start invalide
 8001214:	2300      	movs	r3, #0
 8001216:	e193      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Lire la longueur
        uint16_t payloadLen = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
        if (startByte == 0x02) {
 800121e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8001222:	2b02      	cmp	r3, #2
 8001224:	d11d      	bne.n	8001262 <_ZN13VESCInterface9getValuesEv+0x112>
            // paquet court -> 1 octet de longueur
            uint8_t lenByte;
            if (HAL_UART_Receive(uart, &lenByte, 1, 100) != HAL_OK) return 0;
 8001226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800122a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	f107 010e 	add.w	r1, r7, #14
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	2201      	movs	r2, #1
 800123a:	f005 fe64 	bl	8006f06 <HAL_UART_Receive>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <_ZN13VESCInterface9getValuesEv+0x102>
 800124e:	2300      	movs	r3, #0
 8001250:	e176      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
            payloadLen = lenByte;
 8001252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001256:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8001260:	e027      	b.n	80012b2 <_ZN13VESCInterface9getValuesEv+0x162>
        } else {
            // paquet long -> 2 octets de longueur
            uint8_t lenBytes[2];
            if (HAL_UART_Receive(uart, lenBytes, 2, 100) != HAL_OK) return 0;
 8001262:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001266:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	f107 010c 	add.w	r1, r7, #12
 8001272:	2364      	movs	r3, #100	@ 0x64
 8001274:	2202      	movs	r2, #2
 8001276:	f005 fe46 	bl	8006f06 <HAL_UART_Receive>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZN13VESCInterface9getValuesEv+0x13e>
 800128a:	2300      	movs	r3, #0
 800128c:	e158      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
            payloadLen = ((uint16_t)lenBytes[0] << 8) | lenBytes[1];
 800128e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001292:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b21b      	sxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21a      	sxth	r2, r3
 800129e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b21b      	sxth	r3, r3
 80012ae:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
        }

        // Lire tout le payload de longueur connue
        uint8_t rxPayload[256];  // buffer assez grand (adapter si besoin)
        if (payloadLen > sizeof(rxPayload)) {
 80012b2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80012b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012ba:	d91d      	bls.n	80012f8 <_ZN13VESCInterface9getValuesEv+0x1a8>
            // Si la longueur annoncée dépasse le buffer prévu, on évite le dépassement
            // On pourrait lire et jeter les octets, mais on retourne erreur par sûreté
            for (uint16_t i = 0; i < payloadLen + 3; ++i) {
 80012bc:	2300      	movs	r3, #0
 80012be:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 80012c2:	e010      	b.n	80012e6 <_ZN13VESCInterface9getValuesEv+0x196>
                uint8_t dump;
                HAL_UART_Receive(uart, &dump, 1, 10); // flush
 80012c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	f107 010b 	add.w	r1, r7, #11
 80012d4:	230a      	movs	r3, #10
 80012d6:	2201      	movs	r2, #1
 80012d8:	f005 fe15 	bl	8006f06 <HAL_UART_Receive>
            for (uint16_t i = 0; i < payloadLen + 3; ++i) {
 80012dc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80012e0:	3301      	adds	r3, #1
 80012e2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 80012e6:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80012ea:	1c9a      	adds	r2, r3, #2
 80012ec:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dae7      	bge.n	80012c4 <_ZN13VESCInterface9getValuesEv+0x174>
            }
            return 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e123      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }
        if (HAL_UART_Receive(uart, rxPayload, payloadLen, 100) != HAL_OK) {
 80012f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8001308:	f107 0114 	add.w	r1, r7, #20
 800130c:	2364      	movs	r3, #100	@ 0x64
 800130e:	f005 fdfa 	bl	8006f06 <HAL_UART_Receive>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf14      	ite	ne
 8001318:	2301      	movne	r3, #1
 800131a:	2300      	moveq	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_ZN13VESCInterface9getValuesEv+0x1d6>
            return 0;  // échec lecture payload
 8001322:	2300      	movs	r3, #0
 8001324:	e10c      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Lire CRC16 (2 octets) et l'octet de fin
        uint8_t crcBytes[2];
        uint8_t endByte;
        if (HAL_UART_Receive(uart, crcBytes, 2, 100) != HAL_OK) return 0;
 8001326:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800132a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	2364      	movs	r3, #100	@ 0x64
 8001338:	2202      	movs	r2, #2
 800133a:	f005 fde4 	bl	8006f06 <HAL_UART_Receive>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf14      	ite	ne
 8001344:	2301      	movne	r3, #1
 8001346:	2300      	moveq	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <_ZN13VESCInterface9getValuesEv+0x202>
 800134e:	2300      	movs	r3, #0
 8001350:	e0f6      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        if (HAL_UART_Receive(uart, &endByte, 1, 100) != HAL_OK) return 0;
 8001352:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001356:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	f107 010f 	add.w	r1, r7, #15
 8001362:	2364      	movs	r3, #100	@ 0x64
 8001364:	2201      	movs	r2, #1
 8001366:	f005 fdce 	bl	8006f06 <HAL_UART_Receive>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <_ZN13VESCInterface9getValuesEv+0x22e>
 800137a:	2300      	movs	r3, #0
 800137c:	e0e0      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        if (endByte != 0x03) {
 800137e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001382:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d001      	beq.n	8001390 <_ZN13VESCInterface9getValuesEv+0x240>
            return 0;  // mauvais octet de fin
 800138c:	2300      	movs	r3, #0
 800138e:	e0d7      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Vérifier le CRC
        uint16_t crcReceived = ((uint16_t)crcBytes[0] << 8) | crcBytes[1];
 8001390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001394:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b21b      	sxth	r3, r3
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21a      	sxth	r2, r3
 80013a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
        uint16_t crcCalc = crc16(rxPayload, payloadLen);
 80013b4:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80013b8:	f107 0114 	add.w	r1, r7, #20
 80013bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f000 f8d9 	bl	800157c <_ZN13VESCInterface5crc16EPKht>
 80013ca:	4603      	mov	r3, r0
 80013cc:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
        if (crcReceived != crcCalc) {
 80013d0:	f8b7 2130 	ldrh.w	r2, [r7, #304]	@ 0x130
 80013d4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80013d8:	429a      	cmp	r2, r3
 80013da:	d001      	beq.n	80013e0 <_ZN13VESCInterface9getValuesEv+0x290>
            return 0;  // CRC invalide
 80013dc:	2300      	movs	r3, #0
 80013de:	e0af      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        }

        // Vérifier l'ID de commande dans le payload
        if (payloadLen < 1 || rxPayload[0] != COMM_GET_VALUES) {
 80013e0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <_ZN13VESCInterface9getValuesEv+0x2a6>
 80013e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d001      	beq.n	80013fa <_ZN13VESCInterface9getValuesEv+0x2aa>
            return 0;  // pas le bon paquet de réponse
 80013f6:	2300      	movs	r3, #0
 80013f8:	e0a2      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
        // rxPayload[1-2] = temp_fet (int16)
        // rxPayload[3-4] = temp_motor (int16)
        // rxPayload[5-8] = avg_motor_current (int32, échelle x100)
        // rxPayload[21-22] = duty_now (int16, échelle x1000)
        // rxPayload[23-26] = rpm (int32)
        if (payloadLen >= 27) {
 80013fa:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80013fe:	2b1a      	cmp	r3, #26
 8001400:	f240 809d 	bls.w	800153e <_ZN13VESCInterface9getValuesEv+0x3ee>
            // Courant moteur (float en A)
            int32_t current_int = (rxPayload[5] << 24) | (rxPayload[6] << 16) |
 8001404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001408:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800140c:	795b      	ldrb	r3, [r3, #5]
 800140e:	061a      	lsls	r2, r3, #24
 8001410:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001414:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001418:	799b      	ldrb	r3, [r3, #6]
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	431a      	orrs	r2, r3
                                   (rxPayload[7] << 8) | rxPayload[8];
 800141e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001422:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001426:	79db      	ldrb	r3, [r3, #7]
 8001428:	021b      	lsls	r3, r3, #8
            int32_t current_int = (rxPayload[5] << 24) | (rxPayload[6] << 16) |
 800142a:	4313      	orrs	r3, r2
                                   (rxPayload[7] << 8) | rxPayload[8];
 800142c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001430:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8001434:	7a12      	ldrb	r2, [r2, #8]
            int32_t current_int = (rxPayload[5] << 24) | (rxPayload[6] << 16) |
 8001436:	4313      	orrs	r3, r2
 8001438:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            values.current = current_int / 100.0f;  // échelle 100 -> A
 800143c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001448:	eddf 6a40 	vldr	s13, [pc, #256]	@ 800154c <_ZN13VESCInterface9getValuesEv+0x3fc>
 800144c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001450:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001454:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	edc3 7a02 	vstr	s15, [r3, #8]

            // Duty cycle (ratio)
            int16_t duty_int = (int16_t)((rxPayload[21] << 8) | rxPayload[22]);
 800145e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001462:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001466:	7d5b      	ldrb	r3, [r3, #21]
 8001468:	b21b      	sxth	r3, r3
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001472:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001476:	7d9b      	ldrb	r3, [r3, #22]
 8001478:	b21b      	sxth	r3, r3
 800147a:	4313      	orrs	r3, r2
 800147c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
            values.dutyCycle = duty_int / 1000.0f;   // échelle 1000 -> [0,1] (ou 0-100%)
 8001480:	f9b7 3126 	ldrsh.w	r3, [r7, #294]	@ 0x126
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001550 <_ZN13VESCInterface9getValuesEv+0x400>
 8001490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001494:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001498:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	edc3 7a03 	vstr	s15, [r3, #12]

            // RPM
            int32_t rpm_int = (rxPayload[23] << 24) | (rxPayload[24] << 16) |
 80014a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014a6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014aa:	7ddb      	ldrb	r3, [r3, #23]
 80014ac:	061a      	lsls	r2, r3, #24
 80014ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014b6:	7e1b      	ldrb	r3, [r3, #24]
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	431a      	orrs	r2, r3
                               (rxPayload[25] << 8) | rxPayload[26];
 80014bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c4:	7e5b      	ldrb	r3, [r3, #25]
 80014c6:	021b      	lsls	r3, r3, #8
            int32_t rpm_int = (rxPayload[23] << 24) | (rxPayload[24] << 16) |
 80014c8:	4313      	orrs	r3, r2
                               (rxPayload[25] << 8) | rxPayload[26];
 80014ca:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80014ce:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80014d2:	7e92      	ldrb	r2, [r2, #26]
            int32_t rpm_int = (rxPayload[23] << 24) | (rxPayload[24] << 16) |
 80014d4:	4313      	orrs	r3, r2
 80014d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
            values.rpm = (float)rpm_int;
 80014da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	edc3 7a01 	vstr	s15, [r3, #4]

            // Voltage (float en V)
            uint16_t rawV = ((uint16_t)rxPayload[27] << 8) | rxPayload[28];
 80014f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80014f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014fc:	7edb      	ldrb	r3, [r3, #27]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001508:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800150c:	7f1b      	ldrb	r3, [r3, #28]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21b      	sxth	r3, r3
 8001514:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
            values.voltage = rawV / 10.0f;  // division par 10 pour avoir la tension en volts
 8001518:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001524:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001530:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	edc3 7a04 	vstr	s15, [r3, #16]

        } else {
            return 0;  // payload trop court pour contenir les valeurs attendues
        }

        return 1;  // succès
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <_ZN13VESCInterface9getValuesEv+0x3f0>
            return 0;  // payload trop court pour contenir les valeurs attendues
 800153e:	2300      	movs	r3, #0
    }
 8001540:	4618      	mov	r0, r3
 8001542:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	42c80000 	.word	0x42c80000
 8001550:	447a0000 	.word	0x447a0000

08001554 <_ZN13VESCInterfaceC1EP20__UART_HandleTypeDef>:

public:
    VESCInterface(UART_HandleTypeDef *huart) : uart(huart) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	601a      	str	r2, [r3, #0]
        memset(&values, 0, sizeof(values));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3304      	adds	r3, #4
 8001568:	2210      	movs	r2, #16
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00b fc0e 	bl	800cd8e <memset>
    }
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <_ZN13VESCInterface5crc16EPKht>:

    uint16_t crc16(const uint8_t *data, uint16_t len) {
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	4613      	mov	r3, r2
 8001588:	80fb      	strh	r3, [r7, #6]
        uint16_t crc = 0x0000;
 800158a:	2300      	movs	r3, #0
 800158c:	82fb      	strh	r3, [r7, #22]
        for (uint16_t i = 0; i < len; ++i) {
 800158e:	2300      	movs	r3, #0
 8001590:	82bb      	strh	r3, [r7, #20]
 8001592:	e028      	b.n	80015e6 <_ZN13VESCInterface5crc16EPKht+0x6a>
            crc ^= (uint16_t)data[i] << 8;
 8001594:	8abb      	ldrh	r3, [r7, #20]
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b21b      	sxth	r3, r3
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015a6:	4053      	eors	r3, r2
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	82fb      	strh	r3, [r7, #22]
            for (uint8_t bit = 0; bit < 8; ++bit) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	74fb      	strb	r3, [r7, #19]
 80015b0:	e013      	b.n	80015da <_ZN13VESCInterface5crc16EPKht+0x5e>
                if (crc & 0x8000) {
 80015b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da09      	bge.n	80015ce <_ZN13VESCInterface5crc16EPKht+0x52>
                    crc <<= 1;
 80015ba:	8afb      	ldrh	r3, [r7, #22]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	82fb      	strh	r3, [r7, #22]
                    crc ^= 0x1021;
 80015c0:	8afb      	ldrh	r3, [r7, #22]
 80015c2:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015c6:	f083 0301 	eor.w	r3, r3, #1
 80015ca:	82fb      	strh	r3, [r7, #22]
 80015cc:	e002      	b.n	80015d4 <_ZN13VESCInterface5crc16EPKht+0x58>
                } else {
                    crc <<= 1;
 80015ce:	8afb      	ldrh	r3, [r7, #22]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	82fb      	strh	r3, [r7, #22]
            for (uint8_t bit = 0; bit < 8; ++bit) {
 80015d4:	7cfb      	ldrb	r3, [r7, #19]
 80015d6:	3301      	adds	r3, #1
 80015d8:	74fb      	strb	r3, [r7, #19]
 80015da:	7cfb      	ldrb	r3, [r7, #19]
 80015dc:	2b07      	cmp	r3, #7
 80015de:	d9e8      	bls.n	80015b2 <_ZN13VESCInterface5crc16EPKht+0x36>
        for (uint16_t i = 0; i < len; ++i) {
 80015e0:	8abb      	ldrh	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	82bb      	strh	r3, [r7, #20]
 80015e6:	8aba      	ldrh	r2, [r7, #20]
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3d2      	bcc.n	8001594 <_ZN13VESCInterface5crc16EPKht+0x18>
                }
            }
        }
        return crc;
 80015ee:	8afb      	ldrh	r3, [r7, #22]
    }
 80015f0:	4618      	mov	r0, r3
 80015f2:	371c      	adds	r7, #28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_ZN13VESCInterface10setCurrentEf>:


    void setCurrent(float current) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	ed87 0a00 	vstr	s0, [r7]
        // Préparer la valeur en mA
        int32_t milliamp = (int32_t)(current * 1000.0f);
 8001608:	edd7 7a00 	vldr	s15, [r7]
 800160c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001688 <_ZN13VESCInterface10setCurrentEf+0x8c>
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	61fb      	str	r3, [r7, #28]
        // Construire le paquet à envoyer
        uint8_t buf[11]; // start(1)+len(1)+id(1)+data(4)+crc(2)+end(1) = 10 octets, 11 par sécurité
        uint16_t crc;
        buf[0] = 0x02;            // Start (short packet)
 800161e:	2302      	movs	r3, #2
 8001620:	733b      	strb	r3, [r7, #12]
        buf[1] = 0x05;            // Length = 5 (1+4 bytes payload)
 8001622:	2305      	movs	r3, #5
 8001624:	737b      	strb	r3, [r7, #13]
        buf[2] = COMM_SET_CURRENT;
 8001626:	2306      	movs	r3, #6
 8001628:	73bb      	strb	r3, [r7, #14]
        buf[3] = (milliamp >> 24) & 0xFF;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	0e1b      	lsrs	r3, r3, #24
 800162e:	b2db      	uxtb	r3, r3
 8001630:	73fb      	strb	r3, [r7, #15]
        buf[4] = (milliamp >> 16) & 0xFF;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	141b      	asrs	r3, r3, #16
 8001636:	b2db      	uxtb	r3, r3
 8001638:	743b      	strb	r3, [r7, #16]
        buf[5] = (milliamp >> 8) & 0xFF;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	121b      	asrs	r3, r3, #8
 800163e:	b2db      	uxtb	r3, r3
 8001640:	747b      	strb	r3, [r7, #17]
        buf[6] = milliamp & 0xFF;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	74bb      	strb	r3, [r7, #18]
        crc = crc16(&buf[2], 5);  // CRC sur payload (5 octets)
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	3302      	adds	r3, #2
 800164e:	2205      	movs	r2, #5
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff92 	bl	800157c <_ZN13VESCInterface5crc16EPKht>
 8001658:	4603      	mov	r3, r0
 800165a:	837b      	strh	r3, [r7, #26]
        buf[7] = (crc >> 8) & 0xFF;
 800165c:	8b7b      	ldrh	r3, [r7, #26]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29b      	uxth	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	74fb      	strb	r3, [r7, #19]
        buf[8] = crc & 0xFF;
 8001666:	8b7b      	ldrh	r3, [r7, #26]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	753b      	strb	r3, [r7, #20]
        buf[9] = 0x03;
 800166c:	2303      	movs	r3, #3
 800166e:	757b      	strb	r3, [r7, #21]
        // Envoyer (on ignore le retour car pas de réponse attendue)
        HAL_UART_Transmit(uart, buf, 10, 100);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6818      	ldr	r0, [r3, #0]
 8001674:	f107 010c 	add.w	r1, r7, #12
 8001678:	2364      	movs	r3, #100	@ 0x64
 800167a:	220a      	movs	r2, #10
 800167c:	f005 fbb8 	bl	8006df0 <HAL_UART_Transmit>
    }
 8001680:	bf00      	nop
 8001682:	3720      	adds	r7, #32
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	447a0000 	.word	0x447a0000

0800168c <_ZN13VESCInterface6setRPMEl>:

    void setRPM(int32_t rpm) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
        uint8_t buf[11];
        uint16_t crc;
        buf[0] = 0x02;
 8001696:	2302      	movs	r3, #2
 8001698:	723b      	strb	r3, [r7, #8]
        buf[1] = 0x05;            // payload 5 octets
 800169a:	2305      	movs	r3, #5
 800169c:	727b      	strb	r3, [r7, #9]
        buf[2] = COMM_SET_RPM;
 800169e:	2308      	movs	r3, #8
 80016a0:	72bb      	strb	r3, [r7, #10]
        buf[3] = (rpm >> 24) & 0xFF;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	0e1b      	lsrs	r3, r3, #24
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	72fb      	strb	r3, [r7, #11]
        buf[4] = (rpm >> 16) & 0xFF;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	141b      	asrs	r3, r3, #16
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	733b      	strb	r3, [r7, #12]
        buf[5] = (rpm >> 8) & 0xFF;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	121b      	asrs	r3, r3, #8
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	737b      	strb	r3, [r7, #13]
        buf[6] = rpm & 0xFF;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	73bb      	strb	r3, [r7, #14]
        crc = crc16(&buf[2], 5);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	3302      	adds	r3, #2
 80016c6:	2205      	movs	r2, #5
 80016c8:	4619      	mov	r1, r3
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff56 	bl	800157c <_ZN13VESCInterface5crc16EPKht>
 80016d0:	4603      	mov	r3, r0
 80016d2:	82fb      	strh	r3, [r7, #22]
        buf[7] = (crc >> 8) & 0xFF;
 80016d4:	8afb      	ldrh	r3, [r7, #22]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	73fb      	strb	r3, [r7, #15]
        buf[8] = crc & 0xFF;
 80016de:	8afb      	ldrh	r3, [r7, #22]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	743b      	strb	r3, [r7, #16]
        buf[9] = 0x03;
 80016e4:	2303      	movs	r3, #3
 80016e6:	747b      	strb	r3, [r7, #17]
        HAL_UART_Transmit(uart, buf, 10, 100);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	f107 0108 	add.w	r1, r7, #8
 80016f0:	2364      	movs	r3, #100	@ 0x64
 80016f2:	220a      	movs	r2, #10
 80016f4:	f005 fb7c 	bl	8006df0 <HAL_UART_Transmit>
    }
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_ZN13VESCInterface6getRPMEv>:

    float getRPM() {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
        if (!getValues()) {
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fd21 	bl	8001150 <_ZN13VESCInterface9getValuesEv>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	bf0c      	ite	eq
 8001714:	2301      	moveq	r3, #1
 8001716:	2300      	movne	r3, #0
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <_ZN13VESCInterface6getRPMEv+0x22>
            return -1.0f; // erreur de comm
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <_ZN13VESCInterface6getRPMEv+0x34>)
 8001720:	e001      	b.n	8001726 <_ZN13VESCInterface6getRPMEv+0x26>
        }
        return values.rpm;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
    }
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	bf800000 	.word	0xbf800000

08001738 <_ZN13VESCInterface10getCurrentEv>:

    float getCurrent() {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
        if (!getValues()) {
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fd05 	bl	8001150 <_ZN13VESCInterface9getValuesEv>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	bf0c      	ite	eq
 800174c:	2301      	moveq	r3, #1
 800174e:	2300      	movne	r3, #0
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <_ZN13VESCInterface10getCurrentEv+0x22>
            return -1.0f;
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <_ZN13VESCInterface10getCurrentEv+0x34>)
 8001758:	e001      	b.n	800175e <_ZN13VESCInterface10getCurrentEv+0x26>
        }
        return values.current;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
    }
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	bf800000 	.word	0xbf800000

08001770 <_ZN13VESCInterface12getDutyCycleEv>:

    float getDutyCycle() {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
        if (!getValues()) {
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fce9 	bl	8001150 <_ZN13VESCInterface9getValuesEv>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <_ZN13VESCInterface12getDutyCycleEv+0x22>
            return -1.0f;
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <_ZN13VESCInterface12getDutyCycleEv+0x34>)
 8001790:	e001      	b.n	8001796 <_ZN13VESCInterface12getDutyCycleEv+0x26>
        }
        return values.dutyCycle;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
    }
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	bf800000 	.word	0xbf800000

080017a8 <_ZN13VESCInterface10getVoltageEv>:

    float getVoltage() {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
        getValues();
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fccd 	bl	8001150 <_ZN13VESCInterface9getValuesEv>
        return values.voltage;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	ee07 3a90 	vmov	s15, r3
    }
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80017d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d6:	eef0 7ae7 	vabs.f32	s15, s15
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f>:
#include "../Inc/MotorComputations.hpp"

#include <stdio.h>
#include <cmath>

MotorController::MotorController(UART_HandleTypeDef* controlUart, UART_HandleTypeDef* screenUart, float torquecst)
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
 80017f4:	ed87 0a00 	vstr	s0, [r7]
    : control_uart(controlUart),
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	601a      	str	r2, [r3, #0]
      screen_uart(screenUart),
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	605a      	str	r2, [r3, #4]
      direction(DirectionMode::FORWARD),
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
      controlMode(ControlMode::CADENCE),
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	60da      	str	r2, [r3, #12]
      instruction(0.0f),
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
      linearGain(0.05f),
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f+0x98>)
 800181c:	615a      	str	r2, [r3, #20]
      torqueConstant(torquecst),
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	619a      	str	r2, [r3, #24]
      lastAppliedCurrent(0.0f),
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
      ramp(6.0f),
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a15      	ldr	r2, [pc, #84]	@ (8001884 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f+0x9c>)
 8001830:	621a      	str	r2, [r3, #32]
      computations(torquecst)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3324      	adds	r3, #36	@ 0x24
 8001836:	ed97 0a00 	vldr	s0, [r7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fbf0 	bl	8001020 <_ZN17MotorComputationsC1Ef>
{
    screen = new ScreenDisplay(screen_uart);
 8001840:	2008      	movs	r0, #8
 8001842:	f009 fe09 	bl	800b458 <_Znwj>
 8001846:	4603      	mov	r3, r0
 8001848:	461c      	mov	r4, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4619      	mov	r1, r3
 8001850:	4620      	mov	r0, r4
 8001852:	f000 fd43 	bl	80022dc <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	649c      	str	r4, [r3, #72]	@ 0x48
    vesc = new VESCInterface(control_uart);
 800185a:	2014      	movs	r0, #20
 800185c:	f009 fdfc 	bl	800b458 <_Znwj>
 8001860:	4603      	mov	r3, r0
 8001862:	461c      	mov	r4, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	4620      	mov	r0, r4
 800186c:	f7ff fe72 	bl	8001554 <_ZN13VESCInterfaceC1EP20__UART_HandleTypeDef>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	64dc      	str	r4, [r3, #76]	@ 0x4c
}
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bd90      	pop	{r4, r7, pc}
 800187e:	bf00      	nop
 8001880:	3d4ccccd 	.word	0x3d4ccccd
 8001884:	40c00000 	.word	0x40c00000

08001888 <_ZN15MotorController17setTorqueConstantEf>:
//_____________________________________________________________________________________________
void MotorController::setTorqueConstant(float torquecst)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	ed87 0a00 	vstr	s0, [r7]
   torqueConstant = torquecst;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	619a      	str	r2, [r3, #24]
   computations.setTorqueConstant(torquecst);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3324      	adds	r3, #36	@ 0x24
 800189e:	ed97 0a00 	vldr	s0, [r7]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fc44 	bl	8001130 <_ZN17MotorComputations17setTorqueConstantEf>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZN15MotorController23calibrateTorqueConstantEv>:
float MotorController::getTorqueConstant() const {
	//screen->sendValue("n0", torqueConstant, "%.4f");
    return torqueConstant;
}

void MotorController::calibrateTorqueConstant() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
    const float testCurrent = 5.0f;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <_ZN15MotorController23calibrateTorqueConstantEv+0x84>)
 80018ba:	617b      	str	r3, [r7, #20]
    vesc->setCurrent(testCurrent);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c0:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe99 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>

    HAL_Delay(1000);
 80018ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018ce:	f002 f813 	bl	80038f8 <HAL_Delay>

    float measuredTorque = getTorque();
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f926 	bl	8001b24 <_ZN15MotorController9getTorqueEv>
 80018d8:	ed87 0a04 	vstr	s0, [r7, #16]
    screen->sendValue("Mtorque", measuredTorque, "%.4f");
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e0:	4a15      	ldr	r2, [pc, #84]	@ (8001938 <_ZN15MotorController23calibrateTorqueConstantEv+0x88>)
 80018e2:	ed97 0a04 	vldr	s0, [r7, #16]
 80018e6:	4915      	ldr	r1, [pc, #84]	@ (800193c <_ZN15MotorController23calibrateTorqueConstantEv+0x8c>)
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd53 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>

    vesc->setCurrent(0.0f);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f2:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001940 <_ZN15MotorController23calibrateTorqueConstantEv+0x90>
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fe80 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
    HAL_Delay(100);
 80018fc:	2064      	movs	r0, #100	@ 0x64
 80018fe:	f001 fffb 	bl	80038f8 <HAL_Delay>
    /*if (measuredTorque <= 0.0f) {
        screen->sendText("t0", "Erreur calibration");
        return;
    }*/

    float newKt = measuredTorque / testCurrent;
 8001902:	ed97 7a04 	vldr	s14, [r7, #16]
 8001906:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 800190a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800190e:	edc7 7a03 	vstr	s15, [r7, #12]

    /*if (newKt<0)
    {
    	newKt= -newKt;
    }*/
    setTorqueConstant(newKt);
 8001912:	ed97 0a03 	vldr	s0, [r7, #12]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ffb6 	bl	8001888 <_ZN15MotorController17setTorqueConstantEf>
        setTorqueConstant(newKt);
        screen->sendText("t0", "Calibration OK");
    } else {
        screen->sendText("t0", "Erreur calibration");
    }*/
    screen->sendText("calib_stat", "Calibration OK");
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001920:	4a08      	ldr	r2, [pc, #32]	@ (8001944 <_ZN15MotorController23calibrateTorqueConstantEv+0x94>)
 8001922:	4909      	ldr	r1, [pc, #36]	@ (8001948 <_ZN15MotorController23calibrateTorqueConstantEv+0x98>)
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fd19 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>
}
 800192a:	bf00      	nop
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40a00000 	.word	0x40a00000
 8001938:	0800f790 	.word	0x0800f790
 800193c:	0800f798 	.word	0x0800f798
 8001940:	00000000 	.word	0x00000000
 8001944:	0800f7a0 	.word	0x0800f7a0
 8001948:	0800f7b0 	.word	0x0800f7b0

0800194c <_ZN15MotorController13setLinearGainEf>:


//______________________________________________________________________________________

void MotorController::setLinearGain(float gain)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	ed87 0a00 	vstr	s0, [r7]
    linearGain = gain;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	615a      	str	r2, [r3, #20]
    //if (screen) screen->sendValue("n0", linearGain, "%.2f");
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_ZN15MotorController7getGainEv>:

//permet de tester setLinearGain et utilisée dans l'application
float MotorController::getGain() {
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
    //if (screen) screen->sendValue("n0", linearGain, "%.2f");
    return linearGain;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	ee07 3a90 	vmov	s15, r3
}
 800197a:	eeb0 0a67 	vmov.f32	s0, s15
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_ZN15MotorController11setrampRateEf>:
//____________________________________________________________________________________________

void MotorController::setrampRate(float rampRate)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	ed87 0a00 	vstr	s0, [r7]
   ramp = rampRate;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	621a      	str	r2, [r3, #32]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_ZN15MotorController12setDirectionE13DirectionMode>:
    //if (screen) screen->sendValue("n0", ramp, "%.2f");
    return ramp;
}
//______________________________________________________________________________

void MotorController::setDirection(DirectionMode dir) {
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
    direction = dir;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	609a      	str	r2, [r3, #8]
    //if (screen) screen->sendText("t0", (dir == DirectionMode::REVERSE) ? "REVERSE" : "FORWARD");
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_ZNK15MotorController12getDirectionEv>:

DirectionMode MotorController::getDirection() const {
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
    //if (screen) screen->sendText("t0", (direction == DirectionMode::REVERSE) ? "REVERSE" : "FORWARD");
    return direction;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_ZN15MotorController14setControlModeE11ControlMode>:
//________________________________________________________________________________________________

void MotorController::setControlMode(ControlMode mode) {
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
    controlMode = mode;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	60da      	str	r2, [r3, #12]
            case ControlMode::POWER_ECCENTRIC: modeName = "Power Eccentric"; break;
            case ControlMode::LINEAR: modeName = "Linear"; break;
        }
        screen->sendText("t0", modeName);
    }*/
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_ZN15MotorController14getControlModeEv>:

ControlMode MotorController::getControlMode() {
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
            case ControlMode::POWER_ECCENTRIC: modeName = "Power Eccentric"; break;
            case ControlMode::LINEAR: modeName = "Linear"; break;
        }
        screen->sendText("t0", modeName);
    }*/
    return controlMode;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_ZN15MotorController14setInstructionEf>:

//______________________________________________________________________________________

void MotorController::setInstruction(float value) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	ed87 0a00 	vstr	s0, [r7]
    instruction = value;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	611a      	str	r2, [r3, #16]

    if (controlMode == ControlMode::LINEAR) return;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d026      	beq.n	8001a78 <_ZN15MotorController14setInstructionEf+0x68>
    switch (controlMode) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d824      	bhi.n	8001a7c <_ZN15MotorController14setInstructionEf+0x6c>
 8001a32:	a201      	add	r2, pc, #4	@ (adr r2, 8001a38 <_ZN15MotorController14setInstructionEf+0x28>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001a55 	.word	0x08001a55
 8001a3c:	08001a49 	.word	0x08001a49
 8001a40:	08001a61 	.word	0x08001a61
 8001a44:	08001a6d 	.word	0x08001a6d
        case ControlMode::CADENCE:
            setCadence(value);
 8001a48:	ed97 0a00 	vldr	s0, [r7]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f819 	bl	8001a84 <_ZN15MotorController10setCadenceEf>
            break;
 8001a52:	e014      	b.n	8001a7e <_ZN15MotorController14setInstructionEf+0x6e>
        case ControlMode::TORQUE:
            setTorque(value);
 8001a54:	ed97 0a00 	vldr	s0, [r7]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f842 	bl	8001ae2 <_ZN15MotorController9setTorqueEf>
            break;
 8001a5e:	e00e      	b.n	8001a7e <_ZN15MotorController14setInstructionEf+0x6e>
        case ControlMode::POWER_CONCENTRIC:
            setPowerConcentric(value);
 8001a60:	ed97 0a00 	vldr	s0, [r7]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f881 	bl	8001b6c <_ZN15MotorController18setPowerConcentricEf>
            break;
 8001a6a:	e008      	b.n	8001a7e <_ZN15MotorController14setInstructionEf+0x6e>
        case ControlMode::POWER_ECCENTRIC:
            setPowerEccentric(value);
 8001a6c:	ed97 0a00 	vldr	s0, [r7]
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8d1 	bl	8001c18 <_ZN15MotorController17setPowerEccentricEf>
            break;
 8001a76:	e002      	b.n	8001a7e <_ZN15MotorController14setInstructionEf+0x6e>
    if (controlMode == ControlMode::LINEAR) return;
 8001a78:	bf00      	nop
 8001a7a:	e000      	b.n	8001a7e <_ZN15MotorController14setInstructionEf+0x6e>
        default:
            break;
 8001a7c:	bf00      	nop
    }
}
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_ZN15MotorController10setCadenceEf>:
}

//_______________________________________________________________________________________________

void MotorController::setCadence(float rpm)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	ed87 0a00 	vstr	s0, [r7]
    float value = applyDirection(rpm);
 8001a90:	ed97 0a00 	vldr	s0, [r7]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 faab 	bl	8001ff0 <_ZN15MotorController14applyDirectionEf>
 8001a9a:	ed87 0a03 	vstr	s0, [r7, #12]
    vesc->setRPM(value);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	ee17 1a90 	vmov	r1, s15
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fdec 	bl	800168c <_ZN13VESCInterface6setRPMEl>
    //if (screen) screen->sendValue("n0", rpm, "%.1f");
}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <_ZN15MotorController10getCadenceEv>:

float MotorController::getCadence()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
   float rpmValue = vesc->getRPM();
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fe19 	bl	8001700 <_ZN13VESCInterface6getRPMEv>
 8001ace:	ed87 0a03 	vstr	s0, [r7, #12]
   //if (screen) screen->sendValue("n0", rpmValue, "%.1f");
   return rpmValue;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	ee07 3a90 	vmov	s15, r3
}
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_ZN15MotorController9setTorqueEf>:

//_________________________________________________________________________________________________

void MotorController::setTorque(float torque)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	ed87 0a00 	vstr	s0, [r7]
    float effectiveTorque = applyDirection(torque);
 8001aee:	ed97 0a00 	vldr	s0, [r7]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 fa7c 	bl	8001ff0 <_ZN15MotorController14applyDirectionEf>
 8001af8:	ed87 0a03 	vstr	s0, [r7, #12]
    float current = computations.computeCurrentFromTorque(effectiveTorque);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3324      	adds	r3, #36	@ 0x24
 8001b00:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff faaf 	bl	8001068 <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 8001b0a:	ed87 0a02 	vstr	s0, [r7, #8]
    vesc->setCurrent(current);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	ed97 0a02 	vldr	s0, [r7, #8]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fd70 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_ZN15MotorController9getTorqueEv>:
   float current = vesc->getCurrent();
   //screen->sendValue("n0", current, "%.4f");
   return current;
}

float MotorController::getTorque() {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
   float current = vesc->getCurrent();
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fe01 	bl	8001738 <_ZN13VESCInterface10getCurrentEv>
 8001b36:	ed87 0a05 	vstr	s0, [r7, #20]
   float torque = computations.computeTorqueFromCurrent(current);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3324      	adds	r3, #36	@ 0x24
 8001b3e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fa7c 	bl	8001040 <_ZNK17MotorComputations24computeTorqueFromCurrentEf>
 8001b48:	ed87 0a04 	vstr	s0, [r7, #16]
   float final_torque = applyDirection(torque);
 8001b4c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fa4d 	bl	8001ff0 <_ZN15MotorController14applyDirectionEf>
 8001b56:	ed87 0a03 	vstr	s0, [r7, #12]
   //if (screen) screen->sendValue("n0", final_torque, "%.4f");
   return final_torque;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ee07 3a90 	vmov	s15, r3
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <_ZN15MotorController18setPowerConcentricEf>:

//_____________________________________________________________________________

void MotorController::setPowerConcentric(float power)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	ed87 0a00 	vstr	s0, [r7]
   float cadence = getCadence();
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff9f 	bl	8001abc <_ZN15MotorController10getCadenceEv>
 8001b7e:	ed87 0a07 	vstr	s0, [r7, #28]
   //screen->sendValue("n0", cadence, "%.1f");

   if (fabs(cadence) < 1.0f) {
 8001b82:	ed97 0a07 	vldr	s0, [r7, #28]
 8001b86:	f7ff fe1f 	bl	80017c8 <_ZSt4fabsf>
 8001b8a:	eef0 7a40 	vmov.f32	s15, s0
 8001b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	bf4c      	ite	mi
 8001b9c:	2301      	movmi	r3, #1
 8001b9e:	2300      	movpl	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <_ZN15MotorController18setPowerConcentricEf+0x4a>
       //if (screen) screen->sendText("t0", "Cadence trop basse");
       vesc->setCurrent(0.0f);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001baa:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001c14 <_ZN15MotorController18setPowerConcentricEf+0xa8>
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fd24 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
       return;
 8001bb4:	e02a      	b.n	8001c0c <_ZN15MotorController18setPowerConcentricEf+0xa0>
   }

   float omega = computations.computeOmega(cadence);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3324      	adds	r3, #36	@ 0x24
 8001bba:	ed97 0a07 	vldr	s0, [r7, #28]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fa6a 	bl	8001098 <_ZNK17MotorComputations12computeOmegaEf>
 8001bc4:	ed87 0a06 	vstr	s0, [r7, #24]
   float torque = power / omega;
 8001bc8:	edd7 6a00 	vldr	s13, [r7]
 8001bcc:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd4:	edc7 7a05 	vstr	s15, [r7, #20]
   float effectiveTorque = applyDirection(torque);
 8001bd8:	ed97 0a05 	vldr	s0, [r7, #20]
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fa07 	bl	8001ff0 <_ZN15MotorController14applyDirectionEf>
 8001be2:	ed87 0a04 	vstr	s0, [r7, #16]
   float current = computations.computeCurrentFromTorque(effectiveTorque);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3324      	adds	r3, #36	@ 0x24
 8001bea:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fa3a 	bl	8001068 <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 8001bf4:	ed87 0a03 	vstr	s0, [r7, #12]
   lastAppliedCurrent = current;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	61da      	str	r2, [r3, #28]
   vesc->setCurrent(current);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c02:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fcf8 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
   //screen->sendValue("n0", current, "%.1f");
}
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	00000000 	.word	0x00000000

08001c18 <_ZN15MotorController17setPowerEccentricEf>:

void MotorController::setPowerEccentric(float power)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	ed87 0a00 	vstr	s0, [r7]
   float cadence = getCadence();
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff49 	bl	8001abc <_ZN15MotorController10getCadenceEv>
 8001c2a:	ed87 0a07 	vstr	s0, [r7, #28]
   if (fabs(cadence) < 1.0f) {
 8001c2e:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c32:	f7ff fdc9 	bl	80017c8 <_ZSt4fabsf>
 8001c36:	eef0 7a40 	vmov.f32	s15, s0
 8001c3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	bf4c      	ite	mi
 8001c48:	2301      	movmi	r3, #1
 8001c4a:	2300      	movpl	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <_ZN15MotorController17setPowerEccentricEf+0x4a>
       //if (screen) screen->sendText("t0", "Cadence trop basse");
       vesc->setCurrent(0.0f);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c56:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001cc4 <_ZN15MotorController17setPowerEccentricEf+0xac>
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fcce 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
       return;
 8001c60:	e02c      	b.n	8001cbc <_ZN15MotorController17setPowerEccentricEf+0xa4>
   }

   float omega = computations.computeOmega(cadence);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3324      	adds	r3, #36	@ 0x24
 8001c66:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fa14 	bl	8001098 <_ZNK17MotorComputations12computeOmegaEf>
 8001c70:	ed87 0a06 	vstr	s0, [r7, #24]
   float torque = -power / omega;
 8001c74:	edd7 7a00 	vldr	s15, [r7]
 8001c78:	eef1 6a67 	vneg.f32	s13, s15
 8001c7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c84:	edc7 7a05 	vstr	s15, [r7, #20]
   float effectiveTorque = applyDirection(torque);
 8001c88:	ed97 0a05 	vldr	s0, [r7, #20]
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f9af 	bl	8001ff0 <_ZN15MotorController14applyDirectionEf>
 8001c92:	ed87 0a04 	vstr	s0, [r7, #16]
   float current = computations.computeCurrentFromTorque(effectiveTorque);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3324      	adds	r3, #36	@ 0x24
 8001c9a:	ed97 0a04 	vldr	s0, [r7, #16]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f9e2 	bl	8001068 <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 8001ca4:	ed87 0a03 	vstr	s0, [r7, #12]
   lastAppliedCurrent = current;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	61da      	str	r2, [r3, #28]
   vesc->setCurrent(current);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fca0 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
   //if (screen) screen->sendValue("n0", power, "%.1f");
}
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <_ZN15MotorController8getPowerEv>:

float MotorController::getPower() {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    float torque = getTorque();
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff27 	bl	8001b24 <_ZN15MotorController9getTorqueEv>
 8001cd6:	ed87 0a05 	vstr	s0, [r7, #20]
    float cadence = getCadence();
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff feee 	bl	8001abc <_ZN15MotorController10getCadenceEv>
 8001ce0:	ed87 0a04 	vstr	s0, [r7, #16]
    float omega = computations.computeOmega(cadence);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3324      	adds	r3, #36	@ 0x24
 8001ce8:	ed97 0a04 	vldr	s0, [r7, #16]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f9d3 	bl	8001098 <_ZNK17MotorComputations12computeOmegaEf>
 8001cf2:	ed87 0a03 	vstr	s0, [r7, #12]
    float power = computations.computePower(torque, omega);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3324      	adds	r3, #36	@ 0x24
 8001cfa:	edd7 0a03 	vldr	s1, [r7, #12]
 8001cfe:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f9fa 	bl	80010fc <_ZNK17MotorComputations12computePowerEff>
 8001d08:	ed87 0a02 	vstr	s0, [r7, #8]
    //if (screen) screen->sendValue("n0", power, "%.1f");
    return power;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	ee07 3a90 	vmov	s15, r3
}
 8001d12:	eeb0 0a67 	vmov.f32	s0, s15
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZN15MotorController9setLinearEff>:

//_______________________________________________________________________________

void MotorController::setLinear(float gain, float cadence) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d28:	edc7 0a01 	vstr	s1, [r7, #4]
    linearGain = gain;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	615a      	str	r2, [r3, #20]
    float torque = linearGain * cadence;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d38:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d40:	edc7 7a07 	vstr	s15, [r7, #28]
    float value = applyDirection(torque);
 8001d44:	ed97 0a07 	vldr	s0, [r7, #28]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f951 	bl	8001ff0 <_ZN15MotorController14applyDirectionEf>
 8001d4e:	ed87 0a06 	vstr	s0, [r7, #24]
    float current = computations.computeCurrentFromTorque(value);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3324      	adds	r3, #36	@ 0x24
 8001d56:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f984 	bl	8001068 <_ZNK17MotorComputations24computeCurrentFromTorqueEf>
 8001d60:	ed87 0a05 	vstr	s0, [r7, #20]
    lastAppliedCurrent = current;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	61da      	str	r2, [r3, #28]
    vesc->setCurrent(current);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	ed97 0a05 	vldr	s0, [r7, #20]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fc42 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
    /*if (screen) {
        screen->sendValue("n0", torque, "%.2f");
        screen->sendValue("n0", gain, "%.2f");
    }*/
}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <_ZN15MotorController6updateEf>:

void MotorController::update(float measured_cadence) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	ed87 0a00 	vstr	s0, [r7]
    if (controlMode == ControlMode::LINEAR) {
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d109      	bne.n	8001da8 <_ZN15MotorController6updateEf+0x28>
        setLinear(linearGain, measured_cadence);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d9a:	edd7 0a00 	vldr	s1, [r7]
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffba 	bl	8001d1c <_ZN15MotorController9setLinearEff>
    }
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZN15MotorController4stopEv>:

//_________________________________________________________________________________

void MotorController::stop()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
   float rampRate=ramp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	61bb      	str	r3, [r7, #24]
   float current = lastAppliedCurrent;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	61fb      	str	r3, [r7, #28]
   const float timeStepMs = 50.0f;
 8001dc4:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <_ZN15MotorController4stopEv+0xe4>)
 8001dc6:	617b      	str	r3, [r7, #20]
   const float timeStepS = timeStepMs / 1000.0f;
 8001dc8:	4b33      	ldr	r3, [pc, #204]	@ (8001e98 <_ZN15MotorController4stopEv+0xe8>)
 8001dca:	613b      	str	r3, [r7, #16]
   const float maxStep = rampRate * timeStepS;
 8001dcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dd0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001e9c <_ZN15MotorController4stopEv+0xec>
 8001dd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd8:	edc7 7a03 	vstr	s15, [r7, #12]

   while (fabs(current) > 0.05f) {
 8001ddc:	e035      	b.n	8001e4a <_ZN15MotorController4stopEv+0x9a>
       if (current > 0) {
 8001dde:	edd7 7a07 	vldr	s15, [r7, #28]
 8001de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dea:	dd12      	ble.n	8001e12 <_ZN15MotorController4stopEv+0x62>
           current -= maxStep;
 8001dec:	ed97 7a07 	vldr	s14, [r7, #28]
 8001df0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df8:	edc7 7a07 	vstr	s15, [r7, #28]
           if (current < 0) current = 0.0f;
 8001dfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d515      	bpl.n	8001e36 <_ZN15MotorController4stopEv+0x86>
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	e011      	b.n	8001e36 <_ZN15MotorController4stopEv+0x86>
       } else {
           current += maxStep;
 8001e12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1e:	edc7 7a07 	vstr	s15, [r7, #28]
           if (current > 0) current = 0.0f;
 8001e22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	dd02      	ble.n	8001e36 <_ZN15MotorController4stopEv+0x86>
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
       }
       vesc->setCurrent(current);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	ed97 0a07 	vldr	s0, [r7, #28]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fbdc 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
       HAL_Delay(static_cast<uint32_t>(timeStepMs));
 8001e44:	2032      	movs	r0, #50	@ 0x32
 8001e46:	f001 fd57 	bl	80038f8 <HAL_Delay>
   while (fabs(current) > 0.05f) {
 8001e4a:	ed97 0a07 	vldr	s0, [r7, #28]
 8001e4e:	f7ff fcbb 	bl	80017c8 <_ZSt4fabsf>
 8001e52:	eef0 7a40 	vmov.f32	s15, s0
 8001e56:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001e9c <_ZN15MotorController4stopEv+0xec>
 8001e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	bfcc      	ite	gt
 8001e64:	2301      	movgt	r3, #1
 8001e66:	2300      	movle	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1b7      	bne.n	8001dde <_ZN15MotorController4stopEv+0x2e>
   }
   vesc->setCurrent(0.0f);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e72:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001ea0 <_ZN15MotorController4stopEv+0xf0>
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fbc0 	bl	80015fc <_ZN13VESCInterface10setCurrentEf>
   instruction = 0.0f;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
   lastAppliedCurrent = 0.0f;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	61da      	str	r2, [r3, #28]
   //if (screen) screen->sendValue("n0", 0.0f, "%.1f");
}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	42480000 	.word	0x42480000
 8001e98:	3d4ccccd 	.word	0x3d4ccccd
 8001e9c:	3d4ccccd 	.word	0x3d4ccccd
 8001ea0:	00000000 	.word	0x00000000

08001ea4 <_ZNK15MotorController10getVoltageEv>:
//_________________________________________________________________________
// Gestion de la batterie

float MotorController::getVoltage() const
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b09a      	sub	sp, #104	@ 0x68
 8001ea8:	af04      	add	r7, sp, #16
 8001eaa:	6078      	str	r0, [r7, #4]
    float voltage = vesc->getVoltage();
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fc79 	bl	80017a8 <_ZN13VESCInterface10getVoltageEv>
 8001eb6:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
    screen->sendValue("voltage", voltage, "%.4f");
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8001fbc <_ZNK15MotorController10getVoltageEv+0x118>)
 8001ec0:	ed97 0a14 	vldr	s0, [r7, #80]	@ 0x50
 8001ec4:	493e      	ldr	r1, [pc, #248]	@ (8001fc0 <_ZNK15MotorController10getVoltageEv+0x11c>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 fa64 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>

    // Estimation du pourcentage de charge (entre 42.0V et 54.6 V)
    const float minV = 40.3f; // le moteur s'arrête complètement
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <_ZNK15MotorController10getVoltageEv+0x120>)
 8001ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
    const float maxV = 54.6f; //tension maximale en pleine charge pour batterie Li-ion 13S
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc8 <_ZNK15MotorController10getVoltageEv+0x124>)
 8001ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t percent = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    if (voltage >= maxV) {
 8001eda:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001ede:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001fcc <_ZNK15MotorController10getVoltageEv+0x128>
 8001ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eea:	db03      	blt.n	8001ef4 <_ZNK15MotorController10getVoltageEv+0x50>
        percent = 100;
 8001eec:	2364      	movs	r3, #100	@ 0x64
 8001eee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001ef2:	e021      	b.n	8001f38 <_ZNK15MotorController10getVoltageEv+0x94>
    } else if (voltage <= minV) {
 8001ef4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001ef8:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001fd0 <_ZNK15MotorController10getVoltageEv+0x12c>
 8001efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	d803      	bhi.n	8001f0e <_ZNK15MotorController10getVoltageEv+0x6a>
        percent = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001f0c:	e014      	b.n	8001f38 <_ZNK15MotorController10getVoltageEv+0x94>
    } else {
        percent = static_cast<uint8_t>(((voltage - minV) / (maxV - minV)) * 100.0f);
 8001f0e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001f12:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001fd0 <_ZNK15MotorController10getVoltageEv+0x12c>
 8001f16:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f1a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8001fd4 <_ZNK15MotorController10getVoltageEv+0x130>
 8001f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f22:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001fd8 <_ZNK15MotorController10getVoltageEv+0x134>
 8001f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f2e:	edc7 7a00 	vstr	s15, [r7]
 8001f32:	783b      	ldrb	r3, [r7, #0]
 8001f34:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Alerte selon le niveau
    if (voltage < 40.3f) // le moteur s'arrête complètement
 8001f38:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001f3c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001fd0 <_ZNK15MotorController10getVoltageEv+0x12c>
 8001f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f48:	d507      	bpl.n	8001f5a <_ZNK15MotorController10getVoltageEv+0xb6>
    {
        screen->sendText("batterie", "Recharge immediate");
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f4e:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <_ZNK15MotorController10getVoltageEv+0x138>)
 8001f50:	4923      	ldr	r1, [pc, #140]	@ (8001fe0 <_ZNK15MotorController10getVoltageEv+0x13c>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fa02 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>
 8001f58:	e028      	b.n	8001fac <_ZNK15MotorController10getVoltageEv+0x108>
    }
    else if (voltage < 44.2f) // le VESC commence à réduire la puissance
 8001f5a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001f5e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001fe4 <_ZNK15MotorController10getVoltageEv+0x140>
 8001f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d507      	bpl.n	8001f7c <_ZNK15MotorController10getVoltageEv+0xd8>
    {
        screen->sendText("batterie", "Batterie faible");
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f70:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe8 <_ZNK15MotorController10getVoltageEv+0x144>)
 8001f72:	491b      	ldr	r1, [pc, #108]	@ (8001fe0 <_ZNK15MotorController10getVoltageEv+0x13c>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f9f1 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>
 8001f7a:	e017      	b.n	8001fac <_ZNK15MotorController10getVoltageEv+0x108>
    }
    else
    {
        char text[64];
        snprintf(text, sizeof(text), " %.1f V | %d%%", voltage, percent);
 8001f7c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001f7e:	f7fe fae3 	bl	8000548 <__aeabi_f2d>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	f897 1057 	ldrb.w	r1, [r7, #87]	@ 0x57
 8001f8a:	f107 0008 	add.w	r0, r7, #8
 8001f8e:	9102      	str	r1, [sp, #8]
 8001f90:	e9cd 2300 	strd	r2, r3, [sp]
 8001f94:	4a15      	ldr	r2, [pc, #84]	@ (8001fec <_ZNK15MotorController10getVoltageEv+0x148>)
 8001f96:	2140      	movs	r1, #64	@ 0x40
 8001f98:	f00a fe5e 	bl	800cc58 <sniprintf>
        screen->sendText("batterie", text);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa0:	f107 0208 	add.w	r2, r7, #8
 8001fa4:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <_ZNK15MotorController10getVoltageEv+0x13c>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f9d8 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>
    }
    return voltage;
 8001fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fae:	ee07 3a90 	vmov	s15, r3
}
 8001fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb6:	3758      	adds	r7, #88	@ 0x58
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	0800f790 	.word	0x0800f790
 8001fc0:	0800f7bc 	.word	0x0800f7bc
 8001fc4:	42213333 	.word	0x42213333
 8001fc8:	425a6666 	.word	0x425a6666
 8001fcc:	425a6666 	.word	0x425a6666
 8001fd0:	42213333 	.word	0x42213333
 8001fd4:	4164cccc 	.word	0x4164cccc
 8001fd8:	42c80000 	.word	0x42c80000
 8001fdc:	0800f7c4 	.word	0x0800f7c4
 8001fe0:	0800f7d8 	.word	0x0800f7d8
 8001fe4:	4230cccd 	.word	0x4230cccd
 8001fe8:	0800f7e4 	.word	0x0800f7e4
 8001fec:	0800f7f4 	.word	0x0800f7f4

08001ff0 <_ZN15MotorController14applyDirectionEf>:

//_________________________________________________________________________

float MotorController::applyDirection(float value) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	ed87 0a00 	vstr	s0, [r7]
    return (direction == DirectionMode::REVERSE) ? -value : value;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d104      	bne.n	800200e <_ZN15MotorController14applyDirectionEf+0x1e>
 8002004:	edd7 7a00 	vldr	s15, [r7]
 8002008:	eef1 7a67 	vneg.f32	s15, s15
 800200c:	e001      	b.n	8002012 <_ZN15MotorController14applyDirectionEf+0x22>
 800200e:	edd7 7a00 	vldr	s15, [r7]
}
 8002012:	eeb0 0a67 	vmov.f32	s0, s15
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_ZN15MotorController12getDutyCycleEv>:

//_________________________________________________________________________________

float MotorController::getDutyCycle()
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    float duty = vesc->getDutyCycle();
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fb9f 	bl	8001770 <_ZN13VESCInterface12getDutyCycleEv>
 8002032:	ed87 0a03 	vstr	s0, [r7, #12]
    //if (screen) screen->sendValue("n0", duty * 100.0f, "%.1f");
    return duty;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	ee07 3a90 	vmov	s15, r3
}
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <_ZN15MotorController12updateScreenEv>:

//________________________________________________________________________________

void MotorController::updateScreen() {
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    if (!screen) return;  // Sécurité : écran non initialisé
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002054:	2b00      	cmp	r3, #0
 8002056:	d065      	beq.n	8002124 <_ZN15MotorController12updateScreenEv+0xdc>

    // Point de débogage
    screen->sendText("err", "UpdateScreen running");
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800205c:	4a33      	ldr	r2, [pc, #204]	@ (800212c <_ZN15MotorController12updateScreenEv+0xe4>)
 800205e:	4934      	ldr	r1, [pc, #208]	@ (8002130 <_ZN15MotorController12updateScreenEv+0xe8>)
 8002060:	4618      	mov	r0, r3
 8002062:	f000 f97b 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>

    float LinearGain = getGain();
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fc7f 	bl	800196a <_ZN15MotorController7getGainEv>
 800206c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    DirectionMode direction = getDirection();
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fca6 	bl	80019c2 <_ZNK15MotorController12getDirectionEv>
 8002076:	6238      	str	r0, [r7, #32]
    ControlMode mode = getControlMode();
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fcbc 	bl	80019f6 <_ZN15MotorController14getControlModeEv>
 800207e:	61f8      	str	r0, [r7, #28]
    float rpm     = getCadence();
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fd1b 	bl	8001abc <_ZN15MotorController10getCadenceEv>
 8002086:	ed87 0a06 	vstr	s0, [r7, #24]
    float torque  = getTorque();
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fd4a 	bl	8001b24 <_ZN15MotorController9getTorqueEv>
 8002090:	ed87 0a05 	vstr	s0, [r7, #20]
    float power   = getPower();
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fe17 	bl	8001cc8 <_ZN15MotorController8getPowerEv>
 800209a:	ed87 0a04 	vstr	s0, [r7, #16]
    float dutyCycle = getDutyCycle();
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffbe 	bl	8002020 <_ZN15MotorController12getDutyCycleEv>
 80020a4:	ed87 0a03 	vstr	s0, [r7, #12]
    getVoltage();
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff fefb 	bl	8001ea4 <_ZNK15MotorController10getVoltageEv>

    // Affichage à l'écran
    screen->showGain(LinearGain);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fa5c 	bl	8002574 <_ZN13ScreenDisplay8showGainEf>
    screen->showDirection(direction);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c0:	6a39      	ldr	r1, [r7, #32]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fcd0 	bl	8002a68 <_ZN13ScreenDisplay13showDirectionE13DirectionMode>
    screen->showMode(mode);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020cc:	69f9      	ldr	r1, [r7, #28]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fa12 	bl	80024f8 <_ZN13ScreenDisplay8showModeE11ControlMode>
    screen->showCadence(rpm);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020d8:	ed97 0a06 	vldr	s0, [r7, #24]
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 f985 	bl	80023ec <_ZN13ScreenDisplay11showCadenceEf>
    screen->showTorque(torque);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e6:	ed97 0a05 	vldr	s0, [r7, #20]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f994 	bl	8002418 <_ZN13ScreenDisplay10showTorqueEf>
    screen->showPower(power);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f4:	ed97 0a04 	vldr	s0, [r7, #16]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f9a3 	bl	8002444 <_ZN13ScreenDisplay9showPowerEf>
    screen->showDutyCycle(dutyCycle);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	ed97 0a03 	vldr	s0, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fc8e 	bl	8002a28 <_ZN13ScreenDisplay13showDutyCycleEf>
    screen->showAll(rpm, torque, power);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002110:	ed97 1a04 	vldr	s2, [r7, #16]
 8002114:	edd7 0a05 	vldr	s1, [r7, #20]
 8002118:	ed97 0a06 	vldr	s0, [r7, #24]
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f9a7 	bl	8002470 <_ZN13ScreenDisplay7showAllEfff>
 8002122:	e000      	b.n	8002126 <_ZN15MotorController12updateScreenEv+0xde>
    if (!screen) return;  // Sécurité : écran non initialisé
 8002124:	bf00      	nop
}
 8002126:	3728      	adds	r7, #40	@ 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	0800f804 	.word	0x0800f804
 8002130:	0800f81c 	.word	0x0800f81c

08002134 <_ZN15MotorController16updateFromScreenEv>:

//________________________________________________________________________________
void MotorController::updateFromScreen()
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	@ 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
    if (!screen) return;  // Sécurité : écran non initialisé
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80c2 	beq.w	80022ca <_ZN15MotorController16updateFromScreenEv+0x196>

    DirectionMode selectedDirection = screen->getDirection();
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fd44 	bl	8002bd8 <_ZN13ScreenDisplay12getDirectionEv>
 8002150:	6278      	str	r0, [r7, #36]	@ 0x24
    setDirection(selectedDirection);
 8002152:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fc26 	bl	80019a6 <_ZN15MotorController12setDirectionE13DirectionMode>

    ControlMode selectedMode = screen->getMode();
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fbc2 	bl	80028e8 <_ZN13ScreenDisplay7getModeEv>
 8002164:	6238      	str	r0, [r7, #32]
    setControlMode(selectedMode);
 8002166:	6a39      	ldr	r1, [r7, #32]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fc36 	bl	80019da <_ZN15MotorController14setControlModeE11ControlMode>

    float ramp = screen->getRampRate();
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	4618      	mov	r0, r3
 8002174:	f000 fd48 	bl	8002c08 <_ZN13ScreenDisplay11getRampRateEv>
 8002178:	ed87 0a07 	vstr	s0, [r7, #28]
    setrampRate(ramp);
 800217c:	ed97 0a07 	vldr	s0, [r7, #28]
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fc01 	bl	8001988 <_ZN15MotorController11setrampRateEf>

    static bool wasStopped = false;  // Pour mémoriser si le moteur était arrêté
    static float lastInstruction = 0.0f;  // Pour mémoriser la dernière instruction

    if (screen->getStop())
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fc86 	bl	8002a9c <_ZN13ScreenDisplay7getStopEv>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d011      	beq.n	80021ba <_ZN15MotorController16updateFromScreenEv+0x86>
    {
        if (!wasStopped) {
 8002196:	4b4f      	ldr	r3, [pc, #316]	@ (80022d4 <_ZN15MotorController16updateFromScreenEv+0x1a0>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <_ZN15MotorController16updateFromScreenEv+0xa4>
            // Premier appui sur stop : on arrête et on mémorise l'état
            lastInstruction = instruction;  // Sauvegarde de l'instruction actuelle
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4a4b      	ldr	r2, [pc, #300]	@ (80022d8 <_ZN15MotorController16updateFromScreenEv+0x1a4>)
 80021aa:	6013      	str	r3, [r2, #0]
            stop();
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fdff 	bl	8001db0 <_ZN15MotorController4stopEv>
            wasStopped = true;
 80021b2:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <_ZN15MotorController16updateFromScreenEv+0x1a0>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	701a      	strb	r2, [r3, #0]
 80021b8:	e00e      	b.n	80021d8 <_ZN15MotorController16updateFromScreenEv+0xa4>
        }
    }
    else if (wasStopped) {
 80021ba:	4b46      	ldr	r3, [pc, #280]	@ (80022d4 <_ZN15MotorController16updateFromScreenEv+0x1a0>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <_ZN15MotorController16updateFromScreenEv+0xa4>
        // Le bouton stop est relâché et le moteur était arrêté
        // On redémarre avec les mêmes paramètres
        wasStopped = false;
 80021c2:	4b44      	ldr	r3, [pc, #272]	@ (80022d4 <_ZN15MotorController16updateFromScreenEv+0x1a0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
        setInstruction(lastInstruction);
 80021c8:	4b43      	ldr	r3, [pc, #268]	@ (80022d8 <_ZN15MotorController16updateFromScreenEv+0x1a4>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fc1c 	bl	8001a10 <_ZN15MotorController14setInstructionEf>
    }

    if (!wasStopped) {  // On ne met à jour les paramètres que si le moteur n'est pas arrêté
 80021d8:	4b3e      	ldr	r3, [pc, #248]	@ (80022d4 <_ZN15MotorController16updateFromScreenEv+0x1a0>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	f083 0301 	eor.w	r3, r3, #1
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d065      	beq.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
        switch (controlMode)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d860      	bhi.n	80022b0 <_ZN15MotorController16updateFromScreenEv+0x17c>
 80021ee:	a201      	add	r2, pc, #4	@ (adr r2, 80021f4 <_ZN15MotorController16updateFromScreenEv+0xc0>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002233 	.word	0x08002233
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800225d 	.word	0x0800225d
 8002200:	0800225d 	.word	0x0800225d
 8002204:	08002287 	.word	0x08002287
        {
            case ControlMode::CADENCE:
            {
                float rpm = screen->getUserCadence();
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fa11 	bl	8002634 <_ZN13ScreenDisplay14getUserCadenceEv>
 8002212:	ed87 0a04 	vstr	s0, [r7, #16]
                if (rpm >= 0.0f) {  // Vérifie que la valeur est valide
 8002216:	edd7 7a04 	vldr	s15, [r7, #16]
 800221a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	da00      	bge.n	8002226 <_ZN15MotorController16updateFromScreenEv+0xf2>
                    setInstruction(rpm);
                }
                break;
 8002224:	e045      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
                    setInstruction(rpm);
 8002226:	ed97 0a04 	vldr	s0, [r7, #16]
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fbf0 	bl	8001a10 <_ZN15MotorController14setInstructionEf>
                break;
 8002230:	e03f      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
            }

            case ControlMode::TORQUE:
            {
                float torque = screen->getUserTorque();
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002236:	4618      	mov	r0, r3
 8002238:	f000 faee 	bl	8002818 <_ZN13ScreenDisplay13getUserTorqueEv>
 800223c:	ed87 0a03 	vstr	s0, [r7, #12]
                if (torque >= 0.0f) {  // Vérifie que la valeur est valide
 8002240:	edd7 7a03 	vldr	s15, [r7, #12]
 8002244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224c:	da00      	bge.n	8002250 <_ZN15MotorController16updateFromScreenEv+0x11c>
                    setInstruction(torque);
                }
                break;
 800224e:	e030      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
                    setInstruction(torque);
 8002250:	ed97 0a03 	vldr	s0, [r7, #12]
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff fbdb 	bl	8001a10 <_ZN15MotorController14setInstructionEf>
                break;
 800225a:	e02a      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
            }

            case ControlMode::POWER_CONCENTRIC:
            case ControlMode::POWER_ECCENTRIC:
            {
                float power = screen->getUserPower();
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fa71 	bl	8002748 <_ZN13ScreenDisplay12getUserPowerEv>
 8002266:	ed87 0a05 	vstr	s0, [r7, #20]
                if (power >= 0.0f) {  // Vérifie que la valeur est valide
 800226a:	edd7 7a05 	vldr	s15, [r7, #20]
 800226e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002276:	da00      	bge.n	800227a <_ZN15MotorController16updateFromScreenEv+0x146>
                    setInstruction(power);
                }
                break;
 8002278:	e01b      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
                    setInstruction(power);
 800227a:	ed97 0a05 	vldr	s0, [r7, #20]
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fbc6 	bl	8001a10 <_ZN15MotorController14setInstructionEf>
                break;
 8002284:	e015      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
            }

            case ControlMode::LINEAR:
            {
                float gain = screen->getUserLinearGain();
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fb5a 	bl	8002944 <_ZN13ScreenDisplay17getUserLinearGainEv>
 8002290:	ed87 0a06 	vstr	s0, [r7, #24]
                if (gain >= 0.0f) {  // Vérifie que la valeur est valide
 8002294:	edd7 7a06 	vldr	s15, [r7, #24]
 8002298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	da00      	bge.n	80022a4 <_ZN15MotorController16updateFromScreenEv+0x170>
                    setLinearGain(gain);
                }
                break;
 80022a2:	e006      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
                    setLinearGain(gain);
 80022a4:	ed97 0a06 	vldr	s0, [r7, #24]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff fb4f 	bl	800194c <_ZN15MotorController13setLinearGainEf>
                break;
 80022ae:	e000      	b.n	80022b2 <_ZN15MotorController16updateFromScreenEv+0x17e>
            }

            default:
                break;
 80022b0:	bf00      	nop
        }
    }

    if (screen->getCalibrateRequest())
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fcbe 	bl	8002c38 <_ZN13ScreenDisplay19getCalibrateRequestEv>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <_ZN15MotorController16updateFromScreenEv+0x198>
    {
        calibrateTorqueConstant();
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff faf4 	bl	80018b0 <_ZN15MotorController23calibrateTorqueConstantEv>
 80022c8:	e000      	b.n	80022cc <_ZN15MotorController16updateFromScreenEv+0x198>
    if (!screen) return;  // Sécurité : écran non initialisé
 80022ca:	bf00      	nop
    }
}
 80022cc:	3728      	adds	r7, #40	@ 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001f4 	.word	0x200001f4
 80022d8:	200001f8 	.word	0x200001f8

080022dc <_ZN13ScreenDisplayC1EP20__UART_HandleTypeDef>:


 #include "../Inc/ScreenDisplay.hpp"
 #include "../Inc/MotorController.hpp"

 ScreenDisplay::ScreenDisplay(UART_HandleTypeDef* EcranUart) : ecran_uart(EcranUart) {}
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	711a      	strb	r2, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	715a      	strb	r2, [r3, #5]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <_ZN13ScreenDisplay11sendCommandEPKc>:

 void ScreenDisplay::sendCommand(const char* cmd) {
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
     HAL_UART_Transmit(ecran_uart, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681c      	ldr	r4, [r3, #0]
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f7fd ffaa 	bl	8000270 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	f04f 33ff 	mov.w	r3, #4294967295
 8002324:	6839      	ldr	r1, [r7, #0]
 8002326:	4620      	mov	r0, r4
 8002328:	f004 fd62 	bl	8006df0 <HAL_UART_Transmit>
     uint8_t end[3] = {0xFF, 0xFF, 0xFF};
 800232c:	4a0a      	ldr	r2, [pc, #40]	@ (8002358 <_ZN13ScreenDisplay11sendCommandEPKc+0x50>)
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	4611      	mov	r1, r2
 8002336:	8019      	strh	r1, [r3, #0]
 8002338:	3302      	adds	r3, #2
 800233a:	0c12      	lsrs	r2, r2, #16
 800233c:	701a      	strb	r2, [r3, #0]
     HAL_UART_Transmit(ecran_uart, end, 3, HAL_MAX_DELAY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	f107 010c 	add.w	r1, r7, #12
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	2203      	movs	r2, #3
 800234c:	f004 fd50 	bl	8006df0 <HAL_UART_Transmit>
 }
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	0800f820 	.word	0x0800f820

0800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>:

 void ScreenDisplay::sendText(const char* component, const char* message) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b096      	sub	sp, #88	@ 0x58
 8002360:	af02      	add	r7, sp, #8
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
     char buffer[64];
     snprintf(buffer, sizeof(buffer), "%s.txt=\"%s\"", component, message);
 8002368:	f107 0010 	add.w	r0, r7, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4a07      	ldr	r2, [pc, #28]	@ (8002390 <_ZN13ScreenDisplay8sendTextEPKcS1_+0x34>)
 8002374:	2140      	movs	r1, #64	@ 0x40
 8002376:	f00a fc6f 	bl	800cc58 <sniprintf>
     sendCommand(buffer);
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4619      	mov	r1, r3
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff ffc1 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
 }
 8002386:	bf00      	nop
 8002388:	3750      	adds	r7, #80	@ 0x50
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	0800f824 	.word	0x0800f824

08002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>:

 void ScreenDisplay::sendValue(const char* component, float value, const char* format)
 // Afficher un nombre (float) dans un champ texte (t1, cad, pow, etc.) sur l'écran Nextion,
 //en utilisant un format personnalisé (ex : %.1f ou %.2f).
 {
 8002394:	b580      	push	{r7, lr}
 8002396:	b09e      	sub	sp, #120	@ 0x78
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	ed87 0a01 	vstr	s0, [r7, #4]
 80023a2:	603a      	str	r2, [r7, #0]
     char valueStr[32];
     snprintf(valueStr, sizeof(valueStr), format, value);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe f8cf 	bl	8000548 <__aeabi_f2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80023b2:	e9cd 2300 	strd	r2, r3, [sp]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	2120      	movs	r1, #32
 80023ba:	f00a fc4d 	bl	800cc58 <sniprintf>

     char buffer[64];
     snprintf(buffer, sizeof(buffer), "%s.txt=\"%s\"", component, valueStr);
 80023be:	f107 0010 	add.w	r0, r7, #16
 80023c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <_ZN13ScreenDisplay9sendValueEPKcfS1_+0x54>)
 80023cc:	2140      	movs	r1, #64	@ 0x40
 80023ce:	f00a fc43 	bl	800cc58 <sniprintf>
     sendCommand(buffer);
 80023d2:	f107 0310 	add.w	r3, r7, #16
 80023d6:	4619      	mov	r1, r3
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff ff95 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
 }
 80023de:	bf00      	nop
 80023e0:	3770      	adds	r7, #112	@ 0x70
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	0800f824 	.word	0x0800f824

080023ec <_ZN13ScreenDisplay11showCadenceEf>:

 // --- Fonctions spécifiques de haut niveau ---

 void ScreenDisplay::showCadence(float rpm) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	ed87 0a00 	vstr	s0, [r7]
     sendValue("cad_val", rpm, "%.1f");
 80023f8:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <_ZN13ScreenDisplay11showCadenceEf+0x24>)
 80023fa:	ed97 0a00 	vldr	s0, [r7]
 80023fe:	4905      	ldr	r1, [pc, #20]	@ (8002414 <_ZN13ScreenDisplay11showCadenceEf+0x28>)
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ffc7 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
 }
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	0800f830 	.word	0x0800f830
 8002414:	0800f838 	.word	0x0800f838

08002418 <_ZN13ScreenDisplay10showTorqueEf>:
    sprintf(cmd, "add cad_val,0,%.0f", rpm);
    sendCommand(cmd);
}*/


 void ScreenDisplay::showTorque(float torque) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	ed87 0a00 	vstr	s0, [r7]
     sendValue("tor_val", torque, "%.4f");
 8002424:	4a05      	ldr	r2, [pc, #20]	@ (800243c <_ZN13ScreenDisplay10showTorqueEf+0x24>)
 8002426:	ed97 0a00 	vldr	s0, [r7]
 800242a:	4905      	ldr	r1, [pc, #20]	@ (8002440 <_ZN13ScreenDisplay10showTorqueEf+0x28>)
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ffb1 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
 }
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	0800f840 	.word	0x0800f840
 8002440:	0800f848 	.word	0x0800f848

08002444 <_ZN13ScreenDisplay9showPowerEf>:
    sprintf(cmd, "add tor_val,0,%.0f", torque);  // envoie une valeur entière
    sendCommand(cmd);
}*/


 void ScreenDisplay::showPower(float power) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	ed87 0a00 	vstr	s0, [r7]
     sendValue("pow_val", power, "%.1f");
 8002450:	4a05      	ldr	r2, [pc, #20]	@ (8002468 <_ZN13ScreenDisplay9showPowerEf+0x24>)
 8002452:	ed97 0a00 	vldr	s0, [r7]
 8002456:	4905      	ldr	r1, [pc, #20]	@ (800246c <_ZN13ScreenDisplay9showPowerEf+0x28>)
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff9b 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
 }
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	0800f830 	.word	0x0800f830
 800246c:	0800f850 	.word	0x0800f850

08002470 <_ZN13ScreenDisplay7showAllEfff>:
    char cmd[50];
    sprintf(cmd, "add pow_val,0,%.0f", power);  // conversion en entier pour le graphe
    sendCommand(cmd);
}*/

void ScreenDisplay::showAll(float rpm, float torque, float power) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b092      	sub	sp, #72	@ 0x48
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	ed87 0a02 	vstr	s0, [r7, #8]
 800247c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002480:	ed87 1a00 	vstr	s2, [r7]
    char cmd[50];

    // Canal 0 : cadence (RPM)
    sprintf(cmd, "add multi_val,0,%.0f", rpm);
 8002484:	68b8      	ldr	r0, [r7, #8]
 8002486:	f7fe f85f 	bl	8000548 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	f107 0014 	add.w	r0, r7, #20
 8002492:	4916      	ldr	r1, [pc, #88]	@ (80024ec <_ZN13ScreenDisplay7showAllEfff+0x7c>)
 8002494:	f00a fc16 	bl	800ccc4 <siprintf>
    sendCommand(cmd);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff32 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

    // Canal 1 : torque (Nm)
    sprintf(cmd, "add multi_val,1,%.0f", torque);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe f84f 	bl	8000548 <__aeabi_f2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	f107 0014 	add.w	r0, r7, #20
 80024b2:	490f      	ldr	r1, [pc, #60]	@ (80024f0 <_ZN13ScreenDisplay7showAllEfff+0x80>)
 80024b4:	f00a fc06 	bl	800ccc4 <siprintf>
    sendCommand(cmd);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff ff22 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

    // Canal 2 : power (W)
    sprintf(cmd, "add multi_val,2,%.0f", power);
 80024c4:	6838      	ldr	r0, [r7, #0]
 80024c6:	f7fe f83f 	bl	8000548 <__aeabi_f2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	f107 0014 	add.w	r0, r7, #20
 80024d2:	4908      	ldr	r1, [pc, #32]	@ (80024f4 <_ZN13ScreenDisplay7showAllEfff+0x84>)
 80024d4:	f00a fbf6 	bl	800ccc4 <siprintf>
    sendCommand(cmd);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff ff12 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
}
 80024e4:	bf00      	nop
 80024e6:	3748      	adds	r7, #72	@ 0x48
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	0800f858 	.word	0x0800f858
 80024f0:	0800f870 	.word	0x0800f870
 80024f4:	0800f888 	.word	0x0800f888

080024f8 <_ZN13ScreenDisplay8showModeE11ControlMode>:


 void ScreenDisplay::showMode(ControlMode mode) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]

    const char* modeName = "UNKNOWN";
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <_ZN13ScreenDisplay8showModeE11ControlMode+0x60>)
 8002504:	60fb      	str	r3, [r7, #12]
    switch (mode) {
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d81c      	bhi.n	8002546 <_ZN13ScreenDisplay8showModeE11ControlMode+0x4e>
 800250c:	a201      	add	r2, pc, #4	@ (adr r2, 8002514 <_ZN13ScreenDisplay8showModeE11ControlMode+0x1c>)
 800250e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002512:	bf00      	nop
 8002514:	0800252f 	.word	0x0800252f
 8002518:	08002529 	.word	0x08002529
 800251c:	08002535 	.word	0x08002535
 8002520:	0800253b 	.word	0x0800253b
 8002524:	08002541 	.word	0x08002541
        case ControlMode::CADENCE: modeName = "Cadence"; break;
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <_ZN13ScreenDisplay8showModeE11ControlMode+0x64>)
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	e00b      	b.n	8002546 <_ZN13ScreenDisplay8showModeE11ControlMode+0x4e>
        case ControlMode::TORQUE: modeName = "Torque"; break;
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <_ZN13ScreenDisplay8showModeE11ControlMode+0x68>)
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	e008      	b.n	8002546 <_ZN13ScreenDisplay8showModeE11ControlMode+0x4e>
        case ControlMode::POWER_CONCENTRIC: modeName = "Power Concentric"; break;
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <_ZN13ScreenDisplay8showModeE11ControlMode+0x6c>)
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e005      	b.n	8002546 <_ZN13ScreenDisplay8showModeE11ControlMode+0x4e>
        case ControlMode::POWER_ECCENTRIC: modeName = "Power Eccentric"; break;
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <_ZN13ScreenDisplay8showModeE11ControlMode+0x70>)
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e002      	b.n	8002546 <_ZN13ScreenDisplay8showModeE11ControlMode+0x4e>
        case ControlMode::LINEAR: modeName = "Linear"; break;
 8002540:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <_ZN13ScreenDisplay8showModeE11ControlMode+0x74>)
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	bf00      	nop
    }
    sendText("mode_show", modeName);
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4909      	ldr	r1, [pc, #36]	@ (8002570 <_ZN13ScreenDisplay8showModeE11ControlMode+0x78>)
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff06 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>

}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	0800f8a0 	.word	0x0800f8a0
 800255c:	0800f8a8 	.word	0x0800f8a8
 8002560:	0800f8b0 	.word	0x0800f8b0
 8002564:	0800f8b8 	.word	0x0800f8b8
 8002568:	0800f8cc 	.word	0x0800f8cc
 800256c:	0800f8dc 	.word	0x0800f8dc
 8002570:	0800f8e4 	.word	0x0800f8e4

08002574 <_ZN13ScreenDisplay8showGainEf>:


 void ScreenDisplay::showGain(float LinearGain) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	ed87 0a00 	vstr	s0, [r7]
    sendValue("gain_val", LinearGain, "%.2f");
 8002580:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <_ZN13ScreenDisplay8showGainEf+0x24>)
 8002582:	ed97 0a00 	vldr	s0, [r7]
 8002586:	4905      	ldr	r1, [pc, #20]	@ (800259c <_ZN13ScreenDisplay8showGainEf+0x28>)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff03 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	0800f8f0 	.word	0x0800f8f0
 800259c:	0800f8f8 	.word	0x0800f8f8

080025a0 <_ZN13ScreenDisplay9readInt32Ev>:
 void ScreenDisplay::clearScreen() {
     sendCommand("cls BLACK");  // Efface l'écran
 }

 int32_t ScreenDisplay::readInt32()
 {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
    uint8_t response[8]; //On crée un tableau pour recevoir jusqu'à 8 octets en provenance de l'écran Nextion, via l'UART

    //La réponse ressemble à ça: 0x71 [val0] [val1] [val2] [val3] 0xFF 0xFF 0xFF avec de val0 à val3 le message qui nous interesse cdé en little indian
    if (HAL_UART_Receive(ecran_uart, response, 8, 100) != HAL_OK) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f107 010c 	add.w	r1, r7, #12
 80025b0:	2364      	movs	r3, #100	@ 0x64
 80025b2:	2208      	movs	r2, #8
 80025b4:	f004 fca7 	bl	8006f06 <HAL_UART_Receive>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <_ZN13ScreenDisplay9readInt32Ev+0x2e>
        return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	e012      	b.n	80025f4 <_ZN13ScreenDisplay9readInt32Ev+0x54>
    }

    if (response[0] != 0x71) return -1;
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	2b71      	cmp	r3, #113	@ 0x71
 80025d2:	d002      	beq.n	80025da <_ZN13ScreenDisplay9readInt32Ev+0x3a>
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	e00c      	b.n	80025f4 <_ZN13ScreenDisplay9readInt32Ev+0x54>

    int32_t value = (response[1]) |
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	461a      	mov	r2, r3
                    (response[2] << 8) |
 80025de:	7bbb      	ldrb	r3, [r7, #14]
 80025e0:	021b      	lsls	r3, r3, #8
    int32_t value = (response[1]) |
 80025e2:	431a      	orrs	r2, r3
                    (response[3] << 16) |
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	041b      	lsls	r3, r3, #16
                    (response[2] << 8) |
 80025e8:	431a      	orrs	r2, r3
                    (response[4] << 24);
 80025ea:	7c3b      	ldrb	r3, [r7, #16]
 80025ec:	061b      	lsls	r3, r3, #24
    int32_t value = (response[1]) |
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
    //response[1] = octet le moins significatif (LSB)
    //response[4] = octet le plus significatif (MSB)

    return value;
 80025f2:	697b      	ldr	r3, [r7, #20]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN13ScreenDisplay8readByteEv>:
    sendCommand("get cad.txt");  // cad : champ de cadence
    int32_t value = readInt32();
    return static_cast<float>(value);  // en tr/min
}*/

 uint8_t ScreenDisplay::readByte() {
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
     // Attend que l'octet soit reçu (RXNE = 1)
     while (!(USART2->SR & USART_SR_RXNE));
 8002604:	bf00      	nop
 8002606:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <_ZN13ScreenDisplay8readByteEv+0x34>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f4      	bne.n	8002606 <_ZN13ScreenDisplay8readByteEv+0xa>

     // Lit l'octet reçu (registre de données)
     return static_cast<uint8_t>(USART2->DR & 0xFF);
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <_ZN13ScreenDisplay8readByteEv+0x34>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	b2db      	uxtb	r3, r3
 }
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40004400 	.word	0x40004400

08002634 <_ZN13ScreenDisplay14getUserCadenceEv>:


 float ScreenDisplay::getUserCadence() {
 8002634:	b580      	push	{r7, lr}
 8002636:	b092      	sub	sp, #72	@ 0x48
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
     sendCommand("get cad.txt");  // Envoie la commande à l'écran Nextion
 800263c:	493f      	ldr	r1, [pc, #252]	@ (800273c <_ZN13ScreenDisplay14getUserCadenceEv+0x108>)
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fe62 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

     // Attente de la réponse : format = 0x70 + "texte" + 0xFF 0xFF 0xFF
     const uint8_t RESPONSE_HEADER = 0x70;
 8002644:	2370      	movs	r3, #112	@ 0x70
 8002646:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
     const uint8_t END_BYTE = 0xFF;
 800264a:	23ff      	movs	r3, #255	@ 0xff
 800264c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
     const uint32_t TIMEOUT_MS = 100;  // Timeout de 100ms
 8002650:	2364      	movs	r3, #100	@ 0x64
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34

     char buffer[32] = {0};
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	2220      	movs	r2, #32
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f00a fb96 	bl	800cd8e <memset>
     int index = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	647b      	str	r3, [r7, #68]	@ 0x44
     bool headerFound = false;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
     int endCount = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     uint32_t startTime = HAL_GetTick();
 8002670:	f001 f936 	bl	80038e0 <HAL_GetTick>
 8002674:	6338      	str	r0, [r7, #48]	@ 0x30

     // Boucle d'attente de réponse avec timeout
     while (HAL_GetTick() - startTime < TIMEOUT_MS) {
 8002676:	e04c      	b.n	8002712 <_ZN13ScreenDisplay14getUserCadenceEv+0xde>
         if (!(USART2->SR & USART_SR_RXNE)) {
 8002678:	4b31      	ldr	r3, [pc, #196]	@ (8002740 <_ZN13ScreenDisplay14getUserCadenceEv+0x10c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d13e      	bne.n	800270c <_ZN13ScreenDisplay14getUserCadenceEv+0xd8>
             continue;  // Pas de données disponibles
         }

         uint8_t byte = static_cast<uint8_t>(USART2->DR & 0xFF);
 800268e:	4b2c      	ldr	r3, [pc, #176]	@ (8002740 <_ZN13ScreenDisplay14getUserCadenceEv+0x10c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

         if (!headerFound) {
 8002696:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800269a:	f083 0301 	eor.w	r3, r3, #1
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <_ZN13ScreenDisplay14getUserCadenceEv+0x80>
             if (byte == RESPONSE_HEADER) {
 80026a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026a8:	2b70      	cmp	r3, #112	@ 0x70
 80026aa:	d131      	bne.n	8002710 <_ZN13ScreenDisplay14getUserCadenceEv+0xdc>
                 headerFound = true;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
             }
             continue;
 80026b2:	e02d      	b.n	8002710 <_ZN13ScreenDisplay14getUserCadenceEv+0xdc>
         }

         if (byte == END_BYTE) {
 80026b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026b8:	2bff      	cmp	r3, #255	@ 0xff
 80026ba:	d118      	bne.n	80026ee <_ZN13ScreenDisplay14getUserCadenceEv+0xba>
             endCount++;
 80026bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026be:	3301      	adds	r3, #1
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
             if (endCount == 3) {
 80026c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d124      	bne.n	8002712 <_ZN13ScreenDisplay14getUserCadenceEv+0xde>
                 buffer[index] = '\0';
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026ce:	4413      	add	r3, r2
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
                 return atof(buffer);  // Conversion réussie
 80026d4:	f107 030c 	add.w	r3, r7, #12
 80026d8:	4618      	mov	r0, r3
 80026da:	f008 fede 	bl	800b49a <atof>
 80026de:	ec53 2b10 	vmov	r2, r3, d0
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fa7f 	bl	8000be8 <__aeabi_d2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	e01e      	b.n	800272c <_ZN13ScreenDisplay14getUserCadenceEv+0xf8>
             }
         } else {
             if (index < sizeof(buffer) - 1) {
 80026ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f0:	2b1e      	cmp	r3, #30
 80026f2:	d808      	bhi.n	8002706 <_ZN13ScreenDisplay14getUserCadenceEv+0xd2>
                 buffer[index++] = byte;
 80026f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	647a      	str	r2, [r7, #68]	@ 0x44
 80026fa:	3348      	adds	r3, #72	@ 0x48
 80026fc:	443b      	add	r3, r7
 80026fe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002702:	f803 2c3c 	strb.w	r2, [r3, #-60]
             }
             endCount = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800270a:	e002      	b.n	8002712 <_ZN13ScreenDisplay14getUserCadenceEv+0xde>
             continue;  // Pas de données disponibles
 800270c:	bf00      	nop
 800270e:	e000      	b.n	8002712 <_ZN13ScreenDisplay14getUserCadenceEv+0xde>
             continue;
 8002710:	bf00      	nop
     while (HAL_GetTick() - startTime < TIMEOUT_MS) {
 8002712:	f001 f8e5 	bl	80038e0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b63      	cmp	r3, #99	@ 0x63
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1a6      	bne.n	8002678 <_ZN13ScreenDisplay14getUserCadenceEv+0x44>
         }
     }

     // Timeout ou erreur
     return -1.0f;  // Valeur d'erreur
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <_ZN13ScreenDisplay14getUserCadenceEv+0x110>)
 }
 800272c:	ee07 3a90 	vmov	s15, r3
 8002730:	eeb0 0a67 	vmov.f32	s0, s15
 8002734:	3748      	adds	r7, #72	@ 0x48
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	0800f930 	.word	0x0800f930
 8002740:	40004400 	.word	0x40004400
 8002744:	bf800000 	.word	0xbf800000

08002748 <_ZN13ScreenDisplay12getUserPowerEv>:
    sendCommand("get pow.val");  // pow : champ de puissance
    int32_t value = readInt32();
    return static_cast<float>(value);  // en watts
}*/

 float ScreenDisplay::getUserPower() {
 8002748:	b580      	push	{r7, lr}
 800274a:	b08e      	sub	sp, #56	@ 0x38
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
     sendCommand("get pow.txt");  // Demande à l'écran Nextion la valeur texte de pow
 8002750:	4930      	ldr	r1, [pc, #192]	@ (8002814 <_ZN13ScreenDisplay12getUserPowerEv+0xcc>)
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fdd8 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

     const uint8_t RESPONSE_HEADER = 0x70;
 8002758:	2370      	movs	r3, #112	@ 0x70
 800275a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
     const uint8_t END_BYTE = 0xFF;
 800275e:	23ff      	movs	r3, #255	@ 0xff
 8002760:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

     char buffer[32] = {0};
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	2220      	movs	r2, #32
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f00a fb0e 	bl	800cd8e <memset>
     int index = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
     bool headerFound = false;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
     int endCount = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c

     while (true) {
         uint8_t byte = readByte();  // Fonction bloquante UART
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff ff3b 	bl	80025fc <_ZN13ScreenDisplay8readByteEv>
 8002786:	4603      	mov	r3, r0
 8002788:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

         if (!headerFound) {
 800278c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002790:	f083 0301 	eor.w	r3, r3, #1
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <_ZN13ScreenDisplay12getUserPowerEv+0x62>
             if (byte == RESPONSE_HEADER) {
 800279a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800279e:	2b70      	cmp	r3, #112	@ 0x70
 80027a0:	d123      	bne.n	80027ea <_ZN13ScreenDisplay12getUserPowerEv+0xa2>
                 headerFound = true;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             }
             continue;
 80027a8:	e01f      	b.n	80027ea <_ZN13ScreenDisplay12getUserPowerEv+0xa2>
         }

         if (byte == END_BYTE) {
 80027aa:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80027ae:	2bff      	cmp	r3, #255	@ 0xff
 80027b0:	d10c      	bne.n	80027cc <_ZN13ScreenDisplay12getUserPowerEv+0x84>
             endCount++;
 80027b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b4:	3301      	adds	r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
             if (endCount == 3) {
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d1e0      	bne.n	8002780 <_ZN13ScreenDisplay12getUserPowerEv+0x38>
                 buffer[index] = '\0';
 80027be:	f107 0208 	add.w	r2, r7, #8
 80027c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c4:	4413      	add	r3, r2
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
                 break;
 80027ca:	e010      	b.n	80027ee <_ZN13ScreenDisplay12getUserPowerEv+0xa6>
             }
         } else {
             if (index < sizeof(buffer) - 1) {
 80027cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ce:	2b1e      	cmp	r3, #30
 80027d0:	d808      	bhi.n	80027e4 <_ZN13ScreenDisplay12getUserPowerEv+0x9c>
                 buffer[index++] = byte;
 80027d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80027d8:	3338      	adds	r3, #56	@ 0x38
 80027da:	443b      	add	r3, r7
 80027dc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80027e0:	f803 2c30 	strb.w	r2, [r3, #-48]
             }
             endCount = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027e8:	e7ca      	b.n	8002780 <_ZN13ScreenDisplay12getUserPowerEv+0x38>
             continue;
 80027ea:	bf00      	nop
         }
     }
 80027ec:	e7c8      	b.n	8002780 <_ZN13ScreenDisplay12getUserPowerEv+0x38>

     return atof(buffer);  // Conversion vers float (watts)
 80027ee:	f107 0308 	add.w	r3, r7, #8
 80027f2:	4618      	mov	r0, r3
 80027f4:	f008 fe51 	bl	800b49a <atof>
 80027f8:	ec53 2b10 	vmov	r2, r3, d0
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f7fe f9f2 	bl	8000be8 <__aeabi_d2f>
 8002804:	4603      	mov	r3, r0
 8002806:	ee07 3a90 	vmov	s15, r3
 }
 800280a:	eeb0 0a67 	vmov.f32	s0, s15
 800280e:	3738      	adds	r7, #56	@ 0x38
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	0800f93c 	.word	0x0800f93c

08002818 <_ZN13ScreenDisplay13getUserTorqueEv>:
    sendCommand("get tor.val");  // tor : champ de couple
    int32_t value = readInt32();
    return static_cast<float>(value);  // en Nm
}*/

 float ScreenDisplay::getUserTorque() {
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	@ 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
     sendCommand("get tor.txt");  // Demande la valeur du champ texte "tor"
 8002820:	4930      	ldr	r1, [pc, #192]	@ (80028e4 <_ZN13ScreenDisplay13getUserTorqueEv+0xcc>)
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fd70 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

     const uint8_t RESPONSE_HEADER = 0x70;
 8002828:	2370      	movs	r3, #112	@ 0x70
 800282a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
     const uint8_t END_BYTE = 0xFF;
 800282e:	23ff      	movs	r3, #255	@ 0xff
 8002830:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

     char buffer[32] = {0};
 8002834:	f107 0308 	add.w	r3, r7, #8
 8002838:	2220      	movs	r2, #32
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f00a faa6 	bl	800cd8e <memset>
     int index = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	637b      	str	r3, [r7, #52]	@ 0x34
     bool headerFound = false;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
     int endCount = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	62fb      	str	r3, [r7, #44]	@ 0x2c

     while (true) {
         uint8_t byte = readByte();  // Fonction bloquante de lecture UART
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff fed3 	bl	80025fc <_ZN13ScreenDisplay8readByteEv>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

         if (!headerFound) {
 800285c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <_ZN13ScreenDisplay13getUserTorqueEv+0x62>
             if (byte == RESPONSE_HEADER) {
 800286a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800286e:	2b70      	cmp	r3, #112	@ 0x70
 8002870:	d123      	bne.n	80028ba <_ZN13ScreenDisplay13getUserTorqueEv+0xa2>
                 headerFound = true;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
             }
             continue;
 8002878:	e01f      	b.n	80028ba <_ZN13ScreenDisplay13getUserTorqueEv+0xa2>
         }

         if (byte == END_BYTE) {
 800287a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800287e:	2bff      	cmp	r3, #255	@ 0xff
 8002880:	d10c      	bne.n	800289c <_ZN13ScreenDisplay13getUserTorqueEv+0x84>
             endCount++;
 8002882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002884:	3301      	adds	r3, #1
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
             if (endCount == 3) {
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	2b03      	cmp	r3, #3
 800288c:	d1e0      	bne.n	8002850 <_ZN13ScreenDisplay13getUserTorqueEv+0x38>
                 buffer[index] = '\0';  // Fin de la chaîne reçue
 800288e:	f107 0208 	add.w	r2, r7, #8
 8002892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002894:	4413      	add	r3, r2
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
                 break;
 800289a:	e010      	b.n	80028be <_ZN13ScreenDisplay13getUserTorqueEv+0xa6>
             }
         } else {
             if (index < sizeof(buffer) - 1) {
 800289c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289e:	2b1e      	cmp	r3, #30
 80028a0:	d808      	bhi.n	80028b4 <_ZN13ScreenDisplay13getUserTorqueEv+0x9c>
                 buffer[index++] = byte;
 80028a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80028a8:	3338      	adds	r3, #56	@ 0x38
 80028aa:	443b      	add	r3, r7
 80028ac:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80028b0:	f803 2c30 	strb.w	r2, [r3, #-48]
             }
             endCount = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b8:	e7ca      	b.n	8002850 <_ZN13ScreenDisplay13getUserTorqueEv+0x38>
             continue;
 80028ba:	bf00      	nop
         }
     }
 80028bc:	e7c8      	b.n	8002850 <_ZN13ScreenDisplay13getUserTorqueEv+0x38>

     return atof(buffer);  // Convertit la chaîne en float (Nm)
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4618      	mov	r0, r3
 80028c4:	f008 fde9 	bl	800b49a <atof>
 80028c8:	ec53 2b10 	vmov	r2, r3, d0
 80028cc:	4610      	mov	r0, r2
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7fe f98a 	bl	8000be8 <__aeabi_d2f>
 80028d4:	4603      	mov	r3, r0
 80028d6:	ee07 3a90 	vmov	s15, r3
 }
 80028da:	eeb0 0a67 	vmov.f32	s0, s15
 80028de:	3738      	adds	r7, #56	@ 0x38
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	0800f948 	.word	0x0800f948

080028e8 <_ZN13ScreenDisplay7getModeEv>:


ControlMode ScreenDisplay::getMode() {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
    sendCommand("get mode.val");  // Lire la valeur du composant 'mode'
 80028f0:	4913      	ldr	r1, [pc, #76]	@ (8002940 <_ZN13ScreenDisplay7getModeEv+0x58>)
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fd08 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fe51 	bl	80025a0 <_ZN13ScreenDisplay9readInt32Ev>
 80028fe:	60f8      	str	r0, [r7, #12]

    switch (value) {
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d816      	bhi.n	8002934 <_ZN13ScreenDisplay7getModeEv+0x4c>
 8002906:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <_ZN13ScreenDisplay7getModeEv+0x24>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	08002921 	.word	0x08002921
 8002910:	08002925 	.word	0x08002925
 8002914:	08002929 	.word	0x08002929
 8002918:	0800292d 	.word	0x0800292d
 800291c:	08002931 	.word	0x08002931
        case 0: return ControlMode::CADENCE;
 8002920:	2301      	movs	r3, #1
 8002922:	e008      	b.n	8002936 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 1: return ControlMode::TORQUE;
 8002924:	2300      	movs	r3, #0
 8002926:	e006      	b.n	8002936 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 2: return ControlMode::POWER_CONCENTRIC;
 8002928:	2302      	movs	r3, #2
 800292a:	e004      	b.n	8002936 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 3: return ControlMode::POWER_ECCENTRIC;
 800292c:	2303      	movs	r3, #3
 800292e:	e002      	b.n	8002936 <_ZN13ScreenDisplay7getModeEv+0x4e>
        case 4: return ControlMode::LINEAR;
 8002930:	2304      	movs	r3, #4
 8002932:	e000      	b.n	8002936 <_ZN13ScreenDisplay7getModeEv+0x4e>
        default: return ControlMode::CADENCE;  // valeur par défaut si erreur
 8002934:	2301      	movs	r3, #1
    }
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	0800f954 	.word	0x0800f954

08002944 <_ZN13ScreenDisplay17getUserLinearGainEv>:
    int32_t value = readInt32();  // Lit la réponse binaire (format Nextion)

    return static_cast<float>(value) / 100.0f;  // Conversionenfloat
}*/

float ScreenDisplay::getUserLinearGain() {
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	@ 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    sendCommand("get gain.txt");  // Demande la valeur texte du champ gain
 800294c:	4934      	ldr	r1, [pc, #208]	@ (8002a20 <_ZN13ScreenDisplay17getUserLinearGainEv+0xdc>)
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7ff fcda 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

    const uint8_t RESPONSE_HEADER = 0x70;
 8002954:	2370      	movs	r3, #112	@ 0x70
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t END_BYTE = 0xFF;
 800295a:	23ff      	movs	r3, #255	@ 0xff
 800295c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

    char buffer[32] = {0};
 8002960:	f107 0308 	add.w	r3, r7, #8
 8002964:	2220      	movs	r2, #32
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00a fa10 	bl	800cd8e <memset>
    int index = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	637b      	str	r3, [r7, #52]	@ 0x34
    bool headerFound = false;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    int endCount = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (true) {
        uint8_t byte = readByte();  // Lecture UART bloquante
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff fe3d 	bl	80025fc <_ZN13ScreenDisplay8readByteEv>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        if (!headerFound) {
 8002988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800298c:	f083 0301 	eor.w	r3, r3, #1
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <_ZN13ScreenDisplay17getUserLinearGainEv+0x62>
            if (byte == RESPONSE_HEADER) {
 8002996:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800299a:	2b70      	cmp	r3, #112	@ 0x70
 800299c:	d123      	bne.n	80029e6 <_ZN13ScreenDisplay17getUserLinearGainEv+0xa2>
                headerFound = true;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            continue;
 80029a4:	e01f      	b.n	80029e6 <_ZN13ScreenDisplay17getUserLinearGainEv+0xa2>
        }

        if (byte == END_BYTE) {
 80029a6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80029aa:	2bff      	cmp	r3, #255	@ 0xff
 80029ac:	d10c      	bne.n	80029c8 <_ZN13ScreenDisplay17getUserLinearGainEv+0x84>
            endCount++;
 80029ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b0:	3301      	adds	r3, #1
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (endCount == 3) {
 80029b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d1e0      	bne.n	800297c <_ZN13ScreenDisplay17getUserLinearGainEv+0x38>
                buffer[index] = '\0';
 80029ba:	f107 0208 	add.w	r2, r7, #8
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	4413      	add	r3, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
                break;
 80029c6:	e010      	b.n	80029ea <_ZN13ScreenDisplay17getUserLinearGainEv+0xa6>
            }
        } else {
            if (index < sizeof(buffer) - 1) {
 80029c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ca:	2b1e      	cmp	r3, #30
 80029cc:	d808      	bhi.n	80029e0 <_ZN13ScreenDisplay17getUserLinearGainEv+0x9c>
                buffer[index++] = byte;
 80029ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80029d4:	3338      	adds	r3, #56	@ 0x38
 80029d6:	443b      	add	r3, r7
 80029d8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80029dc:	f803 2c30 	strb.w	r2, [r3, #-48]
            }
            endCount = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029e4:	e7ca      	b.n	800297c <_ZN13ScreenDisplay17getUserLinearGainEv+0x38>
            continue;
 80029e6:	bf00      	nop
        }
    }
 80029e8:	e7c8      	b.n	800297c <_ZN13ScreenDisplay17getUserLinearGainEv+0x38>

    return atof(buffer) / 100.0f;  // Conversion en float et mise à l'échelle
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	4618      	mov	r0, r3
 80029f0:	f008 fd53 	bl	800b49a <atof>
 80029f4:	ec51 0b10 	vmov	r0, r1, d0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <_ZN13ScreenDisplay17getUserLinearGainEv+0xe0>)
 80029fe:	f7fd ff25 	bl	800084c <__aeabi_ddiv>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4610      	mov	r0, r2
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f7fe f8ed 	bl	8000be8 <__aeabi_d2f>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	ee07 3a90 	vmov	s15, r3
}
 8002a14:	eeb0 0a67 	vmov.f32	s0, s15
 8002a18:	3738      	adds	r7, #56	@ 0x38
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	0800f964 	.word	0x0800f964
 8002a24:	40590000 	.word	0x40590000

08002a28 <_ZN13ScreenDisplay13showDutyCycleEf>:


void ScreenDisplay::showDutyCycle(float duty) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	ed87 0a00 	vstr	s0, [r7]
    // Convertir duty cycle en pourcentage
    float percent = duty * 100.0f;
 8002a34:	edd7 7a00 	vldr	s15, [r7]
 8002a38:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002a5c <_ZN13ScreenDisplay13showDutyCycleEf+0x34>
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	edc7 7a03 	vstr	s15, [r7, #12]

    // Affiche sur un champ texte appelé "duty"
    sendValue("duty", percent, "%.1f");
 8002a44:	4a06      	ldr	r2, [pc, #24]	@ (8002a60 <_ZN13ScreenDisplay13showDutyCycleEf+0x38>)
 8002a46:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a4a:	4906      	ldr	r1, [pc, #24]	@ (8002a64 <_ZN13ScreenDisplay13showDutyCycleEf+0x3c>)
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fca1 	bl	8002394 <_ZN13ScreenDisplay9sendValueEPKcfS1_>
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	42c80000 	.word	0x42c80000
 8002a60:	0800f830 	.word	0x0800f830
 8002a64:	0800f974 	.word	0x0800f974

08002a68 <_ZN13ScreenDisplay13showDirectionE13DirectionMode>:

void ScreenDisplay::showDirection(DirectionMode dir_show) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    sendText("dir_show", (dir_show == DirectionMode::REVERSE) ? "REVERSE" : "FORWARD");
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x14>
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x28>)
 8002a7a:	e000      	b.n	8002a7e <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x16>
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x2c>)
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4905      	ldr	r1, [pc, #20]	@ (8002a98 <_ZN13ScreenDisplay13showDirectionE13DirectionMode+0x30>)
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fc6a 	bl	800235c <_ZN13ScreenDisplay8sendTextEPKcS1_>
}
 8002a88:	bf00      	nop
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	0800f97c 	.word	0x0800f97c
 8002a94:	0800f984 	.word	0x0800f984
 8002a98:	0800f98c 	.word	0x0800f98c

08002a9c <_ZN13ScreenDisplay7getStopEv>:

bool ScreenDisplay::getStop() {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	@ 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    sendCommand("get stop.val");     // Demande la valeur du bouton "stop"
 8002aa4:	494a      	ldr	r1, [pc, #296]	@ (8002bd0 <_ZN13ScreenDisplay7getStopEv+0x134>)
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fc2e 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>

    const uint8_t RESPONSE_HEADER = 0x71;  // Header pour les valeurs numériques
 8002aac:	2371      	movs	r3, #113	@ 0x71
 8002aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t END_BYTE = 0xFF;
 8002ab2:	23ff      	movs	r3, #255	@ 0xff
 8002ab4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    const uint32_t TIMEOUT_MS = 100;  // Timeout de 100ms
 8002ab8:	2364      	movs	r3, #100	@ 0x64
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24

    uint8_t response[8] = {0};  // Buffer pour la réponse
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
    uint32_t startTime = HAL_GetTick();
 8002ac6:	f000 ff0b 	bl	80038e0 <HAL_GetTick>
 8002aca:	6238      	str	r0, [r7, #32]
    int index = 0;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
    bool headerFound = false;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    int endCount = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Boucle d'attente de réponse avec timeout
    while (HAL_GetTick() - startTime < TIMEOUT_MS) {
 8002ada:	e036      	b.n	8002b4a <_ZN13ScreenDisplay7getStopEv+0xae>
        if (!(USART2->SR & USART_SR_RXNE)) {
 8002adc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <_ZN13ScreenDisplay7getStopEv+0x138>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d128      	bne.n	8002b44 <_ZN13ScreenDisplay7getStopEv+0xa8>
            continue;  // Pas de données disponibles
        }

        uint8_t byte = static_cast<uint8_t>(USART2->DR & 0xFF);
 8002af2:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <_ZN13ScreenDisplay7getStopEv+0x138>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	77fb      	strb	r3, [r7, #31]

        if (!headerFound) {
 8002af8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002afc:	f083 0301 	eor.w	r3, r3, #1
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d006      	beq.n	8002b14 <_ZN13ScreenDisplay7getStopEv+0x78>
            if (byte == RESPONSE_HEADER) {
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	2b71      	cmp	r3, #113	@ 0x71
 8002b0a:	d11d      	bne.n	8002b48 <_ZN13ScreenDisplay7getStopEv+0xac>
                headerFound = true;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            }
            continue;
 8002b12:	e019      	b.n	8002b48 <_ZN13ScreenDisplay7getStopEv+0xac>
        }

        if (byte == END_BYTE) {
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	2bff      	cmp	r3, #255	@ 0xff
 8002b18:	d106      	bne.n	8002b28 <_ZN13ScreenDisplay7getStopEv+0x8c>
            endCount++;
 8002b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (endCount == 3) {
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d111      	bne.n	8002b4a <_ZN13ScreenDisplay7getStopEv+0xae>
                break;  // Fin de la réponse
 8002b26:	e01c      	b.n	8002b62 <_ZN13ScreenDisplay7getStopEv+0xc6>
            }
        } else {
            if (index < sizeof(response)) {
 8002b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2a:	2b07      	cmp	r3, #7
 8002b2c:	d807      	bhi.n	8002b3e <_ZN13ScreenDisplay7getStopEv+0xa2>
                response[index++] = byte;
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b34:	3338      	adds	r3, #56	@ 0x38
 8002b36:	443b      	add	r3, r7
 8002b38:	7ffa      	ldrb	r2, [r7, #31]
 8002b3a:	f803 2c2c 	strb.w	r2, [r3, #-44]
            }
            endCount = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b42:	e002      	b.n	8002b4a <_ZN13ScreenDisplay7getStopEv+0xae>
            continue;  // Pas de données disponibles
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <_ZN13ScreenDisplay7getStopEv+0xae>
            continue;
 8002b48:	bf00      	nop
    while (HAL_GetTick() - startTime < TIMEOUT_MS) {
 8002b4a:	f000 fec9 	bl	80038e0 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b63      	cmp	r3, #99	@ 0x63
 8002b56:	bf94      	ite	ls
 8002b58:	2301      	movls	r3, #1
 8002b5a:	2300      	movhi	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1bc      	bne.n	8002adc <_ZN13ScreenDisplay7getStopEv+0x40>
        }
    }

    // Si on a reçu une réponse valide
    if (headerFound && index >= 4) {
 8002b62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02b      	beq.n	8002bc2 <_ZN13ScreenDisplay7getStopEv+0x126>
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	dd28      	ble.n	8002bc2 <_ZN13ScreenDisplay7getStopEv+0x126>
        int32_t value = (response[0]) |
 8002b70:	7b3b      	ldrb	r3, [r7, #12]
 8002b72:	461a      	mov	r2, r3
                       (response[1] << 8) |
 8002b74:	7b7b      	ldrb	r3, [r7, #13]
 8002b76:	021b      	lsls	r3, r3, #8
        int32_t value = (response[0]) |
 8002b78:	431a      	orrs	r2, r3
                       (response[2] << 16) |
 8002b7a:	7bbb      	ldrb	r3, [r7, #14]
 8002b7c:	041b      	lsls	r3, r3, #16
                       (response[1] << 8) |
 8002b7e:	431a      	orrs	r2, r3
                       (response[3] << 24);
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	061b      	lsls	r3, r3, #24
        int32_t value = (response[0]) |
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]

        bool currentButtonState = (value == 1);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	bf0c      	ite	eq
 8002b8e:	2301      	moveq	r3, #1
 8002b90:	2300      	movne	r3, #0
 8002b92:	75fb      	strb	r3, [r7, #23]

        // Détection du front montant (appui sur le bouton)
        if (currentButtonState && !lastStopButtonState) {
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <_ZN13ScreenDisplay7getStopEv+0x11a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	795b      	ldrb	r3, [r3, #5]
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <_ZN13ScreenDisplay7getStopEv+0x11a>
            stopState = !stopState;  // Inverse l'état du stop
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	791b      	ldrb	r3, [r3, #4]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	711a      	strb	r2, [r3, #4]
        }

        lastStopButtonState = currentButtonState;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7dfa      	ldrb	r2, [r7, #23]
 8002bba:	715a      	strb	r2, [r3, #5]
        return stopState;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	791b      	ldrb	r3, [r3, #4]
 8002bc0:	e001      	b.n	8002bc6 <_ZN13ScreenDisplay7getStopEv+0x12a>
    }

    return stopState;  // En cas d'erreur, on garde l'état actuel
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	791b      	ldrb	r3, [r3, #4]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3738      	adds	r7, #56	@ 0x38
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	0800f998 	.word	0x0800f998
 8002bd4:	40004400 	.word	0x40004400

08002bd8 <_ZN13ScreenDisplay12getDirectionEv>:

//tester si ça marche
DirectionMode ScreenDisplay::getDirection() {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    sendCommand("get dir.val");     // dir
 8002be0:	4908      	ldr	r1, [pc, #32]	@ (8002c04 <_ZN13ScreenDisplay12getDirectionEv+0x2c>)
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fb90 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();    // Lecture 0 ou 1
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff fcd9 	bl	80025a0 <_ZN13ScreenDisplay9readInt32Ev>
 8002bee:	60f8      	str	r0, [r7, #12]
    return (value == 1) ? DirectionMode::REVERSE : DirectionMode::FORWARD;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <_ZN13ScreenDisplay12getDirectionEv+0x22>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <_ZN13ScreenDisplay12getDirectionEv+0x24>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	0800f9a8 	.word	0x0800f9a8

08002c08 <_ZN13ScreenDisplay11getRampRateEv>:

float ScreenDisplay::getRampRate()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    sendCommand("get ramp.val");
 8002c10:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <_ZN13ScreenDisplay11getRampRateEv+0x2c>)
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fb78 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();  // Lit la réponse binaire (format Nextion)
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fcc1 	bl	80025a0 <_ZN13ScreenDisplay9readInt32Ev>
 8002c1e:	60f8      	str	r0, [r7, #12]

    return static_cast<float>(value);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	0800f9b4 	.word	0x0800f9b4

08002c38 <_ZN13ScreenDisplay19getCalibrateRequestEv>:

bool ScreenDisplay::getCalibrateRequest() {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    sendCommand("get btn_calib.val");  // Lire l'état du bouton calibration btn_calib
 8002c40:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <_ZN13ScreenDisplay19getCalibrateRequestEv+0x2c>)
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fb60 	bl	8002308 <_ZN13ScreenDisplay11sendCommandEPKc>
    int32_t value = readInt32();
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff fca9 	bl	80025a0 <_ZN13ScreenDisplay9readInt32Ev>
 8002c4e:	60f8      	str	r0, [r7, #12]
    return (value == 1);  // 1 = pressé
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	0800f9c4 	.word	0x0800f9c4

08002c68 <StartTaskUpdateS>:
extern "C" void StartTaskLinearControl(void *argument);
/* USER CODE END FunctionPrototypes */

/* Function implementing the TaskUpdateS thread */
void StartTaskUpdateS(void *argument)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    motorController.updateScreen();  // Affiche les données à l'écran
 8002c70:	4803      	ldr	r0, [pc, #12]	@ (8002c80 <StartTaskUpdateS+0x18>)
 8002c72:	f7ff f9e9 	bl	8002048 <_ZN15MotorController12updateScreenEv>
    osDelay(1);                   // Rafraîchissement toutes les 100 ms
 8002c76:	2001      	movs	r0, #1
 8002c78:	f005 fe1a 	bl	80088b0 <osDelay>
    motorController.updateScreen();  // Affiche les données à l'écran
 8002c7c:	bf00      	nop
 8002c7e:	e7f7      	b.n	8002c70 <StartTaskUpdateS+0x8>
 8002c80:	20000344 	.word	0x20000344

08002c84 <StartTaskUpdatefromS>:
  }
}

void StartTaskUpdatefromS(void *argument)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        motorController.updateFromScreen();  // appel de la méthode
 8002c8c:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <StartTaskUpdatefromS+0x18>)
 8002c8e:	f7ff fa51 	bl	8002134 <_ZN15MotorController16updateFromScreenEv>
        osDelay(1);  // met à jour toutes les 20 ms pour une meilleure réactivité
 8002c92:	2001      	movs	r0, #1
 8002c94:	f005 fe0c 	bl	80088b0 <osDelay>
        motorController.updateFromScreen();  // appel de la méthode
 8002c98:	bf00      	nop
 8002c9a:	e7f7      	b.n	8002c8c <StartTaskUpdatefromS+0x8>
 8002c9c:	20000344 	.word	0x20000344

08002ca0 <StartTaskLinearControl>:
    }
}

void StartTaskLinearControl(void *argument)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  if (motorController.getControlMode() == ControlMode::LINEAR)
 8002ca8:	480c      	ldr	r0, [pc, #48]	@ (8002cdc <StartTaskLinearControl+0x3c>)
 8002caa:	f7fe fea4 	bl	80019f6 <_ZN15MotorController14getControlModeEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <StartTaskLinearControl+0x32>
	  {
		  float cadence = motorController.getCadence();
 8002cbe:	4807      	ldr	r0, [pc, #28]	@ (8002cdc <StartTaskLinearControl+0x3c>)
 8002cc0:	f7fe fefc 	bl	8001abc <_ZN15MotorController10getCadenceEv>
 8002cc4:	ed87 0a03 	vstr	s0, [r7, #12]
		  motorController.update(cadence);
 8002cc8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ccc:	4803      	ldr	r0, [pc, #12]	@ (8002cdc <StartTaskLinearControl+0x3c>)
 8002cce:	f7ff f857 	bl	8001d80 <_ZN15MotorController6updateEf>
	   }
    osDelay(1);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f005 fdec 	bl	80088b0 <osDelay>
  }
 8002cd8:	e7e6      	b.n	8002ca8 <StartTaskLinearControl+0x8>
 8002cda:	bf00      	nop
 8002cdc:	20000344 	.word	0x20000344

08002ce0 <_Z16MX_FREERTOS_Initv>:
/* USER CODE BEGIN Application */

/* USER CODE END Application */

/* FreeRTOS initialization function */
void MX_FREERTOS_Init(void) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0

  /* Create the thread(s) */


  /* USER CODE BEGIN RTOS_THREADS */
	TaskUpdateSHandle = osThreadNew(StartTaskUpdateS, NULL, &TaskUpdateS_attributes);
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8002d18 <_Z16MX_FREERTOS_Initv+0x38>)
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <_Z16MX_FREERTOS_Initv+0x3c>)
 8002cea:	f005 fd4f 	bl	800878c <osThreadNew>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d20 <_Z16MX_FREERTOS_Initv+0x40>)
 8002cf2:	6013      	str	r3, [r2, #0]
	TaskUpdateFromSHandle= osThreadNew(StartTaskUpdatefromS, NULL, &TaskUpdateFromS_attributes);
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8002d24 <_Z16MX_FREERTOS_Initv+0x44>)
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	480b      	ldr	r0, [pc, #44]	@ (8002d28 <_Z16MX_FREERTOS_Initv+0x48>)
 8002cfa:	f005 fd47 	bl	800878c <osThreadNew>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <_Z16MX_FREERTOS_Initv+0x4c>)
 8002d02:	6013      	str	r3, [r2, #0]
	LinearControlHandle = osThreadNew(StartTaskLinearControl, NULL, &LinearControl_attributes);
 8002d04:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <_Z16MX_FREERTOS_Initv+0x50>)
 8002d06:	2100      	movs	r1, #0
 8002d08:	480a      	ldr	r0, [pc, #40]	@ (8002d34 <_Z16MX_FREERTOS_Initv+0x54>)
 8002d0a:	f005 fd3f 	bl	800878c <osThreadNew>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <_Z16MX_FREERTOS_Initv+0x58>)
 8002d12:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* Create the queue(s) */
  /* USER CODE END RTOS_QUEUES */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	0800fa4c 	.word	0x0800fa4c
 8002d1c:	08002c69 	.word	0x08002c69
 8002d20:	200001fc 	.word	0x200001fc
 8002d24:	0800fa70 	.word	0x0800fa70
 8002d28:	08002c85 	.word	0x08002c85
 8002d2c:	20000200 	.word	0x20000200
 8002d30:	0800fa94 	.word	0x0800fa94
 8002d34:	08002ca1 	.word	0x08002ca1
 8002d38:	20000204 	.word	0x20000204

08002d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d40:	f000 fd98 	bl	8003874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d44:	f000 f812 	bl	8002d6c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d48:	f000 f950 	bl	8002fec <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8002d4c:	f000 f882 	bl	8002e54 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8002d50:	f000 f8b4 	bl	8002ebc <_ZL12MX_SPI1_Initv>
  MX_USART2_UART_Init();
 8002d54:	f000 f8ee 	bl	8002f34 <_ZL19MX_USART2_UART_Initv>
  MX_USART3_UART_Init();
 8002d58:	f000 f91a 	bl	8002f90 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002d5c:	f005 fccc 	bl	80086f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002d60:	f7ff ffbe 	bl	8002ce0 <_Z16MX_FREERTOS_Initv>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d64:	f005 fcec 	bl	8008740 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d68:	bf00      	nop
 8002d6a:	e7fd      	b.n	8002d68 <main+0x2c>

08002d6c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b094      	sub	sp, #80	@ 0x50
 8002d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d72:	f107 0320 	add.w	r3, r7, #32
 8002d76:	2230      	movs	r2, #48	@ 0x30
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f00a f807 	bl	800cd8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	4b2d      	ldr	r3, [pc, #180]	@ (8002e4c <_Z18SystemClock_Configv+0xe0>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	4a2c      	ldr	r2, [pc, #176]	@ (8002e4c <_Z18SystemClock_Configv+0xe0>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e4c <_Z18SystemClock_Configv+0xe0>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dac:	2300      	movs	r3, #0
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	4b27      	ldr	r3, [pc, #156]	@ (8002e50 <_Z18SystemClock_Configv+0xe4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a26      	ldr	r2, [pc, #152]	@ (8002e50 <_Z18SystemClock_Configv+0xe4>)
 8002db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <_Z18SystemClock_Configv+0xe4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ddc:	2308      	movs	r3, #8
 8002dde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002de0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002de4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002de6:	2302      	movs	r3, #2
 8002de8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002dea:	2307      	movs	r3, #7
 8002dec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dee:	f107 0320 	add.w	r3, r7, #32
 8002df2:	4618      	mov	r0, r3
 8002df4:	f002 ffb8 	bl	8005d68 <HAL_RCC_OscConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8002e08:	f000 fa20 	bl	800324c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e10:	2302      	movs	r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	2105      	movs	r1, #5
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 fa14 	bl	8006258 <HAL_RCC_ClockConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8002e40:	f000 fa04 	bl	800324c <Error_Handler>
  }
}
 8002e44:	bf00      	nop
 8002e46:	3750      	adds	r7, #80	@ 0x50
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40007000 	.word	0x40007000

08002e54 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e58:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e5a:	4a16      	ldr	r2, [pc, #88]	@ (8002eb4 <_ZL12MX_I2C1_Initv+0x60>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e5e:	4b14      	ldr	r3, [pc, #80]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e60:	4a15      	ldr	r2, [pc, #84]	@ (8002eb8 <_ZL12MX_I2C1_Initv+0x64>)
 8002e62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e64:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e78:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e8a:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e90:	4807      	ldr	r0, [pc, #28]	@ (8002eb0 <_ZL12MX_I2C1_Initv+0x5c>)
 8002e92:	f002 fe25 	bl	8005ae0 <HAL_I2C_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002ea6:	f000 f9d1 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000208 	.word	0x20000208
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	000186a0 	.word	0x000186a0

08002ebc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <_ZL12MX_SPI1_Initv+0x74>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ec6:	4b19      	ldr	r3, [pc, #100]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ec8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ecc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ece:	4b17      	ldr	r3, [pc, #92]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ed4:	4b15      	ldr	r3, [pc, #84]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eda:	4b14      	ldr	r3, [pc, #80]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ee6:	4b11      	ldr	r3, [pc, #68]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002eee:	4b0f      	ldr	r3, [pc, #60]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002efa:	4b0c      	ldr	r3, [pc, #48]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	4b0a      	ldr	r3, [pc, #40]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f06:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002f08:	220a      	movs	r2, #10
 8002f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f0c:	4807      	ldr	r0, [pc, #28]	@ (8002f2c <_ZL12MX_SPI1_Initv+0x70>)
 8002f0e:	f003 fbf5 	bl	80066fc <HAL_SPI_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8002f22:	f000 f993 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000025c 	.word	0x2000025c
 8002f30:	40013000 	.word	0x40013000

08002f34 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f38:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f3a:	4a14      	ldr	r2, [pc, #80]	@ (8002f8c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f3e:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f6a:	4807      	ldr	r0, [pc, #28]	@ (8002f88 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002f6c:	f003 fef0 	bl	8006d50 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	bf14      	ite	ne
 8002f76:	2301      	movne	r3, #1
 8002f78:	2300      	moveq	r3, #0
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002f80:	f000 f964 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200002b4 	.word	0x200002b4
 8002f8c:	40004400 	.word	0x40004400

08002f90 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f94:	4b13      	ldr	r3, [pc, #76]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f96:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fc6:	4807      	ldr	r0, [pc, #28]	@ (8002fe4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002fc8:	f003 fec2 	bl	8006d50 <HAL_UART_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002fdc:	f000 f936 	bl	800324c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fe0:	bf00      	nop
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	200002fc 	.word	0x200002fc
 8002fe8:	40004800 	.word	0x40004800

08002fec <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08c      	sub	sp, #48	@ 0x30
 8002ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff2:	f107 031c 	add.w	r3, r7, #28
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	4a81      	ldr	r2, [pc, #516]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 800300c:	f043 0310 	orr.w	r3, r3, #16
 8003010:	6313      	str	r3, [r2, #48]	@ 0x30
 8003012:	4b7f      	ldr	r3, [pc, #508]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	61bb      	str	r3, [r7, #24]
 800301c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	4b7b      	ldr	r3, [pc, #492]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003026:	4a7a      	ldr	r2, [pc, #488]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6313      	str	r3, [r2, #48]	@ 0x30
 800302e:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	4b74      	ldr	r3, [pc, #464]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	4a73      	ldr	r2, [pc, #460]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003048:	6313      	str	r3, [r2, #48]	@ 0x30
 800304a:	4b71      	ldr	r3, [pc, #452]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	4a6c      	ldr	r2, [pc, #432]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30
 8003066:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b66      	ldr	r3, [pc, #408]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a65      	ldr	r2, [pc, #404]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 800307c:	f043 0302 	orr.w	r3, r3, #2
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b63      	ldr	r3, [pc, #396]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	4b5f      	ldr	r3, [pc, #380]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a5e      	ldr	r2, [pc, #376]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b5c      	ldr	r3, [pc, #368]	@ (8003210 <_ZL12MX_GPIO_Initv+0x224>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80030aa:	2200      	movs	r2, #0
 80030ac:	2108      	movs	r1, #8
 80030ae:	4859      	ldr	r0, [pc, #356]	@ (8003214 <_ZL12MX_GPIO_Initv+0x228>)
 80030b0:	f000 ff56 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	2101      	movs	r1, #1
 80030b8:	4857      	ldr	r0, [pc, #348]	@ (8003218 <_ZL12MX_GPIO_Initv+0x22c>)
 80030ba:	f000 ff51 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80030be:	2200      	movs	r2, #0
 80030c0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80030c4:	4855      	ldr	r0, [pc, #340]	@ (800321c <_ZL12MX_GPIO_Initv+0x230>)
 80030c6:	f000 ff4b 	bl	8003f60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80030ca:	2308      	movs	r3, #8
 80030cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ce:	2301      	movs	r3, #1
 80030d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	484c      	ldr	r0, [pc, #304]	@ (8003214 <_ZL12MX_GPIO_Initv+0x228>)
 80030e2:	f000 fda1 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 031c 	add.w	r3, r7, #28
 80030fa:	4619      	mov	r1, r3
 80030fc:	4846      	ldr	r0, [pc, #280]	@ (8003218 <_ZL12MX_GPIO_Initv+0x22c>)
 80030fe:	f000 fd93 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003102:	2308      	movs	r3, #8
 8003104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003106:	2302      	movs	r3, #2
 8003108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310e:	2300      	movs	r3, #0
 8003110:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003112:	2305      	movs	r3, #5
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003116:	f107 031c 	add.w	r3, r7, #28
 800311a:	4619      	mov	r1, r3
 800311c:	483e      	ldr	r0, [pc, #248]	@ (8003218 <_ZL12MX_GPIO_Initv+0x22c>)
 800311e:	f000 fd83 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003122:	2301      	movs	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003126:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800312a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	483a      	ldr	r0, [pc, #232]	@ (8003220 <_ZL12MX_GPIO_Initv+0x234>)
 8003138:	f000 fd76 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800313c:	2310      	movs	r3, #16
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800314c:	2306      	movs	r3, #6
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	4619      	mov	r1, r3
 8003156:	4832      	ldr	r0, [pc, #200]	@ (8003220 <_ZL12MX_GPIO_Initv+0x234>)
 8003158:	f000 fd66 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800315c:	2304      	movs	r3, #4
 800315e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003168:	f107 031c 	add.w	r3, r7, #28
 800316c:	4619      	mov	r1, r3
 800316e:	482d      	ldr	r0, [pc, #180]	@ (8003224 <_ZL12MX_GPIO_Initv+0x238>)
 8003170:	f000 fd5a 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003186:	2305      	movs	r3, #5
 8003188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4619      	mov	r1, r3
 8003190:	4824      	ldr	r0, [pc, #144]	@ (8003224 <_ZL12MX_GPIO_Initv+0x238>)
 8003192:	f000 fd49 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003196:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800319a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800319c:	2301      	movs	r3, #1
 800319e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031a8:	f107 031c 	add.w	r3, r7, #28
 80031ac:	4619      	mov	r1, r3
 80031ae:	481b      	ldr	r0, [pc, #108]	@ (800321c <_ZL12MX_GPIO_Initv+0x230>)
 80031b0:	f000 fd3a 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin;
 80031b4:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 80031b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80031c6:	2306      	movs	r3, #6
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ca:	f107 031c 	add.w	r3, r7, #28
 80031ce:	4619      	mov	r1, r3
 80031d0:	4811      	ldr	r0, [pc, #68]	@ (8003218 <_ZL12MX_GPIO_Initv+0x22c>)
 80031d2:	f000 fd29 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80031d6:	2320      	movs	r3, #32
 80031d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031da:	2300      	movs	r3, #0
 80031dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80031e2:	f107 031c 	add.w	r3, r7, #28
 80031e6:	4619      	mov	r1, r3
 80031e8:	480c      	ldr	r0, [pc, #48]	@ (800321c <_ZL12MX_GPIO_Initv+0x230>)
 80031ea:	f000 fd1d 	bl	8003c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80031ee:	2302      	movs	r3, #2
 80031f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80031f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80031f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4804      	ldr	r0, [pc, #16]	@ (8003214 <_ZL12MX_GPIO_Initv+0x228>)
 8003204:	f000 fd10 	bl	8003c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003208:	bf00      	nop
 800320a:	3730      	adds	r7, #48	@ 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40023800 	.word	0x40023800
 8003214:	40021000 	.word	0x40021000
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40020000 	.word	0x40020000
 8003224:	40020400 	.word	0x40020400

08003228 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a04      	ldr	r2, [pc, #16]	@ (8003248 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800323a:	f000 fb3d 	bl	80038b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40001000 	.word	0x40001000

0800324c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003250:	b672      	cpsid	i
}
 8003252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <Error_Handler+0x8>

08003258 <_write>:
}
#endif /* USE_FULL_ASSERT */

extern "C" {

    int _write(int file, char *data, int len) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
        HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	b29a      	uxth	r2, r3
 8003268:	f04f 33ff 	mov.w	r3, #4294967295
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4804      	ldr	r0, [pc, #16]	@ (8003280 <_write+0x28>)
 8003270:	f003 fdbe 	bl	8006df0 <HAL_UART_Transmit>
        return len;
 8003274:	687b      	ldr	r3, [r7, #4]
    }
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200002b4 	.word	0x200002b4

08003284 <_close>:

    int _close(int file) { return -1; }
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <_fstat>:
    int _fstat(int file, void *st) { return 0; }
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <_isatty>:
    int _isatty(int file) { return 1; }
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	2301      	movs	r3, #1
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <_lseek>:
    int _lseek(int file, int ptr, int dir) { return 0; }
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	2300      	movs	r3, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_read>:
    int _read(int file, char *ptr, int len) { return 0; }
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	2300      	movs	r3, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <_kill>:
    int _kill(int pid, int sig) { return -1; }
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <_getpid>:
    int _getpid(void) { return 1; }
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
 800331c:	2301      	movs	r3, #1
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <_Z41__static_initialization_and_destruction_0v>:
}
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
MotorController motorController(&huart3, &huart2, 0.0044f);
 800332c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003340 <_Z41__static_initialization_and_destruction_0v+0x18>
 8003330:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8003332:	4905      	ldr	r1, [pc, #20]	@ (8003348 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8003334:	4805      	ldr	r0, [pc, #20]	@ (800334c <_Z41__static_initialization_and_destruction_0v+0x24>)
 8003336:	f7fe fa57 	bl	80017e8 <_ZN15MotorControllerC1EP20__UART_HandleTypeDefS1_f>
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	3b902de0 	.word	0x3b902de0
 8003344:	200002b4 	.word	0x200002b4
 8003348:	200002fc 	.word	0x200002fc
 800334c:	20000344 	.word	0x20000344

08003350 <_GLOBAL__sub_I_hi2c1>:
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
 8003354:	f7ff ffe8 	bl	8003328 <_Z41__static_initialization_and_destruction_0v>
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	4b12      	ldr	r3, [pc, #72]	@ (80033b0 <HAL_MspInit+0x54>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	4a11      	ldr	r2, [pc, #68]	@ (80033b0 <HAL_MspInit+0x54>)
 800336c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003370:	6453      	str	r3, [r2, #68]	@ 0x44
 8003372:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <HAL_MspInit+0x54>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <HAL_MspInit+0x54>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <HAL_MspInit+0x54>)
 8003388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800338c:	6413      	str	r3, [r2, #64]	@ 0x40
 800338e:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <HAL_MspInit+0x54>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	210f      	movs	r1, #15
 800339e:	f06f 0001 	mvn.w	r0, #1
 80033a2:	f000 fb85 	bl	8003ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800

080033b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b08a      	sub	sp, #40	@ 0x28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
 80033ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a19      	ldr	r2, [pc, #100]	@ (8003438 <HAL_I2C_MspInit+0x84>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d12c      	bne.n	8003430 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	4b18      	ldr	r3, [pc, #96]	@ (800343c <HAL_I2C_MspInit+0x88>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	4a17      	ldr	r2, [pc, #92]	@ (800343c <HAL_I2C_MspInit+0x88>)
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_I2C_MspInit+0x88>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	613b      	str	r3, [r7, #16]
 80033f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80033f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80033f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033f8:	2312      	movs	r3, #18
 80033fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fc:	2301      	movs	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003404:	2304      	movs	r3, #4
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	4619      	mov	r1, r3
 800340e:	480c      	ldr	r0, [pc, #48]	@ (8003440 <HAL_I2C_MspInit+0x8c>)
 8003410:	f000 fc0a 	bl	8003c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	4b08      	ldr	r3, [pc, #32]	@ (800343c <HAL_I2C_MspInit+0x88>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	4a07      	ldr	r2, [pc, #28]	@ (800343c <HAL_I2C_MspInit+0x88>)
 800341e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003422:	6413      	str	r3, [r2, #64]	@ 0x40
 8003424:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_I2C_MspInit+0x88>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003430:	bf00      	nop
 8003432:	3728      	adds	r7, #40	@ 0x28
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40005400 	.word	0x40005400
 800343c:	40023800 	.word	0x40023800
 8003440:	40020400 	.word	0x40020400

08003444 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <HAL_SPI_MspInit+0x84>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12b      	bne.n	80034be <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <HAL_SPI_MspInit+0x88>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	4a17      	ldr	r2, [pc, #92]	@ (80034cc <HAL_SPI_MspInit+0x88>)
 8003470:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003474:	6453      	str	r3, [r2, #68]	@ 0x44
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <HAL_SPI_MspInit+0x88>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_SPI_MspInit+0x88>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	4a10      	ldr	r2, [pc, #64]	@ (80034cc <HAL_SPI_MspInit+0x88>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	4b0e      	ldr	r3, [pc, #56]	@ (80034cc <HAL_SPI_MspInit+0x88>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800349e:	23e0      	movs	r3, #224	@ 0xe0
 80034a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	2302      	movs	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ae:	2305      	movs	r3, #5
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4619      	mov	r1, r3
 80034b8:	4805      	ldr	r0, [pc, #20]	@ (80034d0 <HAL_SPI_MspInit+0x8c>)
 80034ba:	f000 fbb5 	bl	8003c28 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80034be:	bf00      	nop
 80034c0:	3728      	adds	r7, #40	@ 0x28
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40013000 	.word	0x40013000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40020000 	.word	0x40020000

080034d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08c      	sub	sp, #48	@ 0x30
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 031c 	add.w	r3, r7, #28
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a46      	ldr	r2, [pc, #280]	@ (800360c <HAL_UART_MspInit+0x138>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d12c      	bne.n	8003550 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	4b45      	ldr	r3, [pc, #276]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	4a44      	ldr	r2, [pc, #272]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003504:	6413      	str	r3, [r2, #64]	@ 0x40
 8003506:	4b42      	ldr	r3, [pc, #264]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	61bb      	str	r3, [r7, #24]
 8003510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	4b3e      	ldr	r3, [pc, #248]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a3d      	ldr	r2, [pc, #244]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b3b      	ldr	r3, [pc, #236]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = Ecran_TX_Pin|Ecran_RX_Pin;
 800352e:	230c      	movs	r3, #12
 8003530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800353e:	2307      	movs	r3, #7
 8003540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003542:	f107 031c 	add.w	r3, r7, #28
 8003546:	4619      	mov	r1, r3
 8003548:	4832      	ldr	r0, [pc, #200]	@ (8003614 <HAL_UART_MspInit+0x140>)
 800354a:	f000 fb6d 	bl	8003c28 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800354e:	e058      	b.n	8003602 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a30      	ldr	r2, [pc, #192]	@ (8003618 <HAL_UART_MspInit+0x144>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d153      	bne.n	8003602 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	4b2c      	ldr	r3, [pc, #176]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b29      	ldr	r3, [pc, #164]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b25      	ldr	r3, [pc, #148]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357e:	4a24      	ldr	r2, [pc, #144]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003580:	f043 0302 	orr.w	r3, r3, #2
 8003584:	6313      	str	r3, [r2, #48]	@ 0x30
 8003586:	4b22      	ldr	r3, [pc, #136]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a1d      	ldr	r2, [pc, #116]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003610 <HAL_UART_MspInit+0x13c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Cntroller_RX_Pin;
 80035ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	2302      	movs	r3, #2
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035bc:	2303      	movs	r3, #3
 80035be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035c0:	2307      	movs	r3, #7
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Cntroller_RX_GPIO_Port, &GPIO_InitStruct);
 80035c4:	f107 031c 	add.w	r3, r7, #28
 80035c8:	4619      	mov	r1, r3
 80035ca:	4814      	ldr	r0, [pc, #80]	@ (800361c <HAL_UART_MspInit+0x148>)
 80035cc:	f000 fb2c 	bl	8003c28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Controller_TX_Pin;
 80035d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035e2:	2307      	movs	r3, #7
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Controller_TX_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 031c 	add.w	r3, r7, #28
 80035ea:	4619      	mov	r1, r3
 80035ec:	480c      	ldr	r0, [pc, #48]	@ (8003620 <HAL_UART_MspInit+0x14c>)
 80035ee:	f000 fb1b 	bl	8003c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80035f2:	2200      	movs	r2, #0
 80035f4:	2105      	movs	r1, #5
 80035f6:	2027      	movs	r0, #39	@ 0x27
 80035f8:	f000 fa5a 	bl	8003ab0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035fc:	2027      	movs	r0, #39	@ 0x27
 80035fe:	f000 fa73 	bl	8003ae8 <HAL_NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3730      	adds	r7, #48	@ 0x30
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40004400 	.word	0x40004400
 8003610:	40023800 	.word	0x40023800
 8003614:	40020000 	.word	0x40020000
 8003618:	40004800 	.word	0x40004800
 800361c:	40020400 	.word	0x40020400
 8003620:	40020c00 	.word	0x40020c00

08003624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	@ 0x38
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <HAL_InitTick+0xe4>)
 800363a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363c:	4a32      	ldr	r2, [pc, #200]	@ (8003708 <HAL_InitTick+0xe4>)
 800363e:	f043 0310 	orr.w	r3, r3, #16
 8003642:	6413      	str	r3, [r2, #64]	@ 0x40
 8003644:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <HAL_InitTick+0xe4>)
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003650:	f107 0210 	add.w	r2, r7, #16
 8003654:	f107 0314 	add.w	r3, r7, #20
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f003 f81c 	bl	8006698 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800366a:	f002 ffed 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 800366e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003670:	e004      	b.n	800367c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003672:	f002 ffe9 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8003676:	4603      	mov	r3, r0
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800367c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367e:	4a23      	ldr	r2, [pc, #140]	@ (800370c <HAL_InitTick+0xe8>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	3b01      	subs	r3, #1
 8003688:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800368a:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <HAL_InitTick+0xec>)
 800368c:	4a21      	ldr	r2, [pc, #132]	@ (8003714 <HAL_InitTick+0xf0>)
 800368e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003690:	4b1f      	ldr	r3, [pc, #124]	@ (8003710 <HAL_InitTick+0xec>)
 8003692:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003696:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003698:	4a1d      	ldr	r2, [pc, #116]	@ (8003710 <HAL_InitTick+0xec>)
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800369e:	4b1c      	ldr	r3, [pc, #112]	@ (8003710 <HAL_InitTick+0xec>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <HAL_InitTick+0xec>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_InitTick+0xec>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80036b0:	4817      	ldr	r0, [pc, #92]	@ (8003710 <HAL_InitTick+0xec>)
 80036b2:	f003 f8ac 	bl	800680e <HAL_TIM_Base_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80036bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11b      	bne.n	80036fc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80036c4:	4812      	ldr	r0, [pc, #72]	@ (8003710 <HAL_InitTick+0xec>)
 80036c6:	f003 f8fb 	bl	80068c0 <HAL_TIM_Base_Start_IT>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80036d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036d8:	2036      	movs	r0, #54	@ 0x36
 80036da:	f000 fa05 	bl	8003ae8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d808      	bhi.n	80036f6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036e4:	2200      	movs	r2, #0
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	2036      	movs	r0, #54	@ 0x36
 80036ea:	f000 f9e1 	bl	8003ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003718 <HAL_InitTick+0xf4>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	e002      	b.n	80036fc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003700:	4618      	mov	r0, r3
 8003702:	3738      	adds	r7, #56	@ 0x38
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40023800 	.word	0x40023800
 800370c:	431bde83 	.word	0x431bde83
 8003710:	20000394 	.word	0x20000394
 8003714:	40001000 	.word	0x40001000
 8003718:	20000004 	.word	0x20000004

0800371c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <NMI_Handler+0x4>

08003724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <HardFault_Handler+0x4>

0800372c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <MemManage_Handler+0x4>

08003734 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <BusFault_Handler+0x4>

0800373c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003740:	bf00      	nop
 8003742:	e7fd      	b.n	8003740 <UsageFault_Handler+0x4>

08003744 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003758:	4802      	ldr	r0, [pc, #8]	@ (8003764 <USART3_IRQHandler+0x10>)
 800375a:	f003 fc6b 	bl	8007034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200002fc 	.word	0x200002fc

08003768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <TIM6_DAC_IRQHandler+0x10>)
 800376e:	f003 f917 	bl	80069a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000394 	.word	0x20000394

0800377c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <OTG_FS_IRQHandler+0x10>)
 8003782:	f000 fc06 	bl	8003f92 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20004dcc 	.word	0x20004dcc

08003790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003798:	4a14      	ldr	r2, [pc, #80]	@ (80037ec <_sbrk+0x5c>)
 800379a:	4b15      	ldr	r3, [pc, #84]	@ (80037f0 <_sbrk+0x60>)
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a4:	4b13      	ldr	r3, [pc, #76]	@ (80037f4 <_sbrk+0x64>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d102      	bne.n	80037b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <_sbrk+0x64>)
 80037ae:	4a12      	ldr	r2, [pc, #72]	@ (80037f8 <_sbrk+0x68>)
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037b2:	4b10      	ldr	r3, [pc, #64]	@ (80037f4 <_sbrk+0x64>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d207      	bcs.n	80037d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c0:	f009 fbfc 	bl	800cfbc <__errno>
 80037c4:	4603      	mov	r3, r0
 80037c6:	220c      	movs	r2, #12
 80037c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	e009      	b.n	80037e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037d6:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	4a05      	ldr	r2, [pc, #20]	@ (80037f4 <_sbrk+0x64>)
 80037e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	2001c000 	.word	0x2001c000
 80037f0:	00000800 	.word	0x00000800
 80037f4:	200003dc 	.word	0x200003dc
 80037f8:	20005300 	.word	0x20005300

080037fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <SystemInit+0x20>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	4a05      	ldr	r2, [pc, #20]	@ (800381c <SystemInit+0x20>)
 8003808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800380c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003820:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003858 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003824:	f7ff ffea 	bl	80037fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003828:	480c      	ldr	r0, [pc, #48]	@ (800385c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800382a:	490d      	ldr	r1, [pc, #52]	@ (8003860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800382c:	4a0d      	ldr	r2, [pc, #52]	@ (8003864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003830:	e002      	b.n	8003838 <LoopCopyDataInit>

08003832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003836:	3304      	adds	r3, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800383c:	d3f9      	bcc.n	8003832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003840:	4c0a      	ldr	r4, [pc, #40]	@ (800386c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003844:	e001      	b.n	800384a <LoopFillZerobss>

08003846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003848:	3204      	adds	r2, #4

0800384a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800384c:	d3fb      	bcc.n	8003846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800384e:	f009 fbbb 	bl	800cfc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003852:	f7ff fa73 	bl	8002d3c <main>
  bx  lr    
 8003856:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003858:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800385c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003860:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003864:	0800ff10 	.word	0x0800ff10
  ldr r2, =_sbss
 8003868:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800386c:	200052fc 	.word	0x200052fc

08003870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC_IRQHandler>
	...

08003874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003878:	4b0e      	ldr	r3, [pc, #56]	@ (80038b4 <HAL_Init+0x40>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0d      	ldr	r2, [pc, #52]	@ (80038b4 <HAL_Init+0x40>)
 800387e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003884:	4b0b      	ldr	r3, [pc, #44]	@ (80038b4 <HAL_Init+0x40>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <HAL_Init+0x40>)
 800388a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800388e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003890:	4b08      	ldr	r3, [pc, #32]	@ (80038b4 <HAL_Init+0x40>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a07      	ldr	r2, [pc, #28]	@ (80038b4 <HAL_Init+0x40>)
 8003896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800389c:	2003      	movs	r0, #3
 800389e:	f000 f8fc 	bl	8003a9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038a2:	200f      	movs	r0, #15
 80038a4:	f7ff febe 	bl	8003624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a8:	f7ff fd58 	bl	800335c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023c00 	.word	0x40023c00

080038b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038bc:	4b06      	ldr	r3, [pc, #24]	@ (80038d8 <HAL_IncTick+0x20>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_IncTick+0x24>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	4a04      	ldr	r2, [pc, #16]	@ (80038dc <HAL_IncTick+0x24>)
 80038ca:	6013      	str	r3, [r2, #0]
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	20000008 	.word	0x20000008
 80038dc:	200003e0 	.word	0x200003e0

080038e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return uwTick;
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <HAL_GetTick+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	200003e0 	.word	0x200003e0

080038f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7ff ffee 	bl	80038e0 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d005      	beq.n	800391e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003912:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <HAL_Delay+0x44>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800391e:	bf00      	nop
 8003920:	f7ff ffde 	bl	80038e0 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d8f7      	bhi.n	8003920 <HAL_Delay+0x28>
  {
  }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000008 	.word	0x20000008

08003940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003950:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800395c:	4013      	ands	r3, r2
 800395e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800396c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003972:	4a04      	ldr	r2, [pc, #16]	@ (8003984 <__NVIC_SetPriorityGrouping+0x44>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	60d3      	str	r3, [r2, #12]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <__NVIC_GetPriorityGrouping+0x18>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	db0b      	blt.n	80039ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	f003 021f 	and.w	r2, r3, #31
 80039bc:	4907      	ldr	r1, [pc, #28]	@ (80039dc <__NVIC_EnableIRQ+0x38>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	2001      	movs	r0, #1
 80039c6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	e000e100 	.word	0xe000e100

080039e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	6039      	str	r1, [r7, #0]
 80039ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	db0a      	blt.n	8003a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	490c      	ldr	r1, [pc, #48]	@ (8003a2c <__NVIC_SetPriority+0x4c>)
 80039fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fe:	0112      	lsls	r2, r2, #4
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	440b      	add	r3, r1
 8003a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a08:	e00a      	b.n	8003a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4908      	ldr	r1, [pc, #32]	@ (8003a30 <__NVIC_SetPriority+0x50>)
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	3b04      	subs	r3, #4
 8003a18:	0112      	lsls	r2, r2, #4
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	761a      	strb	r2, [r3, #24]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e100 	.word	0xe000e100
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b089      	sub	sp, #36	@ 0x24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f1c3 0307 	rsb	r3, r3, #7
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	bf28      	it	cs
 8003a52:	2304      	movcs	r3, #4
 8003a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2b06      	cmp	r3, #6
 8003a5c:	d902      	bls.n	8003a64 <NVIC_EncodePriority+0x30>
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	3b03      	subs	r3, #3
 8003a62:	e000      	b.n	8003a66 <NVIC_EncodePriority+0x32>
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	401a      	ands	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa01 f303 	lsl.w	r3, r1, r3
 8003a86:	43d9      	mvns	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	4313      	orrs	r3, r2
         );
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3724      	adds	r7, #36	@ 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff ff4c 	bl	8003940 <__NVIC_SetPriorityGrouping>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac2:	f7ff ff61 	bl	8003988 <__NVIC_GetPriorityGrouping>
 8003ac6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	6978      	ldr	r0, [r7, #20]
 8003ace:	f7ff ffb1 	bl	8003a34 <NVIC_EncodePriority>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff80 	bl	80039e0 <__NVIC_SetPriority>
}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff ff54 	bl	80039a4 <__NVIC_EnableIRQ>
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b12:	f7ff fee5 	bl	80038e0 <HAL_GetTick>
 8003b16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d008      	beq.n	8003b36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e052      	b.n	8003bdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0216 	bic.w	r2, r2, #22
 8003b44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <HAL_DMA_Abort+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d007      	beq.n	8003b76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0208 	bic.w	r2, r2, #8
 8003b74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b86:	e013      	b.n	8003bb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b88:	f7ff feaa 	bl	80038e0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d90c      	bls.n	8003bb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2203      	movs	r2, #3
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e015      	b.n	8003bdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e4      	bne.n	8003b88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	223f      	movs	r2, #63	@ 0x3f
 8003bc4:	409a      	lsls	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2280      	movs	r2, #128	@ 0x80
 8003bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00c      	b.n	8003c1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2205      	movs	r2, #5
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b089      	sub	sp, #36	@ 0x24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	e16b      	b.n	8003f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c44:	2201      	movs	r2, #1
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f040 815a 	bne.w	8003f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d005      	beq.n	8003c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d130      	bne.n	8003cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	2203      	movs	r2, #3
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43db      	mvns	r3, r3
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 0201 	and.w	r2, r3, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d017      	beq.n	8003d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0303 	and.w	r3, r3, #3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d123      	bne.n	8003d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	08da      	lsrs	r2, r3, #3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	08da      	lsrs	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3208      	adds	r2, #8
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	2203      	movs	r2, #3
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0203 	and.w	r2, r3, #3
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 80b4 	beq.w	8003f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b60      	ldr	r3, [pc, #384]	@ (8003f34 <HAL_GPIO_Init+0x30c>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	4a5f      	ldr	r2, [pc, #380]	@ (8003f34 <HAL_GPIO_Init+0x30c>)
 8003db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003f34 <HAL_GPIO_Init+0x30c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dca:	4a5b      	ldr	r2, [pc, #364]	@ (8003f38 <HAL_GPIO_Init+0x310>)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	220f      	movs	r2, #15
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a52      	ldr	r2, [pc, #328]	@ (8003f3c <HAL_GPIO_Init+0x314>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02b      	beq.n	8003e4e <HAL_GPIO_Init+0x226>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a51      	ldr	r2, [pc, #324]	@ (8003f40 <HAL_GPIO_Init+0x318>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d025      	beq.n	8003e4a <HAL_GPIO_Init+0x222>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a50      	ldr	r2, [pc, #320]	@ (8003f44 <HAL_GPIO_Init+0x31c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <HAL_GPIO_Init+0x21e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4f      	ldr	r2, [pc, #316]	@ (8003f48 <HAL_GPIO_Init+0x320>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d019      	beq.n	8003e42 <HAL_GPIO_Init+0x21a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4e      	ldr	r2, [pc, #312]	@ (8003f4c <HAL_GPIO_Init+0x324>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_GPIO_Init+0x216>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4d      	ldr	r2, [pc, #308]	@ (8003f50 <HAL_GPIO_Init+0x328>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00d      	beq.n	8003e3a <HAL_GPIO_Init+0x212>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4c      	ldr	r2, [pc, #304]	@ (8003f54 <HAL_GPIO_Init+0x32c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <HAL_GPIO_Init+0x20e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4b      	ldr	r2, [pc, #300]	@ (8003f58 <HAL_GPIO_Init+0x330>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_GPIO_Init+0x20a>
 8003e2e:	2307      	movs	r3, #7
 8003e30:	e00e      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e32:	2308      	movs	r3, #8
 8003e34:	e00c      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e36:	2306      	movs	r3, #6
 8003e38:	e00a      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	e008      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	e006      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e42:	2303      	movs	r3, #3
 8003e44:	e004      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e002      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_GPIO_Init+0x228>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	f002 0203 	and.w	r2, r2, #3
 8003e56:	0092      	lsls	r2, r2, #2
 8003e58:	4093      	lsls	r3, r2
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e60:	4935      	ldr	r1, [pc, #212]	@ (8003f38 <HAL_GPIO_Init+0x310>)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	3302      	adds	r3, #2
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e92:	4a32      	ldr	r2, [pc, #200]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e98:	4b30      	ldr	r3, [pc, #192]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ebc:	4a27      	ldr	r2, [pc, #156]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ec2:	4b26      	ldr	r3, [pc, #152]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eec:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f10:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <HAL_GPIO_Init+0x334>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	f67f ae90 	bls.w	8003c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3724      	adds	r7, #36	@ 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	40020400 	.word	0x40020400
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020c00 	.word	0x40020c00
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40021400 	.word	0x40021400
 8003f54:	40021800 	.word	0x40021800
 8003f58:	40021c00 	.word	0x40021c00
 8003f5c:	40013c00 	.word	0x40013c00

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f7c:	e003      	b.n	8003f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	041a      	lsls	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	619a      	str	r2, [r3, #24]
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 f877 	bl	800809c <USB_GetMode>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 80fb 	bne.w	80041ac <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 f83a 	bl	8008034 <USB_ReadInterrupts>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80f1 	beq.w	80041aa <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f004 f831 	bl	8008034 <USB_ReadInterrupts>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fdc:	d104      	bne.n	8003fe8 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003fe6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f004 f821 	bl	8008034 <USB_ReadInterrupts>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffc:	d104      	bne.n	8004008 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004006:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f004 f811 	bl	8008034 <USB_ReadInterrupts>
 8004012:	4603      	mov	r3, r0
 8004014:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401c:	d104      	bne.n	8004028 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004026:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f004 f801 	bl	8008034 <USB_ReadInterrupts>
 8004032:	4603      	mov	r3, r0
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d103      	bne.n	8004044 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2202      	movs	r2, #2
 8004042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4618      	mov	r0, r3
 800404a:	f003 fff3 	bl	8008034 <USB_ReadInterrupts>
 800404e:	4603      	mov	r3, r0
 8004050:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004058:	d120      	bne.n	800409c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004062:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b00      	cmp	r3, #0
 8004072:	d113      	bne.n	800409c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004074:	2110      	movs	r1, #16
 8004076:	6938      	ldr	r0, [r7, #16]
 8004078:	f003 ff24 	bl	8007ec4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800407c:	6938      	ldr	r0, [r7, #16]
 800407e:	f003 ff53 	bl	8007f28 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	7a5b      	ldrb	r3, [r3, #9]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d105      	bne.n	8004096 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f004 f811 	bl	80080b8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f007 f95a 	bl	800b350 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 ffc7 	bl	8008034 <USB_ReadInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040b0:	d102      	bne.n	80040b8 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f001 fca1 	bl	80059fa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 ffb9 	bl	8008034 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d106      	bne.n	80040da <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f007 f923 	bl	800b318 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 ffa8 	bl	8008034 <USB_ReadInterrupts>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ee:	d139      	bne.n	8004164 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 f81c 	bl	8008132 <USB_HC_ReadInterrupt>
 80040fa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e025      	b.n	800414e <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412c:	d106      	bne.n	800413c <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f859 	bl	80041ec <HCD_HC_IN_IRQHandler>
 800413a:	e005      	b.n	8004148 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 febb 	bl	8004ebe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3301      	adds	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	795b      	ldrb	r3, [r3, #5]
 8004152:	461a      	mov	r2, r3
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4293      	cmp	r3, r2
 8004158:	d3d3      	bcc.n	8004102 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f003 ff63 	bl	8008034 <USB_ReadInterrupts>
 800416e:	4603      	mov	r3, r0
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d101      	bne.n	800417c <HAL_HCD_IRQHandler+0x1ea>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_HCD_IRQHandler+0x1ec>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d014      	beq.n	80041ac <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699a      	ldr	r2, [r3, #24]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0210 	bic.w	r2, r2, #16
 8004190:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f001 fb52 	bl	800583c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0210 	orr.w	r2, r2, #16
 80041a6:	619a      	str	r2, [r3, #24]
 80041a8:	e000      	b.n	80041ac <HAL_HCD_IRQHandler+0x21a>
      return;
 80041aa:	bf00      	nop
    }
  }
}
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b082      	sub	sp, #8
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d101      	bne.n	80041c8 <HAL_HCD_Stop+0x16>
 80041c4:	2302      	movs	r3, #2
 80041c6:	e00d      	b.n	80041e4 <HAL_HCD_Stop+0x32>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f004 f8dd 	bl	8008394 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	78fa      	ldrb	r2, [r7, #3]
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f003 ff25 	bl	800805a <USB_ReadChInterrupts>
 8004210:	4603      	mov	r3, r0
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d11a      	bne.n	8004250 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004226:	461a      	mov	r2, r3
 8004228:	2304      	movs	r3, #4
 800422a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	334d      	adds	r3, #77	@ 0x4d
 800423c:	2207      	movs	r2, #7
 800423e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	4611      	mov	r1, r2
 8004248:	4618      	mov	r0, r3
 800424a:	f003 ff83 	bl	8008154 <USB_HC_Halt>
 800424e:	e09e      	b.n	800438e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f003 fefe 	bl	800805a <USB_ReadChInterrupts>
 800425e:	4603      	mov	r3, r0
 8004260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004268:	d11b      	bne.n	80042a2 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004276:	461a      	mov	r2, r3
 8004278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800427c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	334d      	adds	r3, #77	@ 0x4d
 800428e:	2208      	movs	r2, #8
 8004290:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f003 ff5a 	bl	8008154 <USB_HC_Halt>
 80042a0:	e075      	b.n	800438e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f003 fed5 	bl	800805a <USB_ReadChInterrupts>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d11a      	bne.n	80042f0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80042ba:	78fb      	ldrb	r3, [r7, #3]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2308      	movs	r3, #8
 80042ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	334d      	adds	r3, #77	@ 0x4d
 80042dc:	2206      	movs	r2, #6
 80042de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 ff33 	bl	8008154 <USB_HC_Halt>
 80042ee:	e04e      	b.n	800438e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f003 feae 	bl	800805a <USB_ReadChInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004308:	d11b      	bne.n	8004342 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004316:	461a      	mov	r2, r3
 8004318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800431c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334d      	adds	r3, #77	@ 0x4d
 800432e:	2209      	movs	r2, #9
 8004330:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f003 ff0a 	bl	8008154 <USB_HC_Halt>
 8004340:	e025      	b.n	800438e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f003 fe85 	bl	800805a <USB_ReadChInterrupts>
 8004350:	4603      	mov	r3, r0
 8004352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004356:	2b80      	cmp	r3, #128	@ 0x80
 8004358:	d119      	bne.n	800438e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	2380      	movs	r3, #128	@ 0x80
 800436a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334d      	adds	r3, #77	@ 0x4d
 800437c:	2207      	movs	r2, #7
 800437e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f003 fee3 	bl	8008154 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f003 fe5f 	bl	800805a <USB_ReadChInterrupts>
 800439c:	4603      	mov	r3, r0
 800439e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a6:	d112      	bne.n	80043ce <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f003 fecf 	bl	8008154 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c2:	461a      	mov	r2, r3
 80043c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043c8:	6093      	str	r3, [r2, #8]
 80043ca:	f000 bd75 	b.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 fe3f 	bl	800805a <USB_ReadChInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	f040 8128 	bne.w	8004638 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f4:	461a      	mov	r2, r3
 80043f6:	2320      	movs	r3, #32
 80043f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	331b      	adds	r3, #27
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d119      	bne.n	8004444 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	331b      	adds	r3, #27
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	440a      	add	r2, r1
 800443a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800443e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004442:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	799b      	ldrb	r3, [r3, #6]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01b      	beq.n	8004484 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	3330      	adds	r3, #48	@ 0x30
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	1ac9      	subs	r1, r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4403      	add	r3, r0
 8004480:	3338      	adds	r3, #56	@ 0x38
 8004482:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004484:	78fa      	ldrb	r2, [r7, #3]
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	334d      	adds	r3, #77	@ 0x4d
 8004494:	2201      	movs	r2, #1
 8004496:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3344      	adds	r3, #68	@ 0x44
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b8:	461a      	mov	r2, r3
 80044ba:	2301      	movs	r3, #1
 80044bc:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	3326      	adds	r3, #38	@ 0x26
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044d4:	78fa      	ldrb	r2, [r7, #3]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	1a9b      	subs	r3, r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	3326      	adds	r3, #38	@ 0x26
 80044e4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d110      	bne.n	800450c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	78fa      	ldrb	r2, [r7, #3]
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f003 fe2e 	bl	8008154 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004504:	461a      	mov	r2, r3
 8004506:	2310      	movs	r3, #16
 8004508:	6093      	str	r3, [r2, #8]
 800450a:	e03d      	b.n	8004588 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	3326      	adds	r3, #38	@ 0x26
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b03      	cmp	r3, #3
 8004520:	d00a      	beq.n	8004538 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	3326      	adds	r3, #38	@ 0x26
 8004532:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004534:	2b01      	cmp	r3, #1
 8004536:	d127      	bne.n	8004588 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	0151      	lsls	r1, r2, #5
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	440a      	add	r2, r1
 800454e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004552:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004556:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	334c      	adds	r3, #76	@ 0x4c
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	334c      	adds	r3, #76	@ 0x4c
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f006 fef2 	bl	800b36c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	799b      	ldrb	r3, [r3, #6]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d13b      	bne.n	8004608 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004590:	78fa      	ldrb	r2, [r7, #3]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3338      	adds	r3, #56	@ 0x38
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	78fa      	ldrb	r2, [r7, #3]
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4403      	add	r3, r0
 80045b0:	3328      	adds	r3, #40	@ 0x28
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	440b      	add	r3, r1
 80045b6:	1e59      	subs	r1, r3, #1
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4403      	add	r3, r0
 80045c6:	3328      	adds	r3, #40	@ 0x28
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8470 	beq.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	333c      	adds	r3, #60	@ 0x3c
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	f083 0301 	eor.w	r3, r3, #1
 80045f0:	b2d8      	uxtb	r0, r3
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	333c      	adds	r3, #60	@ 0x3c
 8004600:	4602      	mov	r2, r0
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	f000 bc58 	b.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004608:	78fa      	ldrb	r2, [r7, #3]
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	333c      	adds	r3, #60	@ 0x3c
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	f083 0301 	eor.w	r3, r3, #1
 8004620:	b2d8      	uxtb	r0, r3
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	333c      	adds	r3, #60	@ 0x3c
 8004630:	4602      	mov	r2, r0
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	f000 bc40 	b.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f003 fd0a 	bl	800805a <USB_ReadChInterrupts>
 8004646:	4603      	mov	r3, r0
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d131      	bne.n	80046b4 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465c:	461a      	mov	r2, r3
 800465e:	2320      	movs	r3, #32
 8004660:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	331a      	adds	r3, #26
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	f040 841f 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	331b      	adds	r3, #27
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	334d      	adds	r3, #77	@ 0x4d
 800469e:	2203      	movs	r2, #3
 80046a0:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	4611      	mov	r1, r2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f003 fd52 	bl	8008154 <USB_HC_Halt>
 80046b0:	f000 bc02 	b.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f003 fccc 	bl	800805a <USB_ReadChInterrupts>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	f040 8305 	bne.w	8004cd8 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046da:	461a      	mov	r2, r3
 80046dc:	2302      	movs	r3, #2
 80046de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	334d      	adds	r3, #77	@ 0x4d
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d114      	bne.n	8004720 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f6:	78fa      	ldrb	r2, [r7, #3]
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	4613      	mov	r3, r2
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	440b      	add	r3, r1
 8004704:	334d      	adds	r3, #77	@ 0x4d
 8004706:	2202      	movs	r2, #2
 8004708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	334c      	adds	r3, #76	@ 0x4c
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e2cc      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334d      	adds	r3, #77	@ 0x4d
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d114      	bne.n	8004760 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334d      	adds	r3, #77	@ 0x4d
 8004746:	2202      	movs	r2, #2
 8004748:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	334c      	adds	r3, #76	@ 0x4c
 800475a:	2205      	movs	r2, #5
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	e2ac      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	334d      	adds	r3, #77	@ 0x4d
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b07      	cmp	r3, #7
 8004774:	d00b      	beq.n	800478e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	334d      	adds	r3, #77	@ 0x4d
 8004786:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004788:	2b09      	cmp	r3, #9
 800478a:	f040 80a6 	bne.w	80048da <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	334d      	adds	r3, #77	@ 0x4d
 800479e:	2202      	movs	r2, #2
 80047a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3344      	adds	r3, #68	@ 0x44
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	1c59      	adds	r1, r3, #1
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4403      	add	r3, r0
 80047c2:	3344      	adds	r3, #68	@ 0x44
 80047c4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3344      	adds	r3, #68	@ 0x44
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d943      	bls.n	8004864 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3344      	adds	r3, #68	@ 0x44
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80047f0:	78fa      	ldrb	r2, [r7, #3]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	331a      	adds	r3, #26
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d123      	bne.n	800484e <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	331b      	adds	r3, #27
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	331c      	adds	r3, #28
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	440a      	add	r2, r1
 8004844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484c:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800484e:	78fa      	ldrb	r2, [r7, #3]
 8004850:	6879      	ldr	r1, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	1a9b      	subs	r3, r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	334c      	adds	r3, #76	@ 0x4c
 800485e:	2204      	movs	r2, #4
 8004860:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004862:	e229      	b.n	8004cb8 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	334c      	adds	r3, #76	@ 0x4c
 8004874:	2202      	movs	r2, #2
 8004876:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3326      	adds	r3, #38	@ 0x26
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	3326      	adds	r3, #38	@ 0x26
 800489e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	f040 8209 	bne.w	8004cb8 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048bc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048c4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048d8:	e1ee      	b.n	8004cb8 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	334d      	adds	r3, #77	@ 0x4d
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	f040 80c8 	bne.w	8004a82 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	334d      	adds	r3, #77	@ 0x4d
 8004902:	2202      	movs	r2, #2
 8004904:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	331b      	adds	r3, #27
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	f040 81ce 	bne.w	8004cba <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	3326      	adds	r3, #38	@ 0x26
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d16b      	bne.n	8004a0c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	3348      	adds	r3, #72	@ 0x48
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4403      	add	r3, r0
 8004954:	3348      	adds	r3, #72	@ 0x48
 8004956:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004958:	78fa      	ldrb	r2, [r7, #3]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	3348      	adds	r3, #72	@ 0x48
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d943      	bls.n	80049f6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3348      	adds	r3, #72	@ 0x48
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	331b      	adds	r3, #27
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	3344      	adds	r3, #68	@ 0x44
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d809      	bhi.n	80049c0 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	331c      	adds	r3, #28
 80049bc:	2201      	movs	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	0151      	lsls	r1, r2, #5
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	440a      	add	r2, r1
 80049d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049de:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80049e0:	78fa      	ldrb	r2, [r7, #3]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	1a9b      	subs	r3, r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	334c      	adds	r3, #76	@ 0x4c
 80049f0:	2204      	movs	r2, #4
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	e014      	b.n	8004a20 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	334c      	adds	r3, #76	@ 0x4c
 8004a06:	2202      	movs	r2, #2
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e009      	b.n	8004a20 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	334c      	adds	r3, #76	@ 0x4c
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a20:	78fa      	ldrb	r2, [r7, #3]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3326      	adds	r3, #38	@ 0x26
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a36:	78fa      	ldrb	r2, [r7, #3]
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	1a9b      	subs	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	3326      	adds	r3, #38	@ 0x26
 8004a46:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f040 8136 	bne.w	8004cba <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a64:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a6c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e11b      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	334d      	adds	r3, #77	@ 0x4d
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	f040 8081 	bne.w	8004b9c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	334d      	adds	r3, #77	@ 0x4d
 8004aaa:	2202      	movs	r2, #2
 8004aac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	331b      	adds	r3, #27
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	f040 80fa 	bne.w	8004cba <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	334c      	adds	r3, #76	@ 0x4c
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004af8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	78fa      	ldrb	r2, [r7, #3]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b18:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b34:	f023 0320 	bic.w	r3, r3, #32
 8004b38:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b3a:	78fa      	ldrb	r2, [r7, #3]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	3326      	adds	r3, #38	@ 0x26
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00b      	beq.n	8004b68 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	3326      	adds	r3, #38	@ 0x26
 8004b60:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	f040 80a9 	bne.w	8004cba <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b7e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b86:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b94:	461a      	mov	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e08e      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	334d      	adds	r3, #77	@ 0x4d
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d143      	bne.n	8004c3a <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	334d      	adds	r3, #77	@ 0x4d
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	334c      	adds	r3, #76	@ 0x4c
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3326      	adds	r3, #38	@ 0x26
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	3326      	adds	r3, #38	@ 0x26
 8004c00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d159      	bne.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c06:	78fb      	ldrb	r3, [r7, #3]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c1c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c24:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c32:	461a      	mov	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	e03f      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	334d      	adds	r3, #77	@ 0x4d
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d126      	bne.n	8004c9e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	334d      	adds	r3, #77	@ 0x4d
 8004c60:	2202      	movs	r2, #2
 8004c62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	3344      	adds	r3, #68	@ 0x44
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	1a9b      	subs	r3, r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4403      	add	r3, r0
 8004c84:	3344      	adds	r3, #68	@ 0x44
 8004c86:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	334c      	adds	r3, #76	@ 0x4c
 8004c98:	2204      	movs	r2, #4
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e00d      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	334d      	adds	r3, #77	@ 0x4d
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	f000 8100 	beq.w	8004eb6 <HCD_HC_IN_IRQHandler+0xcca>
 8004cb6:	e000      	b.n	8004cba <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cb8:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	011b      	lsls	r3, r3, #4
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	334c      	adds	r3, #76	@ 0x4c
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f006 fb4b 	bl	800b36c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cd6:	e0ef      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f003 f9ba 	bl	800805a <USB_ReadChInterrupts>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cec:	2b40      	cmp	r3, #64	@ 0x40
 8004cee:	d12f      	bne.n	8004d50 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2340      	movs	r3, #64	@ 0x40
 8004d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004d02:	78fa      	ldrb	r2, [r7, #3]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	334d      	adds	r3, #77	@ 0x4d
 8004d12:	2205      	movs	r2, #5
 8004d14:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	331a      	adds	r3, #26
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	4613      	mov	r3, r2
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	440b      	add	r3, r1
 8004d3a:	3344      	adds	r3, #68	@ 0x44
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f003 fa03 	bl	8008154 <USB_HC_Halt>
 8004d4e:	e0b3      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f003 f97e 	bl	800805a <USB_ReadChInterrupts>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f003 0310 	and.w	r3, r3, #16
 8004d64:	2b10      	cmp	r3, #16
 8004d66:	f040 80a7 	bne.w	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3326      	adds	r3, #38	@ 0x26
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d11b      	bne.n	8004db8 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3344      	adds	r3, #68	@ 0x44
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	6879      	ldr	r1, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	334d      	adds	r3, #77	@ 0x4d
 8004da4:	2204      	movs	r2, #4
 8004da6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	4611      	mov	r1, r2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f003 f9cf 	bl	8008154 <USB_HC_Halt>
 8004db6:	e03f      	b.n	8004e38 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	6879      	ldr	r1, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	3326      	adds	r3, #38	@ 0x26
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3326      	adds	r3, #38	@ 0x26
 8004dde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d129      	bne.n	8004e38 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3344      	adds	r3, #68	@ 0x44
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	799b      	ldrb	r3, [r3, #6]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HCD_HC_IN_IRQHandler+0xc2a>
 8004e00:	78fa      	ldrb	r2, [r7, #3]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	1a9b      	subs	r3, r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	331b      	adds	r3, #27
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d110      	bne.n	8004e38 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	011b      	lsls	r3, r3, #4
 8004e1e:	1a9b      	subs	r3, r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	334d      	adds	r3, #77	@ 0x4d
 8004e26:	2204      	movs	r2, #4
 8004e28:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f003 f98e 	bl	8008154 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	331b      	adds	r3, #27
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d129      	bne.n	8004ea2 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	331b      	adds	r3, #27
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e80:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	0151      	lsls	r1, r2, #5
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	440a      	add	r2, r1
 8004e98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e9c:	f043 0320 	orr.w	r3, r3, #32
 8004ea0:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	6093      	str	r3, [r2, #8]
 8004eb4:	e000      	b.n	8004eb8 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004eb6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004eb8:	3718      	adds	r7, #24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	78fa      	ldrb	r2, [r7, #3]
 8004eda:	4611      	mov	r1, r2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f003 f8bc 	bl	800805a <USB_ReadChInterrupts>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d11b      	bne.n	8004f24 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2304      	movs	r3, #4
 8004efc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004efe:	78fa      	ldrb	r2, [r7, #3]
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	4613      	mov	r3, r2
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	1a9b      	subs	r3, r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	440b      	add	r3, r1
 8004f0c:	334d      	adds	r3, #77	@ 0x4d
 8004f0e:	2207      	movs	r2, #7
 8004f10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f003 f91a 	bl	8008154 <USB_HC_Halt>
 8004f20:	f000 bc89 	b.w	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f003 f894 	bl	800805a <USB_ReadChInterrupts>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	f040 8082 	bne.w	8005042 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004f3e:	78fb      	ldrb	r3, [r7, #3]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3319      	adds	r3, #25
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d124      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3319      	adds	r3, #25
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	334c      	adds	r3, #76	@ 0x4c
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004f8e:	78fa      	ldrb	r2, [r7, #3]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	1a9b      	subs	r3, r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	334d      	adds	r3, #77	@ 0x4d
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f003 f8d2 	bl	8008154 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	331a      	adds	r3, #26
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	f040 8437 	bne.w	8005836 <HCD_HC_OUT_IRQHandler+0x978>
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	331b      	adds	r3, #27
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f040 842b 	bne.w	8005836 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	3326      	adds	r3, #38	@ 0x26
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d009      	beq.n	800500a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	331b      	adds	r3, #27
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	334d      	adds	r3, #77	@ 0x4d
 800501a:	2203      	movs	r2, #3
 800501c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f003 f894 	bl	8008154 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	3344      	adds	r3, #68	@ 0x44
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e3f9      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f003 f805 	bl	800805a <USB_ReadChInterrupts>
 8005050:	4603      	mov	r3, r0
 8005052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800505a:	d111      	bne.n	8005080 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800505c:	78fb      	ldrb	r3, [r7, #3]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005068:	461a      	mov	r2, r3
 800506a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800506e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f003 f86b 	bl	8008154 <USB_HC_Halt>
 800507e:	e3da      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f002 ffe6 	bl	800805a <USB_ReadChInterrupts>
 800508e:	4603      	mov	r3, r0
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d168      	bne.n	800516a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3344      	adds	r3, #68	@ 0x44
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f002 ffd0 	bl	800805a <USB_ReadChInterrupts>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	d112      	bne.n	80050ea <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3319      	adds	r3, #25
 80050d4:	2201      	movs	r2, #1
 80050d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e4:	461a      	mov	r2, r3
 80050e6:	2340      	movs	r3, #64	@ 0x40
 80050e8:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80050ea:	78fa      	ldrb	r2, [r7, #3]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	1a9b      	subs	r3, r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	331b      	adds	r3, #27
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d019      	beq.n	8005134 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005100:	78fa      	ldrb	r2, [r7, #3]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	331b      	adds	r3, #27
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4413      	add	r3, r2
 800511c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	440a      	add	r2, r1
 800512a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800512e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005132:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005140:	461a      	mov	r2, r3
 8005142:	2301      	movs	r3, #1
 8005144:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	334d      	adds	r3, #77	@ 0x4d
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f002 fff6 	bl	8008154 <USB_HC_Halt>
 8005168:	e365      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	78fa      	ldrb	r2, [r7, #3]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f002 ff71 	bl	800805a <USB_ReadChInterrupts>
 8005178:	4603      	mov	r3, r0
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b40      	cmp	r3, #64	@ 0x40
 8005180:	d139      	bne.n	80051f6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	334d      	adds	r3, #77	@ 0x4d
 8005192:	2205      	movs	r2, #5
 8005194:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	331a      	adds	r3, #26
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	3319      	adds	r3, #25
 80051bc:	2201      	movs	r2, #1
 80051be:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3344      	adds	r3, #68	@ 0x44
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 ffb9 	bl	8008154 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ee:	461a      	mov	r2, r3
 80051f0:	2340      	movs	r3, #64	@ 0x40
 80051f2:	6093      	str	r3, [r2, #8]
 80051f4:	e31f      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 ff2b 	bl	800805a <USB_ReadChInterrupts>
 8005204:	4603      	mov	r3, r0
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b08      	cmp	r3, #8
 800520c:	d11a      	bne.n	8005244 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	2308      	movs	r3, #8
 800521e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	334d      	adds	r3, #77	@ 0x4d
 8005230:	2206      	movs	r2, #6
 8005232:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f002 ff89 	bl	8008154 <USB_HC_Halt>
 8005242:	e2f8      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f002 ff04 	bl	800805a <USB_ReadChInterrupts>
 8005252:	4603      	mov	r3, r0
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d144      	bne.n	80052e6 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	3344      	adds	r3, #68	@ 0x44
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	334d      	adds	r3, #77	@ 0x4d
 8005280:	2204      	movs	r2, #4
 8005282:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3319      	adds	r3, #25
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d114      	bne.n	80052c4 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800529a:	78fa      	ldrb	r2, [r7, #3]
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3318      	adds	r3, #24
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3319      	adds	r3, #25
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f002 ff41 	bl	8008154 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052de:	461a      	mov	r2, r3
 80052e0:	2310      	movs	r3, #16
 80052e2:	6093      	str	r3, [r2, #8]
 80052e4:	e2a7      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f002 feb3 	bl	800805a <USB_ReadChInterrupts>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fa:	2b80      	cmp	r3, #128	@ 0x80
 80052fc:	f040 8083 	bne.w	8005406 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	799b      	ldrb	r3, [r3, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d111      	bne.n	800532c <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	334d      	adds	r3, #77	@ 0x4d
 8005318:	2207      	movs	r2, #7
 800531a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f002 ff15 	bl	8008154 <USB_HC_Halt>
 800532a:	e062      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800532c:	78fa      	ldrb	r2, [r7, #3]
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	011b      	lsls	r3, r3, #4
 8005334:	1a9b      	subs	r3, r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3344      	adds	r3, #68	@ 0x44
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4403      	add	r3, r0
 800534c:	3344      	adds	r3, #68	@ 0x44
 800534e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005350:	78fa      	ldrb	r2, [r7, #3]
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	4613      	mov	r3, r2
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	3344      	adds	r3, #68	@ 0x44
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d922      	bls.n	80053ac <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005366:	78fa      	ldrb	r2, [r7, #3]
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a9b      	subs	r3, r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3344      	adds	r3, #68	@ 0x44
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	4613      	mov	r3, r2
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	440b      	add	r3, r1
 8005388:	334c      	adds	r3, #76	@ 0x4c
 800538a:	2204      	movs	r2, #4
 800538c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800538e:	78fa      	ldrb	r2, [r7, #3]
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	334c      	adds	r3, #76	@ 0x4c
 800539e:	781a      	ldrb	r2, [r3, #0]
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	4619      	mov	r1, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f005 ffe1 	bl	800b36c <HAL_HCD_HC_NotifyURBChange_Callback>
 80053aa:	e022      	b.n	80053f2 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	334c      	adds	r3, #76	@ 0x4c
 80053bc:	2202      	movs	r2, #2
 80053be:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053ec:	461a      	mov	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053fe:	461a      	mov	r2, r3
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	6093      	str	r3, [r2, #8]
 8005404:	e217      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f002 fe23 	bl	800805a <USB_ReadChInterrupts>
 8005414:	4603      	mov	r3, r0
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800541e:	d11b      	bne.n	8005458 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005420:	78fa      	ldrb	r2, [r7, #3]
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	4613      	mov	r3, r2
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	440b      	add	r3, r1
 800542e:	334d      	adds	r3, #77	@ 0x4d
 8005430:	2209      	movs	r2, #9
 8005432:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	4611      	mov	r1, r2
 800543c:	4618      	mov	r0, r3
 800543e:	f002 fe89 	bl	8008154 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544e:	461a      	mov	r2, r3
 8005450:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005454:	6093      	str	r3, [r2, #8]
 8005456:	e1ee      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	78fa      	ldrb	r2, [r7, #3]
 800545e:	4611      	mov	r1, r2
 8005460:	4618      	mov	r0, r3
 8005462:	f002 fdfa 	bl	800805a <USB_ReadChInterrupts>
 8005466:	4603      	mov	r3, r0
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b02      	cmp	r3, #2
 800546e:	f040 81df 	bne.w	8005830 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800547e:	461a      	mov	r2, r3
 8005480:	2302      	movs	r3, #2
 8005482:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4613      	mov	r3, r2
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	440b      	add	r3, r1
 8005492:	334d      	adds	r3, #77	@ 0x4d
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	2b01      	cmp	r3, #1
 8005498:	f040 8093 	bne.w	80055c2 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334d      	adds	r3, #77	@ 0x4d
 80054ac:	2202      	movs	r2, #2
 80054ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	4613      	mov	r3, r2
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	1a9b      	subs	r3, r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	334c      	adds	r3, #76	@ 0x4c
 80054c0:	2201      	movs	r2, #1
 80054c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054c4:	78fa      	ldrb	r2, [r7, #3]
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4613      	mov	r3, r2
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	3326      	adds	r3, #38	@ 0x26
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d00b      	beq.n	80054f2 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	1a9b      	subs	r3, r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3326      	adds	r3, #38	@ 0x26
 80054ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	f040 8190 	bne.w	8005812 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	799b      	ldrb	r3, [r3, #6]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d115      	bne.n	8005526 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	333d      	adds	r3, #61	@ 0x3d
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	f083 0301 	eor.w	r3, r3, #1
 8005512:	b2d8      	uxtb	r0, r3
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	333d      	adds	r3, #61	@ 0x3d
 8005522:	4602      	mov	r2, r0
 8005524:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	799b      	ldrb	r3, [r3, #6]
 800552a:	2b01      	cmp	r3, #1
 800552c:	f040 8171 	bne.w	8005812 <HCD_HC_OUT_IRQHandler+0x954>
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	3334      	adds	r3, #52	@ 0x34
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8165 	beq.w	8005812 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3334      	adds	r3, #52	@ 0x34
 8005558:	6819      	ldr	r1, [r3, #0]
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4403      	add	r3, r0
 8005568:	3328      	adds	r3, #40	@ 0x28
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	440b      	add	r3, r1
 800556e:	1e59      	subs	r1, r3, #1
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	1a9b      	subs	r3, r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4403      	add	r3, r0
 800557e:	3328      	adds	r3, #40	@ 0x28
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	fbb1 f3f3 	udiv	r3, r1, r3
 8005586:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 813f 	beq.w	8005812 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	333d      	adds	r3, #61	@ 0x3d
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	f083 0301 	eor.w	r3, r3, #1
 80055ac:	b2d8      	uxtb	r0, r3
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	333d      	adds	r3, #61	@ 0x3d
 80055bc:	4602      	mov	r2, r0
 80055be:	701a      	strb	r2, [r3, #0]
 80055c0:	e127      	b.n	8005812 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	6879      	ldr	r1, [r7, #4]
 80055c6:	4613      	mov	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	1a9b      	subs	r3, r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	440b      	add	r3, r1
 80055d0:	334d      	adds	r3, #77	@ 0x4d
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d120      	bne.n	800561a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	6879      	ldr	r1, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	1a9b      	subs	r3, r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	440b      	add	r3, r1
 80055e6:	334d      	adds	r3, #77	@ 0x4d
 80055e8:	2202      	movs	r2, #2
 80055ea:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	1a9b      	subs	r3, r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	331b      	adds	r3, #27
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	f040 8107 	bne.w	8005812 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	334c      	adds	r3, #76	@ 0x4c
 8005614:	2202      	movs	r2, #2
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e0fb      	b.n	8005812 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	334d      	adds	r3, #77	@ 0x4d
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d13a      	bne.n	80056a6 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	334d      	adds	r3, #77	@ 0x4d
 8005640:	2202      	movs	r2, #2
 8005642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334c      	adds	r3, #76	@ 0x4c
 8005654:	2202      	movs	r2, #2
 8005656:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	331b      	adds	r3, #27
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b01      	cmp	r3, #1
 800566c:	f040 80d1 	bne.w	8005812 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	331b      	adds	r3, #27
 8005680:	2200      	movs	r2, #0
 8005682:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	0151      	lsls	r1, r2, #5
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	440a      	add	r2, r1
 800569a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800569e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056a2:	6053      	str	r3, [r2, #4]
 80056a4:	e0b5      	b.n	8005812 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80056a6:	78fa      	ldrb	r2, [r7, #3]
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	334d      	adds	r3, #77	@ 0x4d
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	d114      	bne.n	80056e6 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	334d      	adds	r3, #77	@ 0x4d
 80056cc:	2202      	movs	r2, #2
 80056ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80056d0:	78fa      	ldrb	r2, [r7, #3]
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	4613      	mov	r3, r2
 80056d6:	011b      	lsls	r3, r3, #4
 80056d8:	1a9b      	subs	r3, r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	334c      	adds	r3, #76	@ 0x4c
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e095      	b.n	8005812 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056e6:	78fa      	ldrb	r2, [r7, #3]
 80056e8:	6879      	ldr	r1, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	1a9b      	subs	r3, r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	334d      	adds	r3, #77	@ 0x4d
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b06      	cmp	r3, #6
 80056fa:	d114      	bne.n	8005726 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	334d      	adds	r3, #77	@ 0x4d
 800570c:	2202      	movs	r2, #2
 800570e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	6879      	ldr	r1, [r7, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	1a9b      	subs	r3, r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	440b      	add	r3, r1
 800571e:	334c      	adds	r3, #76	@ 0x4c
 8005720:	2205      	movs	r2, #5
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	e075      	b.n	8005812 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005726:	78fa      	ldrb	r2, [r7, #3]
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	1a9b      	subs	r3, r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	334d      	adds	r3, #77	@ 0x4d
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b07      	cmp	r3, #7
 800573a:	d00a      	beq.n	8005752 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800573c:	78fa      	ldrb	r2, [r7, #3]
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	334d      	adds	r3, #77	@ 0x4d
 800574c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800574e:	2b09      	cmp	r3, #9
 8005750:	d170      	bne.n	8005834 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005752:	78fa      	ldrb	r2, [r7, #3]
 8005754:	6879      	ldr	r1, [r7, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	011b      	lsls	r3, r3, #4
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	334d      	adds	r3, #77	@ 0x4d
 8005762:	2202      	movs	r2, #2
 8005764:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005766:	78fa      	ldrb	r2, [r7, #3]
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	440b      	add	r3, r1
 8005774:	3344      	adds	r3, #68	@ 0x44
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	1a9b      	subs	r3, r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4403      	add	r3, r0
 8005786:	3344      	adds	r3, #68	@ 0x44
 8005788:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	3344      	adds	r3, #68	@ 0x44
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d914      	bls.n	80057ca <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3344      	adds	r3, #68	@ 0x44
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	440b      	add	r3, r1
 80057c2:	334c      	adds	r3, #76	@ 0x4c
 80057c4:	2204      	movs	r2, #4
 80057c6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057c8:	e022      	b.n	8005810 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	334c      	adds	r3, #76	@ 0x4c
 80057da:	2202      	movs	r2, #2
 80057dc:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80057de:	78fb      	ldrb	r3, [r7, #3]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057f4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80057fc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580a:	461a      	mov	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005810:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	334c      	adds	r3, #76	@ 0x4c
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	4619      	mov	r1, r3
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f005 fd9f 	bl	800b36c <HAL_HCD_HC_NotifyURBChange_Callback>
 800582e:	e002      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005830:	bf00      	nop
 8005832:	e000      	b.n	8005836 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005834:	bf00      	nop
  }
}
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08a      	sub	sp, #40	@ 0x28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	0c5b      	lsrs	r3, r3, #17
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005870:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d004      	beq.n	8005882 <HCD_RXQLVL_IRQHandler+0x46>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2b05      	cmp	r3, #5
 800587c:	f000 80b6 	beq.w	80059ec <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005880:	e0b7      	b.n	80059f2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80b3 	beq.w	80059f0 <HCD_RXQLVL_IRQHandler+0x1b4>
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	332c      	adds	r3, #44	@ 0x2c
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80a7 	beq.w	80059f0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	3338      	adds	r3, #56	@ 0x38
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	18d1      	adds	r1, r2, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	4613      	mov	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4403      	add	r3, r0
 80058c6:	3334      	adds	r3, #52	@ 0x34
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4299      	cmp	r1, r3
 80058cc:	f200 8083 	bhi.w	80059d6 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	4613      	mov	r3, r2
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	332c      	adds	r3, #44	@ 0x2c
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	b292      	uxth	r2, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	f002 fb4a 	bl	8007f84 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4613      	mov	r3, r2
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	332c      	adds	r3, #44	@ 0x2c
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	18d1      	adds	r1, r2, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4613      	mov	r3, r2
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4403      	add	r3, r0
 8005914:	332c      	adds	r3, #44	@ 0x2c
 8005916:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4613      	mov	r3, r2
 800591e:	011b      	lsls	r3, r3, #4
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	3338      	adds	r3, #56	@ 0x38
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	18d1      	adds	r1, r2, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4613      	mov	r3, r2
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	1a9b      	subs	r3, r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4403      	add	r3, r0
 800593c:	3338      	adds	r3, #56	@ 0x38
 800593e:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	4413      	add	r3, r2
 8005948:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	0cdb      	lsrs	r3, r3, #19
 8005950:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005954:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4613      	mov	r3, r2
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	1a9b      	subs	r3, r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	3328      	adds	r3, #40	@ 0x28
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	4293      	cmp	r3, r2
 800596e:	d13f      	bne.n	80059f0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03c      	beq.n	80059f0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800598c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005994:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4613      	mov	r3, r2
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	333c      	adds	r3, #60	@ 0x3c
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f083 0301 	eor.w	r3, r3, #1
 80059be:	b2d8      	uxtb	r0, r3
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	333c      	adds	r3, #60	@ 0x3c
 80059d0:	4602      	mov	r2, r0
 80059d2:	701a      	strb	r2, [r3, #0]
      break;
 80059d4:	e00c      	b.n	80059f0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4613      	mov	r3, r2
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	334c      	adds	r3, #76	@ 0x4c
 80059e6:	2204      	movs	r2, #4
 80059e8:	701a      	strb	r2, [r3, #0]
      break;
 80059ea:	e001      	b.n	80059f0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80059ec:	bf00      	nop
 80059ee:	e000      	b.n	80059f2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80059f0:	bf00      	nop
  }
}
 80059f2:	bf00      	nop
 80059f4:	3728      	adds	r7, #40	@ 0x28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059fa:	b580      	push	{r7, lr}
 80059fc:	b086      	sub	sp, #24
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d10b      	bne.n	8005a4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d102      	bne.n	8005a42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f005 fc79 	bl	800b334 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f043 0302 	orr.w	r3, r3, #2
 8005a48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d132      	bne.n	8005aba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f043 0308 	orr.w	r3, r3, #8
 8005a5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d126      	bne.n	8005ab4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	7a5b      	ldrb	r3, [r3, #9]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d113      	bne.n	8005a96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a78:	d106      	bne.n	8005a88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2102      	movs	r1, #2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 fb19 	bl	80080b8 <USB_InitFSLSPClkSel>
 8005a86:	e011      	b.n	8005aac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f002 fb12 	bl	80080b8 <USB_InitFSLSPClkSel>
 8005a94:	e00a      	b.n	8005aac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	79db      	ldrb	r3, [r3, #7]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d106      	bne.n	8005aac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005aaa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f005 fc6f 	bl	800b390 <HAL_HCD_PortEnabled_Callback>
 8005ab2:	e002      	b.n	8005aba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f005 fc79 	bl	800b3ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f003 0320 	and.w	r3, r3, #32
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d103      	bne.n	8005acc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f043 0320 	orr.w	r3, r3, #32
 8005aca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6013      	str	r3, [r2, #0]
}
 8005ad8:	bf00      	nop
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e12b      	b.n	8005d4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fd fc54 	bl	80033b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2224      	movs	r2, #36	@ 0x24
 8005b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b44:	f000 fd80 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8005b48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	4a81      	ldr	r2, [pc, #516]	@ (8005d54 <HAL_I2C_Init+0x274>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d807      	bhi.n	8005b64 <HAL_I2C_Init+0x84>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4a80      	ldr	r2, [pc, #512]	@ (8005d58 <HAL_I2C_Init+0x278>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	bf94      	ite	ls
 8005b5c:	2301      	movls	r3, #1
 8005b5e:	2300      	movhi	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	e006      	b.n	8005b72 <HAL_I2C_Init+0x92>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4a7d      	ldr	r2, [pc, #500]	@ (8005d5c <HAL_I2C_Init+0x27c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	bf94      	ite	ls
 8005b6c:	2301      	movls	r3, #1
 8005b6e:	2300      	movhi	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e0e7      	b.n	8005d4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4a78      	ldr	r2, [pc, #480]	@ (8005d60 <HAL_I2C_Init+0x280>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	0c9b      	lsrs	r3, r3, #18
 8005b84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8005d54 <HAL_I2C_Init+0x274>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d802      	bhi.n	8005bb4 <HAL_I2C_Init+0xd4>
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	e009      	b.n	8005bc8 <HAL_I2C_Init+0xe8>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	4a69      	ldr	r2, [pc, #420]	@ (8005d64 <HAL_I2C_Init+0x284>)
 8005bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc4:	099b      	lsrs	r3, r3, #6
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	495c      	ldr	r1, [pc, #368]	@ (8005d54 <HAL_I2C_Init+0x274>)
 8005be4:	428b      	cmp	r3, r1
 8005be6:	d819      	bhi.n	8005c1c <HAL_I2C_Init+0x13c>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1e59      	subs	r1, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005bfc:	400b      	ands	r3, r1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_I2C_Init+0x138>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1e59      	subs	r1, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c10:	3301      	adds	r3, #1
 8005c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c16:	e051      	b.n	8005cbc <HAL_I2C_Init+0x1dc>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	e04f      	b.n	8005cbc <HAL_I2C_Init+0x1dc>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d111      	bne.n	8005c48 <HAL_I2C_Init+0x168>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1e58      	subs	r0, r3, #1
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6859      	ldr	r1, [r3, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	440b      	add	r3, r1
 8005c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c36:	3301      	adds	r3, #1
 8005c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e012      	b.n	8005c6e <HAL_I2C_Init+0x18e>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1e58      	subs	r0, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	0099      	lsls	r1, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_I2C_Init+0x196>
 8005c72:	2301      	movs	r3, #1
 8005c74:	e022      	b.n	8005cbc <HAL_I2C_Init+0x1dc>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10e      	bne.n	8005c9c <HAL_I2C_Init+0x1bc>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1e58      	subs	r0, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6859      	ldr	r1, [r3, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	440b      	add	r3, r1
 8005c8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c90:	3301      	adds	r3, #1
 8005c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c9a:	e00f      	b.n	8005cbc <HAL_I2C_Init+0x1dc>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	1e58      	subs	r0, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6859      	ldr	r1, [r3, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	0099      	lsls	r1, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	6809      	ldr	r1, [r1, #0]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005cea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6911      	ldr	r1, [r2, #16]
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	68d2      	ldr	r2, [r2, #12]
 8005cf6:	4311      	orrs	r1, r2
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	000186a0 	.word	0x000186a0
 8005d58:	001e847f 	.word	0x001e847f
 8005d5c:	003d08ff 	.word	0x003d08ff
 8005d60:	431bde83 	.word	0x431bde83
 8005d64:	10624dd3 	.word	0x10624dd3

08005d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e267      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d075      	beq.n	8005e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d86:	4b88      	ldr	r3, [pc, #544]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 030c 	and.w	r3, r3, #12
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00c      	beq.n	8005dac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d92:	4b85      	ldr	r3, [pc, #532]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d112      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d9e:	4b82      	ldr	r3, [pc, #520]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005daa:	d10b      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dac:	4b7e      	ldr	r3, [pc, #504]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d05b      	beq.n	8005e70 <HAL_RCC_OscConfig+0x108>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d157      	bne.n	8005e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e242      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dcc:	d106      	bne.n	8005ddc <HAL_RCC_OscConfig+0x74>
 8005dce:	4b76      	ldr	r3, [pc, #472]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a75      	ldr	r2, [pc, #468]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e01d      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x98>
 8005de6:	4b70      	ldr	r3, [pc, #448]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a6f      	ldr	r2, [pc, #444]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a6c      	ldr	r2, [pc, #432]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e00b      	b.n	8005e18 <HAL_RCC_OscConfig+0xb0>
 8005e00:	4b69      	ldr	r3, [pc, #420]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a68      	ldr	r2, [pc, #416]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	4b66      	ldr	r3, [pc, #408]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a65      	ldr	r2, [pc, #404]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d013      	beq.n	8005e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e20:	f7fd fd5e 	bl	80038e0 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e28:	f7fd fd5a 	bl	80038e0 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b64      	cmp	r3, #100	@ 0x64
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e207      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0xc0>
 8005e46:	e014      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd fd4a 	bl	80038e0 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd fd46 	bl	80038e0 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	@ 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1f3      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e62:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0xe8>
 8005e6e:	e000      	b.n	8005e72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d063      	beq.n	8005f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00b      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e8a:	4b47      	ldr	r3, [pc, #284]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d11c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e96:	4b44      	ldr	r3, [pc, #272]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d116      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ea2:	4b41      	ldr	r3, [pc, #260]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_RCC_OscConfig+0x152>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d001      	beq.n	8005eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e1c7      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eba:	4b3b      	ldr	r3, [pc, #236]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	4937      	ldr	r1, [pc, #220]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ece:	e03a      	b.n	8005f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ed8:	4b34      	ldr	r3, [pc, #208]	@ (8005fac <HAL_RCC_OscConfig+0x244>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ede:	f7fd fcff 	bl	80038e0 <HAL_GetTick>
 8005ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	e008      	b.n	8005ef8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee6:	f7fd fcfb 	bl	80038e0 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e1a8      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d0f0      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f04:	4b28      	ldr	r3, [pc, #160]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4925      	ldr	r1, [pc, #148]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	600b      	str	r3, [r1, #0]
 8005f18:	e015      	b.n	8005f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f1a:	4b24      	ldr	r3, [pc, #144]	@ (8005fac <HAL_RCC_OscConfig+0x244>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f20:	f7fd fcde 	bl	80038e0 <HAL_GetTick>
 8005f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f26:	e008      	b.n	8005f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f28:	f7fd fcda 	bl	80038e0 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e187      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1f0      	bne.n	8005f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0308 	and.w	r3, r3, #8
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d036      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d016      	beq.n	8005f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f5a:	4b15      	ldr	r3, [pc, #84]	@ (8005fb0 <HAL_RCC_OscConfig+0x248>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fd fcbe 	bl	80038e0 <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f68:	f7fd fcba 	bl	80038e0 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e167      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x200>
 8005f86:	e01b      	b.n	8005fc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <HAL_RCC_OscConfig+0x248>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f8e:	f7fd fca7 	bl	80038e0 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f94:	e00e      	b.n	8005fb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f96:	f7fd fca3 	bl	80038e0 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d907      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e150      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	42470000 	.word	0x42470000
 8005fb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fb4:	4b88      	ldr	r3, [pc, #544]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ea      	bne.n	8005f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 8097 	beq.w	80060fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fd2:	4b81      	ldr	r3, [pc, #516]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10f      	bne.n	8005ffe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fee:	4b7a      	ldr	r3, [pc, #488]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff6:	60bb      	str	r3, [r7, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffe:	4b77      	ldr	r3, [pc, #476]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	2b00      	cmp	r3, #0
 8006008:	d118      	bne.n	800603c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800600a:	4b74      	ldr	r3, [pc, #464]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a73      	ldr	r2, [pc, #460]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 8006010:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006014:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006016:	f7fd fc63 	bl	80038e0 <HAL_GetTick>
 800601a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601e:	f7fd fc5f 	bl	80038e0 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b02      	cmp	r3, #2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e10c      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006030:	4b6a      	ldr	r3, [pc, #424]	@ (80061dc <HAL_RCC_OscConfig+0x474>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <HAL_RCC_OscConfig+0x2ea>
 8006044:	4b64      	ldr	r3, [pc, #400]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006048:	4a63      	ldr	r2, [pc, #396]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006050:	e01c      	b.n	800608c <HAL_RCC_OscConfig+0x324>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b05      	cmp	r3, #5
 8006058:	d10c      	bne.n	8006074 <HAL_RCC_OscConfig+0x30c>
 800605a:	4b5f      	ldr	r3, [pc, #380]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800605c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605e:	4a5e      	ldr	r2, [pc, #376]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006060:	f043 0304 	orr.w	r3, r3, #4
 8006064:	6713      	str	r3, [r2, #112]	@ 0x70
 8006066:	4b5c      	ldr	r3, [pc, #368]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606a:	4a5b      	ldr	r2, [pc, #364]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800606c:	f043 0301 	orr.w	r3, r3, #1
 8006070:	6713      	str	r3, [r2, #112]	@ 0x70
 8006072:	e00b      	b.n	800608c <HAL_RCC_OscConfig+0x324>
 8006074:	4b58      	ldr	r3, [pc, #352]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006078:	4a57      	ldr	r2, [pc, #348]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800607a:	f023 0301 	bic.w	r3, r3, #1
 800607e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006080:	4b55      	ldr	r3, [pc, #340]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006084:	4a54      	ldr	r2, [pc, #336]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d015      	beq.n	80060c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fd fc24 	bl	80038e0 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609a:	e00a      	b.n	80060b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fd fc20 	bl	80038e0 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d901      	bls.n	80060b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e0cb      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b2:	4b49      	ldr	r3, [pc, #292]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d0ee      	beq.n	800609c <HAL_RCC_OscConfig+0x334>
 80060be:	e014      	b.n	80060ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fd fc0e 	bl	80038e0 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c8:	f7fd fc0a 	bl	80038e0 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e0b5      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060de:	4b3e      	ldr	r3, [pc, #248]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ee      	bne.n	80060c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060ea:	7dfb      	ldrb	r3, [r7, #23]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d105      	bne.n	80060fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f0:	4b39      	ldr	r3, [pc, #228]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f4:	4a38      	ldr	r2, [pc, #224]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80060f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a1 	beq.w	8006248 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006106:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b08      	cmp	r3, #8
 8006110:	d05c      	beq.n	80061cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d141      	bne.n	800619e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b31      	ldr	r3, [pc, #196]	@ (80061e0 <HAL_RCC_OscConfig+0x478>)
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fd fbde 	bl	80038e0 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006128:	f7fd fbda 	bl	80038e0 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e087      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613a:	4b27      	ldr	r3, [pc, #156]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	431a      	orrs	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	019b      	lsls	r3, r3, #6
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	3b01      	subs	r3, #1
 8006160:	041b      	lsls	r3, r3, #16
 8006162:	431a      	orrs	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	061b      	lsls	r3, r3, #24
 800616a:	491b      	ldr	r1, [pc, #108]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 800616c:	4313      	orrs	r3, r2
 800616e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006170:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <HAL_RCC_OscConfig+0x478>)
 8006172:	2201      	movs	r2, #1
 8006174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006176:	f7fd fbb3 	bl	80038e0 <HAL_GetTick>
 800617a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800617e:	f7fd fbaf 	bl	80038e0 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e05c      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006190:	4b11      	ldr	r3, [pc, #68]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x416>
 800619c:	e054      	b.n	8006248 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b10      	ldr	r3, [pc, #64]	@ (80061e0 <HAL_RCC_OscConfig+0x478>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fd fb9c 	bl	80038e0 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fd fb98 	bl	80038e0 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e045      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061be:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <HAL_RCC_OscConfig+0x470>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x444>
 80061ca:	e03d      	b.n	8006248 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e038      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
 80061d8:	40023800 	.word	0x40023800
 80061dc:	40007000 	.word	0x40007000
 80061e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <HAL_RCC_OscConfig+0x4ec>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d028      	beq.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d121      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620a:	429a      	cmp	r2, r3
 800620c:	d11a      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006214:	4013      	ands	r3, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800621a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800621c:	4293      	cmp	r3, r2
 800621e:	d111      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006230:	429a      	cmp	r2, r3
 8006232:	d107      	bne.n	8006244 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800

08006258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e0cc      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800626c:	4b68      	ldr	r3, [pc, #416]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d90c      	bls.n	8006294 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800627a:	4b65      	ldr	r3, [pc, #404]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006282:	4b63      	ldr	r3, [pc, #396]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d001      	beq.n	8006294 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e0b8      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d020      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062ac:	4b59      	ldr	r3, [pc, #356]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	4a58      	ldr	r2, [pc, #352]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80062b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062c4:	4b53      	ldr	r3, [pc, #332]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a52      	ldr	r2, [pc, #328]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80062ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062d0:	4b50      	ldr	r3, [pc, #320]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	494d      	ldr	r1, [pc, #308]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d044      	beq.n	8006378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d107      	bne.n	8006306 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	4b47      	ldr	r3, [pc, #284]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d119      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e07f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d003      	beq.n	8006316 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006312:	2b03      	cmp	r3, #3
 8006314:	d107      	bne.n	8006326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006316:	4b3f      	ldr	r3, [pc, #252]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e06f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006326:	4b3b      	ldr	r3, [pc, #236]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e067      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006336:	4b37      	ldr	r3, [pc, #220]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f023 0203 	bic.w	r2, r3, #3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	4934      	ldr	r1, [pc, #208]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	4313      	orrs	r3, r2
 8006346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006348:	f7fd faca 	bl	80038e0 <HAL_GetTick>
 800634c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800634e:	e00a      	b.n	8006366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006350:	f7fd fac6 	bl	80038e0 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e04f      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	4b2b      	ldr	r3, [pc, #172]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 020c 	and.w	r2, r3, #12
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	429a      	cmp	r2, r3
 8006376:	d1eb      	bne.n	8006350 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006378:	4b25      	ldr	r3, [pc, #148]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d20c      	bcs.n	80063a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006386:	4b22      	ldr	r3, [pc, #136]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800638e:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d001      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e032      	b.n	8006406 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063ac:	4b19      	ldr	r3, [pc, #100]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4916      	ldr	r1, [pc, #88]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	4313      	orrs	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063ca:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	490e      	ldr	r1, [pc, #56]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063de:	f000 f821 	bl	8006424 <HAL_RCC_GetSysClockFreq>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006414 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	091b      	lsrs	r3, r3, #4
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	490a      	ldr	r1, [pc, #40]	@ (8006418 <HAL_RCC_ClockConfig+0x1c0>)
 80063f0:	5ccb      	ldrb	r3, [r1, r3]
 80063f2:	fa22 f303 	lsr.w	r3, r2, r3
 80063f6:	4a09      	ldr	r2, [pc, #36]	@ (800641c <HAL_RCC_ClockConfig+0x1c4>)
 80063f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80063fa:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <HAL_RCC_ClockConfig+0x1c8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fd f910 	bl	8003624 <HAL_InitTick>

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40023c00 	.word	0x40023c00
 8006414:	40023800 	.word	0x40023800
 8006418:	0800fab8 	.word	0x0800fab8
 800641c:	20000000 	.word	0x20000000
 8006420:	20000004 	.word	0x20000004

08006424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b094      	sub	sp, #80	@ 0x50
 800642a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800643c:	4b79      	ldr	r3, [pc, #484]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 030c 	and.w	r3, r3, #12
 8006444:	2b08      	cmp	r3, #8
 8006446:	d00d      	beq.n	8006464 <HAL_RCC_GetSysClockFreq+0x40>
 8006448:	2b08      	cmp	r3, #8
 800644a:	f200 80e1 	bhi.w	8006610 <HAL_RCC_GetSysClockFreq+0x1ec>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_RCC_GetSysClockFreq+0x34>
 8006452:	2b04      	cmp	r3, #4
 8006454:	d003      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x3a>
 8006456:	e0db      	b.n	8006610 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006458:	4b73      	ldr	r3, [pc, #460]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x204>)
 800645a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800645c:	e0db      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800645e:	4b73      	ldr	r3, [pc, #460]	@ (800662c <HAL_RCC_GetSysClockFreq+0x208>)
 8006460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006462:	e0d8      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006464:	4b6f      	ldr	r3, [pc, #444]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800646c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800646e:	4b6d      	ldr	r3, [pc, #436]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d063      	beq.n	8006542 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647a:	4b6a      	ldr	r3, [pc, #424]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	099b      	lsrs	r3, r3, #6
 8006480:	2200      	movs	r2, #0
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	633b      	str	r3, [r7, #48]	@ 0x30
 800648e:	2300      	movs	r3, #0
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
 8006492:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006496:	4622      	mov	r2, r4
 8006498:	462b      	mov	r3, r5
 800649a:	f04f 0000 	mov.w	r0, #0
 800649e:	f04f 0100 	mov.w	r1, #0
 80064a2:	0159      	lsls	r1, r3, #5
 80064a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064a8:	0150      	lsls	r0, r2, #5
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4621      	mov	r1, r4
 80064b0:	1a51      	subs	r1, r2, r1
 80064b2:	6139      	str	r1, [r7, #16]
 80064b4:	4629      	mov	r1, r5
 80064b6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c8:	4659      	mov	r1, fp
 80064ca:	018b      	lsls	r3, r1, #6
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064d2:	4651      	mov	r1, sl
 80064d4:	018a      	lsls	r2, r1, #6
 80064d6:	4651      	mov	r1, sl
 80064d8:	ebb2 0801 	subs.w	r8, r2, r1
 80064dc:	4659      	mov	r1, fp
 80064de:	eb63 0901 	sbc.w	r9, r3, r1
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	f04f 0300 	mov.w	r3, #0
 80064ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064f6:	4690      	mov	r8, r2
 80064f8:	4699      	mov	r9, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	eb18 0303 	adds.w	r3, r8, r3
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	462b      	mov	r3, r5
 8006504:	eb49 0303 	adc.w	r3, r9, r3
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006516:	4629      	mov	r1, r5
 8006518:	024b      	lsls	r3, r1, #9
 800651a:	4621      	mov	r1, r4
 800651c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006520:	4621      	mov	r1, r4
 8006522:	024a      	lsls	r2, r1, #9
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652a:	2200      	movs	r2, #0
 800652c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006530:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006534:	f7fa fba8 	bl	8000c88 <__aeabi_uldivmod>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4613      	mov	r3, r2
 800653e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006540:	e058      	b.n	80065f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b38      	ldr	r3, [pc, #224]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	4618      	mov	r0, r3
 800654c:	4611      	mov	r1, r2
 800654e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	2300      	movs	r3, #0
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
 8006558:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800655c:	4642      	mov	r2, r8
 800655e:	464b      	mov	r3, r9
 8006560:	f04f 0000 	mov.w	r0, #0
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	0159      	lsls	r1, r3, #5
 800656a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800656e:	0150      	lsls	r0, r2, #5
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4641      	mov	r1, r8
 8006576:	ebb2 0a01 	subs.w	sl, r2, r1
 800657a:	4649      	mov	r1, r9
 800657c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800658c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006590:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006594:	ebb2 040a 	subs.w	r4, r2, sl
 8006598:	eb63 050b 	sbc.w	r5, r3, fp
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	00eb      	lsls	r3, r5, #3
 80065a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065aa:	00e2      	lsls	r2, r4, #3
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	4643      	mov	r3, r8
 80065b2:	18e3      	adds	r3, r4, r3
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	464b      	mov	r3, r9
 80065b8:	eb45 0303 	adc.w	r3, r5, r3
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	f04f 0200 	mov.w	r2, #0
 80065c2:	f04f 0300 	mov.w	r3, #0
 80065c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ca:	4629      	mov	r1, r5
 80065cc:	028b      	lsls	r3, r1, #10
 80065ce:	4621      	mov	r1, r4
 80065d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065d4:	4621      	mov	r1, r4
 80065d6:	028a      	lsls	r2, r1, #10
 80065d8:	4610      	mov	r0, r2
 80065da:	4619      	mov	r1, r3
 80065dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065de:	2200      	movs	r2, #0
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e8:	f7fa fb4e 	bl	8000c88 <__aeabi_uldivmod>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4613      	mov	r3, r2
 80065f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80065f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	3301      	adds	r3, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800660e:	e002      	b.n	8006616 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006610:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <HAL_RCC_GetSysClockFreq+0x204>)
 8006612:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006618:	4618      	mov	r0, r3
 800661a:	3750      	adds	r7, #80	@ 0x50
 800661c:	46bd      	mov	sp, r7
 800661e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006622:	bf00      	nop
 8006624:	40023800 	.word	0x40023800
 8006628:	00f42400 	.word	0x00f42400
 800662c:	007a1200 	.word	0x007a1200

08006630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006634:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <HAL_RCC_GetHCLKFreq+0x14>)
 8006636:	681b      	ldr	r3, [r3, #0]
}
 8006638:	4618      	mov	r0, r3
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	20000000 	.word	0x20000000

08006648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800664c:	f7ff fff0 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b05      	ldr	r3, [pc, #20]	@ (8006668 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0a9b      	lsrs	r3, r3, #10
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4903      	ldr	r1, [pc, #12]	@ (800666c <HAL_RCC_GetPCLK1Freq+0x24>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40023800 	.word	0x40023800
 800666c:	0800fac8 	.word	0x0800fac8

08006670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006674:	f7ff ffdc 	bl	8006630 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b05      	ldr	r3, [pc, #20]	@ (8006690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	0b5b      	lsrs	r3, r3, #13
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4903      	ldr	r1, [pc, #12]	@ (8006694 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800668c:	4618      	mov	r0, r3
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40023800 	.word	0x40023800
 8006694:	0800fac8 	.word	0x0800fac8

08006698 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	220f      	movs	r2, #15
 80066a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066a8:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <HAL_RCC_GetClockConfig+0x5c>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 0203 	and.w	r2, r3, #3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066b4:	4b0f      	ldr	r3, [pc, #60]	@ (80066f4 <HAL_RCC_GetClockConfig+0x5c>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066c0:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <HAL_RCC_GetClockConfig+0x5c>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066cc:	4b09      	ldr	r3, [pc, #36]	@ (80066f4 <HAL_RCC_GetClockConfig+0x5c>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	08db      	lsrs	r3, r3, #3
 80066d2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066da:	4b07      	ldr	r3, [pc, #28]	@ (80066f8 <HAL_RCC_GetClockConfig+0x60>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0207 	and.w	r2, r3, #7
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	601a      	str	r2, [r3, #0]
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40023c00 	.word	0x40023c00

080066fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e07b      	b.n	8006806 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d108      	bne.n	8006728 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800671e:	d009      	beq.n	8006734 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	61da      	str	r2, [r3, #28]
 8006726:	e005      	b.n	8006734 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fc fe78 	bl	8003444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2202      	movs	r2, #2
 8006758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800676a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006786:	431a      	orrs	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f003 0302 	and.w	r3, r3, #2
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b8:	ea42 0103 	orr.w	r1, r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	f003 0104 	and.w	r1, r3, #4
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	f003 0210 	and.w	r2, r3, #16
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e041      	b.n	80068a4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f839 	bl	80068ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2202      	movs	r2, #2
 800683e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3304      	adds	r3, #4
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 f9bf 	bl	8006bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e04e      	b.n	8006976 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a23      	ldr	r2, [pc, #140]	@ (8006984 <HAL_TIM_Base_Start_IT+0xc4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006902:	d01d      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1f      	ldr	r2, [pc, #124]	@ (8006988 <HAL_TIM_Base_Start_IT+0xc8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <HAL_TIM_Base_Start_IT+0xcc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1c      	ldr	r2, [pc, #112]	@ (8006990 <HAL_TIM_Base_Start_IT+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1b      	ldr	r2, [pc, #108]	@ (8006994 <HAL_TIM_Base_Start_IT+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a19      	ldr	r2, [pc, #100]	@ (8006998 <HAL_TIM_Base_Start_IT+0xd8>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x80>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a18      	ldr	r2, [pc, #96]	@ (800699c <HAL_TIM_Base_Start_IT+0xdc>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d111      	bne.n	8006964 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b06      	cmp	r3, #6
 8006950:	d010      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f042 0201 	orr.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006962:	e007      	b.n	8006974 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	40010000 	.word	0x40010000
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00
 8006994:	40010400 	.word	0x40010400
 8006998:	40014000 	.word	0x40014000
 800699c:	40001800 	.word	0x40001800

080069a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d020      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0202 	mvn.w	r2, #2
 80069d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f8d2 	bl	8006b94 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f8c4 	bl	8006b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f8d5 	bl	8006ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d020      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d01b      	beq.n	8006a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0204 	mvn.w	r2, #4
 8006a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f8ac 	bl	8006b94 <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f89e 	bl	8006b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f8af 	bl	8006ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d020      	beq.n	8006a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0208 	mvn.w	r2, #8
 8006a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f886 	bl	8006b94 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f878 	bl	8006b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f889 	bl	8006ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d020      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0210 	mvn.w	r2, #16
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2208      	movs	r2, #8
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f860 	bl	8006b94 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f852 	bl	8006b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f863 	bl	8006ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00c      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f06f 0201 	mvn.w	r2, #1
 8006b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fc fb8e 	bl	8003228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d007      	beq.n	8006b30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f906 	bl	8006d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00c      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d007      	beq.n	8006b54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f834 	bl	8006bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00c      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0220 	mvn.w	r2, #32
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f8d8 	bl	8006d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a46      	ldr	r2, [pc, #280]	@ (8006cfc <TIM_Base_SetConfig+0x12c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d013      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bee:	d00f      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a43      	ldr	r2, [pc, #268]	@ (8006d00 <TIM_Base_SetConfig+0x130>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00b      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a42      	ldr	r2, [pc, #264]	@ (8006d04 <TIM_Base_SetConfig+0x134>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d007      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a41      	ldr	r2, [pc, #260]	@ (8006d08 <TIM_Base_SetConfig+0x138>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d003      	beq.n	8006c10 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a40      	ldr	r2, [pc, #256]	@ (8006d0c <TIM_Base_SetConfig+0x13c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d108      	bne.n	8006c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a35      	ldr	r2, [pc, #212]	@ (8006cfc <TIM_Base_SetConfig+0x12c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d02b      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c30:	d027      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a32      	ldr	r2, [pc, #200]	@ (8006d00 <TIM_Base_SetConfig+0x130>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d023      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a31      	ldr	r2, [pc, #196]	@ (8006d04 <TIM_Base_SetConfig+0x134>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01f      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a30      	ldr	r2, [pc, #192]	@ (8006d08 <TIM_Base_SetConfig+0x138>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01b      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8006d0c <TIM_Base_SetConfig+0x13c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d017      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2e      	ldr	r2, [pc, #184]	@ (8006d10 <TIM_Base_SetConfig+0x140>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8006d14 <TIM_Base_SetConfig+0x144>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00f      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2c      	ldr	r2, [pc, #176]	@ (8006d18 <TIM_Base_SetConfig+0x148>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00b      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d1c <TIM_Base_SetConfig+0x14c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d007      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2a      	ldr	r2, [pc, #168]	@ (8006d20 <TIM_Base_SetConfig+0x150>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a29      	ldr	r2, [pc, #164]	@ (8006d24 <TIM_Base_SetConfig+0x154>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d108      	bne.n	8006c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a10      	ldr	r2, [pc, #64]	@ (8006cfc <TIM_Base_SetConfig+0x12c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_Base_SetConfig+0xf8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a12      	ldr	r2, [pc, #72]	@ (8006d0c <TIM_Base_SetConfig+0x13c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d103      	bne.n	8006cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f023 0201 	bic.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]
  }
}
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40010000 	.word	0x40010000
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40010400 	.word	0x40010400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800
 8006d1c:	40001800 	.word	0x40001800
 8006d20:	40001c00 	.word	0x40001c00
 8006d24:	40002000 	.word	0x40002000

08006d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e042      	b.n	8006de8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fc fbac 	bl	80034d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2224      	movs	r2, #36	@ 0x24
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fdff 	bl	8007998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006da8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	695a      	ldr	r2, [r3, #20]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006db8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68da      	ldr	r2, [r3, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006dc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	@ 0x28
 8006df4:	af02      	add	r7, sp, #8
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d175      	bne.n	8006efc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <HAL_UART_Transmit+0x2c>
 8006e16:	88fb      	ldrh	r3, [r7, #6]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e06e      	b.n	8006efe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2221      	movs	r2, #33	@ 0x21
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e2e:	f7fc fd57 	bl	80038e0 <HAL_GetTick>
 8006e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	88fa      	ldrh	r2, [r7, #6]
 8006e38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	88fa      	ldrh	r2, [r7, #6]
 8006e3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e48:	d108      	bne.n	8006e5c <HAL_UART_Transmit+0x6c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d104      	bne.n	8006e5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	e003      	b.n	8006e64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e64:	e02e      	b.n	8006ec4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	@ 0x80
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fb9b 	bl	80075ac <UART_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e03a      	b.n	8006efe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10b      	bne.n	8006ea6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	e007      	b.n	8006eb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	781a      	ldrb	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1cb      	bne.n	8006e66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2140      	movs	r1, #64	@ 0x40
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fb67 	bl	80075ac <UART_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e006      	b.n	8006efe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b08a      	sub	sp, #40	@ 0x28
 8006f0a:	af02      	add	r7, sp, #8
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	603b      	str	r3, [r7, #0]
 8006f12:	4613      	mov	r3, r2
 8006f14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	f040 8081 	bne.w	800702a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <HAL_UART_Receive+0x2e>
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e079      	b.n	800702c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2222      	movs	r2, #34	@ 0x22
 8006f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f4c:	f7fc fcc8 	bl	80038e0 <HAL_GetTick>
 8006f50:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	88fa      	ldrh	r2, [r7, #6]
 8006f56:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f66:	d108      	bne.n	8006f7a <HAL_UART_Receive+0x74>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d104      	bne.n	8006f7a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	e003      	b.n	8006f82 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006f82:	e047      	b.n	8007014 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2120      	movs	r1, #32
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fb0c 	bl	80075ac <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e042      	b.n	800702c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10c      	bne.n	8006fc6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	e01f      	b.n	8007006 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fce:	d007      	beq.n	8006fe0 <HAL_UART_Receive+0xda>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10a      	bne.n	8006fee <HAL_UART_Receive+0xe8>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d106      	bne.n	8006fee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	701a      	strb	r2, [r3, #0]
 8006fec:	e008      	b.n	8007000 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	3301      	adds	r3, #1
 8007004:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b01      	subs	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1b2      	bne.n	8006f84 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e000      	b.n	800702c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800702a:	2302      	movs	r3, #2
  }
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b0ba      	sub	sp, #232	@ 0xe8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800705a:	2300      	movs	r3, #0
 800705c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10f      	bne.n	800709a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_UART_IRQHandler+0x66>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fbc2 	bl	800781c <UART_Receive_IT>
      return;
 8007098:	e25b      	b.n	8007552 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800709a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80de 	beq.w	8007260 <HAL_UART_IRQHandler+0x22c>
 80070a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 80d1 	beq.w	8007260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00b      	beq.n	80070e2 <HAL_UART_IRQHandler+0xae>
 80070ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070da:	f043 0201 	orr.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <HAL_UART_IRQHandler+0xd2>
 80070ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	f043 0202 	orr.w	r2, r3, #2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_UART_IRQHandler+0xf6>
 8007112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007122:	f043 0204 	orr.w	r2, r3, #4
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d011      	beq.n	800715a <HAL_UART_IRQHandler+0x126>
 8007136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007152:	f043 0208 	orr.w	r2, r3, #8
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715e:	2b00      	cmp	r3, #0
 8007160:	f000 81f2 	beq.w	8007548 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007168:	f003 0320 	and.w	r3, r3, #32
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <HAL_UART_IRQHandler+0x14e>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fb4d 	bl	800781c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800718c:	2b40      	cmp	r3, #64	@ 0x40
 800718e:	bf0c      	ite	eq
 8007190:	2301      	moveq	r3, #1
 8007192:	2300      	movne	r3, #0
 8007194:	b2db      	uxtb	r3, r3
 8007196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <HAL_UART_IRQHandler+0x17a>
 80071a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d04f      	beq.n	800724e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa55 	bl	800765e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071be:	2b40      	cmp	r3, #64	@ 0x40
 80071c0:	d141      	bne.n	8007246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3314      	adds	r3, #20
 80071c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80071d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3314      	adds	r3, #20
 80071ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80071ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80071f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80071fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1d9      	bne.n	80071c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d013      	beq.n	800723e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721a:	4a7e      	ldr	r2, [pc, #504]	@ (8007414 <HAL_UART_IRQHandler+0x3e0>)
 800721c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007222:	4618      	mov	r0, r3
 8007224:	f7fc fcde 	bl	8003be4 <HAL_DMA_Abort_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d016      	beq.n	800725c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723c:	e00e      	b.n	800725c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f99e 	bl	8007580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	e00a      	b.n	800725c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f99a 	bl	8007580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e006      	b.n	800725c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f996 	bl	8007580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800725a:	e175      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	bf00      	nop
    return;
 800725e:	e173      	b.n	8007548 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007264:	2b01      	cmp	r3, #1
 8007266:	f040 814f 	bne.w	8007508 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 8148 	beq.w	8007508 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2b00      	cmp	r3, #0
 8007282:	f000 8141 	beq.w	8007508 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007286:	2300      	movs	r3, #0
 8007288:	60bb      	str	r3, [r7, #8]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60bb      	str	r3, [r7, #8]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a6:	2b40      	cmp	r3, #64	@ 0x40
 80072a8:	f040 80b6 	bne.w	8007418 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 8145 	beq.w	800754c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072ca:	429a      	cmp	r2, r3
 80072cc:	f080 813e 	bcs.w	800754c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e2:	f000 8088 	beq.w	80073f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	330c      	adds	r3, #12
 800730e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007312:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007316:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800731e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800732a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1d9      	bne.n	80072e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3314      	adds	r3, #20
 8007338:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007356:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800735a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800735e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e1      	bne.n	8007332 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3314      	adds	r3, #20
 8007374:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800737e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3314      	adds	r3, #20
 800738e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007394:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e3      	bne.n	800736e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2220      	movs	r2, #32
 80073aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073c6:	f023 0310 	bic.w	r3, r3, #16
 80073ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	330c      	adds	r3, #12
 80073d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80073d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80073da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073e0:	e841 2300 	strex	r3, r2, [r1]
 80073e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1e3      	bne.n	80073b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fc fb87 	bl	8003b04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007404:	b29b      	uxth	r3, r3
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	b29b      	uxth	r3, r3
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f8c1 	bl	8007594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007412:	e09b      	b.n	800754c <HAL_UART_IRQHandler+0x518>
 8007414:	08007725 	.word	0x08007725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007420:	b29b      	uxth	r3, r3
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 808e 	beq.w	8007550 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 8089 	beq.w	8007550 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	330c      	adds	r3, #12
 8007444:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007454:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007462:	647a      	str	r2, [r7, #68]	@ 0x44
 8007464:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e3      	bne.n	800743e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3314      	adds	r3, #20
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	623b      	str	r3, [r7, #32]
   return(result);
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3314      	adds	r3, #20
 8007496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800749a:	633a      	str	r2, [r7, #48]	@ 0x30
 800749c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e3      	bne.n	8007476 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	330c      	adds	r3, #12
 80074c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0310 	bic.w	r3, r3, #16
 80074d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80074e0:	61fa      	str	r2, [r7, #28]
 80074e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	69b9      	ldr	r1, [r7, #24]
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	617b      	str	r3, [r7, #20]
   return(result);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e3      	bne.n	80074bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f847 	bl	8007594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007506:	e023      	b.n	8007550 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800750c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <HAL_UART_IRQHandler+0x4f4>
 8007514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f913 	bl	800774c <UART_Transmit_IT>
    return;
 8007526:	e014      	b.n	8007552 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800752c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00e      	beq.n	8007552 <HAL_UART_IRQHandler+0x51e>
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753c:	2b00      	cmp	r3, #0
 800753e:	d008      	beq.n	8007552 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f953 	bl	80077ec <UART_EndTransmit_IT>
    return;
 8007546:	e004      	b.n	8007552 <HAL_UART_IRQHandler+0x51e>
    return;
 8007548:	bf00      	nop
 800754a:	e002      	b.n	8007552 <HAL_UART_IRQHandler+0x51e>
      return;
 800754c:	bf00      	nop
 800754e:	e000      	b.n	8007552 <HAL_UART_IRQHandler+0x51e>
      return;
 8007550:	bf00      	nop
  }
}
 8007552:	37e8      	adds	r7, #232	@ 0xe8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075bc:	e03b      	b.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c4:	d037      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c6:	f7fc f98b 	bl	80038e0 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	6a3a      	ldr	r2, [r7, #32]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d302      	bcc.n	80075dc <UART_WaitOnFlagUntilTimeout+0x30>
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e03a      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d023      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b80      	cmp	r3, #128	@ 0x80
 80075f2:	d020      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d01d      	beq.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b08      	cmp	r3, #8
 8007606:	d116      	bne.n	8007636 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f81d 	bl	800765e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2208      	movs	r2, #8
 8007628:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e00f      	b.n	8007656 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d0b4      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765e:	b480      	push	{r7}
 8007660:	b095      	sub	sp, #84	@ 0x54
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800767c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007686:	643a      	str	r2, [r7, #64]	@ 0x40
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800768c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	f023 0301 	bic.w	r3, r3, #1
 80076b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e5      	bne.n	800769a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d119      	bne.n	800770a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f023 0310 	bic.w	r3, r3, #16
 80076ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f6:	61ba      	str	r2, [r7, #24]
 80076f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	613b      	str	r3, [r7, #16]
   return(result);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2220      	movs	r2, #32
 800770e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007718:	bf00      	nop
 800771a:	3754      	adds	r7, #84	@ 0x54
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff1e 	bl	8007580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b21      	cmp	r3, #33	@ 0x21
 800775e:	d13e      	bne.n	80077de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007768:	d114      	bne.n	8007794 <UART_Transmit_IT+0x48>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d110      	bne.n	8007794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	1c9a      	adds	r2, r3, #2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	621a      	str	r2, [r3, #32]
 8007792:	e008      	b.n	80077a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	1c59      	adds	r1, r3, #1
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6211      	str	r1, [r2, #32]
 800779e:	781a      	ldrb	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	4619      	mov	r1, r3
 80077b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10f      	bne.n	80077da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e000      	b.n	80077e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077de:	2302      	movs	r3, #2
  }
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2220      	movs	r2, #32
 8007808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff fea3 	bl	8007558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08c      	sub	sp, #48	@ 0x30
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b22      	cmp	r3, #34	@ 0x22
 800782e:	f040 80ae 	bne.w	800798e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800783a:	d117      	bne.n	800786c <UART_Receive_IT+0x50>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d113      	bne.n	800786c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007844:	2300      	movs	r3, #0
 8007846:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785a:	b29a      	uxth	r2, r3
 800785c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007864:	1c9a      	adds	r2, r3, #2
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	629a      	str	r2, [r3, #40]	@ 0x28
 800786a:	e026      	b.n	80078ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007872:	2300      	movs	r3, #0
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787e:	d007      	beq.n	8007890 <UART_Receive_IT+0x74>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <UART_Receive_IT+0x82>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d106      	bne.n	800789e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e008      	b.n	80078b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	4619      	mov	r1, r3
 80078c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d15d      	bne.n	800798a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0220 	bic.w	r2, r2, #32
 80078dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	695a      	ldr	r2, [r3, #20]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2220      	movs	r2, #32
 8007902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007910:	2b01      	cmp	r3, #1
 8007912:	d135      	bne.n	8007980 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	330c      	adds	r3, #12
 8007920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	613b      	str	r3, [r7, #16]
   return(result);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f023 0310 	bic.w	r3, r3, #16
 8007930:	627b      	str	r3, [r7, #36]	@ 0x24
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	330c      	adds	r3, #12
 8007938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793a:	623a      	str	r2, [r7, #32]
 800793c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	69f9      	ldr	r1, [r7, #28]
 8007940:	6a3a      	ldr	r2, [r7, #32]
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	61bb      	str	r3, [r7, #24]
   return(result);
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e5      	bne.n	800791a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b10      	cmp	r3, #16
 800795a:	d10a      	bne.n	8007972 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fe0b 	bl	8007594 <HAL_UARTEx_RxEventCallback>
 800797e:	e002      	b.n	8007986 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fdf3 	bl	800756c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e002      	b.n	8007990 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	e000      	b.n	8007990 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800798e:	2302      	movs	r3, #2
  }
}
 8007990:	4618      	mov	r0, r3
 8007992:	3730      	adds	r7, #48	@ 0x30
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800799c:	b0c0      	sub	sp, #256	@ 0x100
 800799e:	af00      	add	r7, sp, #0
 80079a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80079b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b4:	68d9      	ldr	r1, [r3, #12]
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	ea40 0301 	orr.w	r3, r0, r1
 80079c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d4:	695b      	ldr	r3, [r3, #20]
 80079d6:	431a      	orrs	r2, r3
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079f0:	f021 010c 	bic.w	r1, r1, #12
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079fe:	430b      	orrs	r3, r1
 8007a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a12:	6999      	ldr	r1, [r3, #24]
 8007a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	ea40 0301 	orr.w	r3, r0, r1
 8007a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b8f      	ldr	r3, [pc, #572]	@ (8007c64 <UART_SetConfig+0x2cc>)
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d005      	beq.n	8007a38 <UART_SetConfig+0xa0>
 8007a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b8d      	ldr	r3, [pc, #564]	@ (8007c68 <UART_SetConfig+0x2d0>)
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d104      	bne.n	8007a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a38:	f7fe fe1a 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 8007a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a40:	e003      	b.n	8007a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a42:	f7fe fe01 	bl	8006648 <HAL_RCC_GetPCLK1Freq>
 8007a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a54:	f040 810c 	bne.w	8007c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	1891      	adds	r1, r2, r2
 8007a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a72:	415b      	adcs	r3, r3
 8007a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	eb12 0801 	adds.w	r8, r2, r1
 8007a80:	4629      	mov	r1, r5
 8007a82:	eb43 0901 	adc.w	r9, r3, r1
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a9a:	4690      	mov	r8, r2
 8007a9c:	4699      	mov	r9, r3
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	eb18 0303 	adds.w	r3, r8, r3
 8007aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	eb49 0303 	adc.w	r3, r9, r3
 8007aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	18db      	adds	r3, r3, r3
 8007aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8007acc:	4613      	mov	r3, r2
 8007ace:	eb42 0303 	adc.w	r3, r2, r3
 8007ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007adc:	f7f9 f8d4 	bl	8000c88 <__aeabi_uldivmod>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4b61      	ldr	r3, [pc, #388]	@ (8007c6c <UART_SetConfig+0x2d4>)
 8007ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	011c      	lsls	r4, r3, #4
 8007aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	1891      	adds	r1, r2, r2
 8007b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b08:	415b      	adcs	r3, r3
 8007b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b10:	4641      	mov	r1, r8
 8007b12:	eb12 0a01 	adds.w	sl, r2, r1
 8007b16:	4649      	mov	r1, r9
 8007b18:	eb43 0b01 	adc.w	fp, r3, r1
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b30:	4692      	mov	sl, r2
 8007b32:	469b      	mov	fp, r3
 8007b34:	4643      	mov	r3, r8
 8007b36:	eb1a 0303 	adds.w	r3, sl, r3
 8007b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b3e:	464b      	mov	r3, r9
 8007b40:	eb4b 0303 	adc.w	r3, fp, r3
 8007b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	18db      	adds	r3, r3, r3
 8007b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b62:	4613      	mov	r3, r2
 8007b64:	eb42 0303 	adc.w	r3, r2, r3
 8007b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b72:	f7f9 f889 	bl	8000c88 <__aeabi_uldivmod>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007c6c <UART_SetConfig+0x2d4>)
 8007b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	2264      	movs	r2, #100	@ 0x64
 8007b86:	fb02 f303 	mul.w	r3, r2, r3
 8007b8a:	1acb      	subs	r3, r1, r3
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b92:	4b36      	ldr	r3, [pc, #216]	@ (8007c6c <UART_SetConfig+0x2d4>)
 8007b94:	fba3 2302 	umull	r2, r3, r3, r2
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	005b      	lsls	r3, r3, #1
 8007b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ba0:	441c      	add	r4, r3
 8007ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	1891      	adds	r1, r2, r2
 8007bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007bbc:	415b      	adcs	r3, r3
 8007bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007bc4:	4641      	mov	r1, r8
 8007bc6:	1851      	adds	r1, r2, r1
 8007bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8007bca:	4649      	mov	r1, r9
 8007bcc:	414b      	adcs	r3, r1
 8007bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bdc:	4659      	mov	r1, fp
 8007bde:	00cb      	lsls	r3, r1, #3
 8007be0:	4651      	mov	r1, sl
 8007be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007be6:	4651      	mov	r1, sl
 8007be8:	00ca      	lsls	r2, r1, #3
 8007bea:	4610      	mov	r0, r2
 8007bec:	4619      	mov	r1, r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	189b      	adds	r3, r3, r2
 8007bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	460a      	mov	r2, r1
 8007bfc:	eb42 0303 	adc.w	r3, r2, r3
 8007c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c18:	460b      	mov	r3, r1
 8007c1a:	18db      	adds	r3, r3, r3
 8007c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c1e:	4613      	mov	r3, r2
 8007c20:	eb42 0303 	adc.w	r3, r2, r3
 8007c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c2e:	f7f9 f82b 	bl	8000c88 <__aeabi_uldivmod>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	4b0d      	ldr	r3, [pc, #52]	@ (8007c6c <UART_SetConfig+0x2d4>)
 8007c38:	fba3 1302 	umull	r1, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	2164      	movs	r1, #100	@ 0x64
 8007c40:	fb01 f303 	mul.w	r3, r1, r3
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	3332      	adds	r3, #50	@ 0x32
 8007c4a:	4a08      	ldr	r2, [pc, #32]	@ (8007c6c <UART_SetConfig+0x2d4>)
 8007c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c50:	095b      	lsrs	r3, r3, #5
 8007c52:	f003 0207 	and.w	r2, r3, #7
 8007c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4422      	add	r2, r4
 8007c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c60:	e106      	b.n	8007e70 <UART_SetConfig+0x4d8>
 8007c62:	bf00      	nop
 8007c64:	40011000 	.word	0x40011000
 8007c68:	40011400 	.word	0x40011400
 8007c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c82:	4642      	mov	r2, r8
 8007c84:	464b      	mov	r3, r9
 8007c86:	1891      	adds	r1, r2, r2
 8007c88:	6239      	str	r1, [r7, #32]
 8007c8a:	415b      	adcs	r3, r3
 8007c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c92:	4641      	mov	r1, r8
 8007c94:	1854      	adds	r4, r2, r1
 8007c96:	4649      	mov	r1, r9
 8007c98:	eb43 0501 	adc.w	r5, r3, r1
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	00eb      	lsls	r3, r5, #3
 8007ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007caa:	00e2      	lsls	r2, r4, #3
 8007cac:	4614      	mov	r4, r2
 8007cae:	461d      	mov	r5, r3
 8007cb0:	4643      	mov	r3, r8
 8007cb2:	18e3      	adds	r3, r4, r3
 8007cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cb8:	464b      	mov	r3, r9
 8007cba:	eb45 0303 	adc.w	r3, r5, r3
 8007cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	f04f 0300 	mov.w	r3, #0
 8007cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cde:	4629      	mov	r1, r5
 8007ce0:	008b      	lsls	r3, r1, #2
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ce8:	4621      	mov	r1, r4
 8007cea:	008a      	lsls	r2, r1, #2
 8007cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cf0:	f7f8 ffca 	bl	8000c88 <__aeabi_uldivmod>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4b60      	ldr	r3, [pc, #384]	@ (8007e7c <UART_SetConfig+0x4e4>)
 8007cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	011c      	lsls	r4, r3, #4
 8007d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d14:	4642      	mov	r2, r8
 8007d16:	464b      	mov	r3, r9
 8007d18:	1891      	adds	r1, r2, r2
 8007d1a:	61b9      	str	r1, [r7, #24]
 8007d1c:	415b      	adcs	r3, r3
 8007d1e:	61fb      	str	r3, [r7, #28]
 8007d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d24:	4641      	mov	r1, r8
 8007d26:	1851      	adds	r1, r2, r1
 8007d28:	6139      	str	r1, [r7, #16]
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	414b      	adcs	r3, r1
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d3c:	4659      	mov	r1, fp
 8007d3e:	00cb      	lsls	r3, r1, #3
 8007d40:	4651      	mov	r1, sl
 8007d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d46:	4651      	mov	r1, sl
 8007d48:	00ca      	lsls	r2, r1, #3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	4603      	mov	r3, r0
 8007d50:	4642      	mov	r2, r8
 8007d52:	189b      	adds	r3, r3, r2
 8007d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d58:	464b      	mov	r3, r9
 8007d5a:	460a      	mov	r2, r1
 8007d5c:	eb42 0303 	adc.w	r3, r2, r3
 8007d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	008b      	lsls	r3, r1, #2
 8007d80:	4641      	mov	r1, r8
 8007d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d86:	4641      	mov	r1, r8
 8007d88:	008a      	lsls	r2, r1, #2
 8007d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d8e:	f7f8 ff7b 	bl	8000c88 <__aeabi_uldivmod>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	4b38      	ldr	r3, [pc, #224]	@ (8007e7c <UART_SetConfig+0x4e4>)
 8007d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	2264      	movs	r2, #100	@ 0x64
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	1acb      	subs	r3, r1, r3
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	3332      	adds	r3, #50	@ 0x32
 8007dac:	4a33      	ldr	r2, [pc, #204]	@ (8007e7c <UART_SetConfig+0x4e4>)
 8007dae:	fba2 2303 	umull	r2, r3, r2, r3
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007db8:	441c      	add	r4, r3
 8007dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8007dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007dc8:	4642      	mov	r2, r8
 8007dca:	464b      	mov	r3, r9
 8007dcc:	1891      	adds	r1, r2, r2
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	415b      	adcs	r3, r3
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dd8:	4641      	mov	r1, r8
 8007dda:	1851      	adds	r1, r2, r1
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	4649      	mov	r1, r9
 8007de0:	414b      	adcs	r3, r1
 8007de2:	607b      	str	r3, [r7, #4]
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007df0:	4659      	mov	r1, fp
 8007df2:	00cb      	lsls	r3, r1, #3
 8007df4:	4651      	mov	r1, sl
 8007df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	00ca      	lsls	r2, r1, #3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	4619      	mov	r1, r3
 8007e02:	4603      	mov	r3, r0
 8007e04:	4642      	mov	r2, r8
 8007e06:	189b      	adds	r3, r3, r2
 8007e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e0a:	464b      	mov	r3, r9
 8007e0c:	460a      	mov	r2, r1
 8007e0e:	eb42 0303 	adc.w	r3, r2, r3
 8007e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e20:	f04f 0200 	mov.w	r2, #0
 8007e24:	f04f 0300 	mov.w	r3, #0
 8007e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	008b      	lsls	r3, r1, #2
 8007e30:	4641      	mov	r1, r8
 8007e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e36:	4641      	mov	r1, r8
 8007e38:	008a      	lsls	r2, r1, #2
 8007e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e3e:	f7f8 ff23 	bl	8000c88 <__aeabi_uldivmod>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	4b0d      	ldr	r3, [pc, #52]	@ (8007e7c <UART_SetConfig+0x4e4>)
 8007e48:	fba3 1302 	umull	r1, r3, r3, r2
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	2164      	movs	r1, #100	@ 0x64
 8007e50:	fb01 f303 	mul.w	r3, r1, r3
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	011b      	lsls	r3, r3, #4
 8007e58:	3332      	adds	r3, #50	@ 0x32
 8007e5a:	4a08      	ldr	r2, [pc, #32]	@ (8007e7c <UART_SetConfig+0x4e4>)
 8007e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e60:	095b      	lsrs	r3, r3, #5
 8007e62:	f003 020f 	and.w	r2, r3, #15
 8007e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4422      	add	r2, r4
 8007e6e:	609a      	str	r2, [r3, #8]
}
 8007e70:	bf00      	nop
 8007e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e76:	46bd      	mov	sp, r7
 8007e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e7c:	51eb851f 	.word	0x51eb851f

08007e80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f043 0201 	orr.w	r2, r3, #1
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f023 0201 	bic.w	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ede:	d901      	bls.n	8007ee4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e01b      	b.n	8007f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	daf2      	bge.n	8007ed2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	019b      	lsls	r3, r3, #6
 8007ef4:	f043 0220 	orr.w	r2, r3, #32
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3301      	adds	r3, #1
 8007f00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f08:	d901      	bls.n	8007f0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e006      	b.n	8007f1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d0f0      	beq.n	8007efc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f40:	d901      	bls.n	8007f46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e018      	b.n	8007f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	daf2      	bge.n	8007f34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2210      	movs	r2, #16
 8007f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f64:	d901      	bls.n	8007f6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e006      	b.n	8007f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	f003 0310 	and.w	r3, r3, #16
 8007f72:	2b10      	cmp	r3, #16
 8007f74:	d0f0      	beq.n	8007f58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b08b      	sub	sp, #44	@ 0x2c
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	089b      	lsrs	r3, r3, #2
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007fa2:	88fb      	ldrh	r3, [r7, #6]
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007faa:	2300      	movs	r3, #0
 8007fac:	623b      	str	r3, [r7, #32]
 8007fae:	e014      	b.n	8007fda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	601a      	str	r2, [r3, #0]
    pDest++;
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fca:	3301      	adds	r3, #1
 8007fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	623b      	str	r3, [r7, #32]
 8007fda:	6a3a      	ldr	r2, [r7, #32]
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d3e6      	bcc.n	8007fb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007fe2:	8bfb      	ldrh	r3, [r7, #30]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01e      	beq.n	8008026 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f107 0310 	add.w	r3, r7, #16
 8007ff8:	6812      	ldr	r2, [r2, #0]
 8007ffa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	fa22 f303 	lsr.w	r3, r2, r3
 8008008:	b2da      	uxtb	r2, r3
 800800a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800c:	701a      	strb	r2, [r3, #0]
      i++;
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	3301      	adds	r3, #1
 8008012:	623b      	str	r3, [r7, #32]
      pDest++;
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	3301      	adds	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800801a:	8bfb      	ldrh	r3, [r7, #30]
 800801c:	3b01      	subs	r3, #1
 800801e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008020:	8bfb      	ldrh	r3, [r7, #30]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1ea      	bne.n	8007ffc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008028:	4618      	mov	r0, r3
 800802a:	372c      	adds	r7, #44	@ 0x2c
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4013      	ands	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800804c:	68fb      	ldr	r3, [r7, #12]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	4013      	ands	r3, r2
 800808c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800808e:	68bb      	ldr	r3, [r7, #8]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	695b      	ldr	r3, [r3, #20]
 80080a8:	f003 0301 	and.w	r3, r3, #1
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80080f0:	4313      	orrs	r3, r2
 80080f2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d107      	bne.n	800810a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008100:	461a      	mov	r2, r3
 8008102:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008106:	6053      	str	r3, [r2, #4]
 8008108:	e00c      	b.n	8008124 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800810a:	78fb      	ldrb	r3, [r7, #3]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d107      	bne.n	8008120 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008116:	461a      	mov	r2, r3
 8008118:	f241 7370 	movw	r3, #6000	@ 0x1770
 800811c:	6053      	str	r3, [r2, #4]
 800811e:	e001      	b.n	8008124 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	b29b      	uxth	r3, r3
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008154:	b480      	push	{r7}
 8008156:	b089      	sub	sp, #36	@ 0x24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	4413      	add	r3, r2
 8008174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	0c9b      	lsrs	r3, r3, #18
 800817c:	f003 0303 	and.w	r3, r3, #3
 8008180:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	4413      	add	r3, r2
 800818a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	0fdb      	lsrs	r3, r3, #31
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	0fdb      	lsrs	r3, r3, #31
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d10d      	bne.n	80081d6 <USB_HC_Halt+0x82>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <USB_HC_Halt+0x82>
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d005      	beq.n	80081d2 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d002      	beq.n	80081d2 <USB_HC_Halt+0x7e>
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d101      	bne.n	80081d6 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e0d8      	b.n	8008388 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <USB_HC_Halt+0x8e>
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d173      	bne.n	80082ca <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	0151      	lsls	r1, r2, #5
 80081f4:	69fa      	ldr	r2, [r7, #28]
 80081f6:	440a      	add	r2, r1
 80081f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008200:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f003 0320 	and.w	r3, r3, #32
 800820a:	2b00      	cmp	r3, #0
 800820c:	d14a      	bne.n	80082a4 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d133      	bne.n	8008282 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	0151      	lsls	r1, r2, #5
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	440a      	add	r2, r1
 8008230:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008238:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	69fa      	ldr	r2, [r7, #28]
 800824e:	440a      	add	r2, r1
 8008250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008254:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008258:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	3301      	adds	r3, #1
 800825e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008266:	d82e      	bhi.n	80082c6 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	4413      	add	r3, r2
 8008270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800827a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800827e:	d0ec      	beq.n	800825a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008280:	e081      	b.n	8008386 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	440a      	add	r2, r1
 8008298:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800829c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082a2:	e070      	b.n	8008386 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082c2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082c4:	e05f      	b.n	8008386 <USB_HC_Halt+0x232>
            break;
 80082c6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082c8:	e05d      	b.n	8008386 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69ba      	ldr	r2, [r7, #24]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082e8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d133      	bne.n	8008362 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	440a      	add	r2, r1
 8008310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008314:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008318:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	015a      	lsls	r2, r3, #5
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	69ba      	ldr	r2, [r7, #24]
 800832a:	0151      	lsls	r1, r2, #5
 800832c:	69fa      	ldr	r2, [r7, #28]
 800832e:	440a      	add	r2, r1
 8008330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008334:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008338:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3301      	adds	r3, #1
 800833e:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008346:	d81d      	bhi.n	8008384 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800835a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800835e:	d0ec      	beq.n	800833a <USB_HC_Halt+0x1e6>
 8008360:	e011      	b.n	8008386 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	69fa      	ldr	r2, [r7, #28]
 8008376:	440a      	add	r2, r1
 8008378:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800837c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008380:	6013      	str	r3, [r2, #0]
 8008382:	e000      	b.n	8008386 <USB_HC_Halt+0x232>
          break;
 8008384:	bf00      	nop
    }
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3724      	adds	r7, #36	@ 0x24
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b088      	sub	sp, #32
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fd7a 	bl	8007ea2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083ae:	2110      	movs	r1, #16
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fd87 	bl	8007ec4 <USB_FlushTxFifo>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff fdb1 	bl	8007f28 <USB_FlushRxFifo>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	61bb      	str	r3, [r7, #24]
 80083d4:	e01f      	b.n	8008416 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	4413      	add	r3, r2
 8008406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800840a:	461a      	mov	r2, r3
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	3301      	adds	r3, #1
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	2b0f      	cmp	r3, #15
 800841a:	d9dc      	bls.n	80083d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800841c:	2300      	movs	r3, #0
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	e034      	b.n	800848c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	4413      	add	r3, r2
 800842a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008438:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008440:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008448:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	4413      	add	r3, r2
 8008452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008456:	461a      	mov	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	3301      	adds	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008468:	d80c      	bhi.n	8008484 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	015a      	lsls	r2, r3, #5
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	4413      	add	r3, r2
 8008472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800847c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008480:	d0ec      	beq.n	800845c <USB_StopHost+0xc8>
 8008482:	e000      	b.n	8008486 <USB_StopHost+0xf2>
        break;
 8008484:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	3301      	adds	r3, #1
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	2b0f      	cmp	r3, #15
 8008490:	d9c7      	bls.n	8008422 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008498:	461a      	mov	r2, r3
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f04f 32ff 	mov.w	r2, #4294967295
 80084a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fce9 	bl	8007e80 <USB_EnableGlobalInt>

  return ret;
 80084ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3720      	adds	r7, #32
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084c6:	1c5a      	adds	r2, r3, #1
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f804 	bl	80084dc <USBH_HandleSof>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b0b      	cmp	r3, #11
 80084ec:	d10a      	bne.n	8008504 <USBH_HandleSof+0x28>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d005      	beq.n	8008504 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	4798      	blx	r3
  }
}
 8008504:	bf00      	nop
 8008506:	3708      	adds	r7, #8
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008530:	2300      	movs	r3, #0
 8008532:	2200      	movs	r2, #0
 8008534:	f000 f9d8 	bl	80088e8 <osMessageQueuePut>
#endif
#endif

  return;
 8008538:	bf00      	nop
}
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008550:	bf00      	nop
}
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008590:	2300      	movs	r3, #0
 8008592:	2200      	movs	r2, #0
 8008594:	f000 f9a8 	bl	80088e8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f002 ff00 	bl	800b3c8 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	791b      	ldrb	r3, [r3, #4]
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f830 	bl	8008634 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	795b      	ldrb	r3, [r3, #5]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f82a 	bl	8008634 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085f4:	2300      	movs	r3, #0
 80085f6:	2200      	movs	r2, #0
 80085f8:	f000 f976 	bl	80088e8 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b082      	sub	sp, #8
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008622:	2300      	movs	r3, #0
 8008624:	2200      	movs	r2, #0
 8008626:	f000 f95f 	bl	80088e8 <osMessageQueuePut>
#endif

  return USBH_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	2b0f      	cmp	r3, #15
 8008644:	d80d      	bhi.n	8008662 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	33e0      	adds	r3, #224	@ 0xe0
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008658:	6879      	ldr	r1, [r7, #4]
 800865a:	33e0      	adds	r3, #224	@ 0xe0
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	440b      	add	r3, r1
 8008660:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <__NVIC_SetPriority>:
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	6039      	str	r1, [r7, #0]
 800867a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800867c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db0a      	blt.n	800869a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	490c      	ldr	r1, [pc, #48]	@ (80086bc <__NVIC_SetPriority+0x4c>)
 800868a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800868e:	0112      	lsls	r2, r2, #4
 8008690:	b2d2      	uxtb	r2, r2
 8008692:	440b      	add	r3, r1
 8008694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008698:	e00a      	b.n	80086b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	b2da      	uxtb	r2, r3
 800869e:	4908      	ldr	r1, [pc, #32]	@ (80086c0 <__NVIC_SetPriority+0x50>)
 80086a0:	79fb      	ldrb	r3, [r7, #7]
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	3b04      	subs	r3, #4
 80086a8:	0112      	lsls	r2, r2, #4
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	440b      	add	r3, r1
 80086ae:	761a      	strb	r2, [r3, #24]
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	e000e100 	.word	0xe000e100
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80086c8:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <SysTick_Handler+0x1c>)
 80086ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80086cc:	f001 fda6 	bl	800a21c <xTaskGetSchedulerState>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d001      	beq.n	80086da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80086d6:	f002 fb9f 	bl	800ae18 <xPortSysTickHandler>
  }
}
 80086da:	bf00      	nop
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	e000e010 	.word	0xe000e010

080086e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80086e8:	2100      	movs	r1, #0
 80086ea:	f06f 0004 	mvn.w	r0, #4
 80086ee:	f7ff ffbf 	bl	8008670 <__NVIC_SetPriority>
#endif
}
 80086f2:	bf00      	nop
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086fe:	f3ef 8305 	mrs	r3, IPSR
 8008702:	603b      	str	r3, [r7, #0]
  return(result);
 8008704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800870a:	f06f 0305 	mvn.w	r3, #5
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	e00c      	b.n	800872c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <osKernelInitialize+0x44>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d105      	bne.n	8008726 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800871a:	4b08      	ldr	r3, [pc, #32]	@ (800873c <osKernelInitialize+0x44>)
 800871c:	2201      	movs	r2, #1
 800871e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008720:	2300      	movs	r3, #0
 8008722:	607b      	str	r3, [r7, #4]
 8008724:	e002      	b.n	800872c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295
 800872a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800872c:	687b      	ldr	r3, [r7, #4]
}
 800872e:	4618      	mov	r0, r3
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	200003e4 	.word	0x200003e4

08008740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008746:	f3ef 8305 	mrs	r3, IPSR
 800874a:	603b      	str	r3, [r7, #0]
  return(result);
 800874c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008752:	f06f 0305 	mvn.w	r3, #5
 8008756:	607b      	str	r3, [r7, #4]
 8008758:	e010      	b.n	800877c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800875a:	4b0b      	ldr	r3, [pc, #44]	@ (8008788 <osKernelStart+0x48>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d109      	bne.n	8008776 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008762:	f7ff ffbf 	bl	80086e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008766:	4b08      	ldr	r3, [pc, #32]	@ (8008788 <osKernelStart+0x48>)
 8008768:	2202      	movs	r2, #2
 800876a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800876c:	f001 f8f2 	bl	8009954 <vTaskStartScheduler>
      stat = osOK;
 8008770:	2300      	movs	r3, #0
 8008772:	607b      	str	r3, [r7, #4]
 8008774:	e002      	b.n	800877c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008776:	f04f 33ff 	mov.w	r3, #4294967295
 800877a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800877c:	687b      	ldr	r3, [r7, #4]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200003e4 	.word	0x200003e4

0800878c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800878c:	b580      	push	{r7, lr}
 800878e:	b08e      	sub	sp, #56	@ 0x38
 8008790:	af04      	add	r7, sp, #16
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879c:	f3ef 8305 	mrs	r3, IPSR
 80087a0:	617b      	str	r3, [r7, #20]
  return(result);
 80087a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d17e      	bne.n	80088a6 <osThreadNew+0x11a>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d07b      	beq.n	80088a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80087ae:	2380      	movs	r3, #128	@ 0x80
 80087b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80087b2:	2318      	movs	r3, #24
 80087b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80087ba:	f04f 33ff 	mov.w	r3, #4294967295
 80087be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d045      	beq.n	8008852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <osThreadNew+0x48>
        name = attr->name;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d002      	beq.n	80087e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <osThreadNew+0x6e>
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2b38      	cmp	r3, #56	@ 0x38
 80087ec:	d805      	bhi.n	80087fa <osThreadNew+0x6e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <osThreadNew+0x72>
        return (NULL);
 80087fa:	2300      	movs	r3, #0
 80087fc:	e054      	b.n	80088a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	089b      	lsrs	r3, r3, #2
 800880c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00e      	beq.n	8008834 <osThreadNew+0xa8>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	2ba7      	cmp	r3, #167	@ 0xa7
 800881c:	d90a      	bls.n	8008834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008822:	2b00      	cmp	r3, #0
 8008824:	d006      	beq.n	8008834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <osThreadNew+0xa8>
        mem = 1;
 800882e:	2301      	movs	r3, #1
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	e010      	b.n	8008856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10c      	bne.n	8008856 <osThreadNew+0xca>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <osThreadNew+0xca>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d104      	bne.n	8008856 <osThreadNew+0xca>
          mem = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	e001      	b.n	8008856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d110      	bne.n	800887e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008864:	9202      	str	r2, [sp, #8]
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	6a3a      	ldr	r2, [r7, #32]
 8008870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fe7a 	bl	800956c <xTaskCreateStatic>
 8008878:	4603      	mov	r3, r0
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	e013      	b.n	80088a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d110      	bne.n	80088a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008884:	6a3b      	ldr	r3, [r7, #32]
 8008886:	b29a      	uxth	r2, r3
 8008888:	f107 0310 	add.w	r3, r7, #16
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	9300      	str	r3, [sp, #0]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fec8 	bl	800962c <xTaskCreate>
 800889c:	4603      	mov	r3, r0
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d001      	beq.n	80088a6 <osThreadNew+0x11a>
            hTask = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80088a6:	693b      	ldr	r3, [r7, #16]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3728      	adds	r7, #40	@ 0x28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b8:	f3ef 8305 	mrs	r3, IPSR
 80088bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80088be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <osDelay+0x1c>
    stat = osErrorISR;
 80088c4:	f06f 0305 	mvn.w	r3, #5
 80088c8:	60fb      	str	r3, [r7, #12]
 80088ca:	e007      	b.n	80088dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f806 	bl	80098e8 <vTaskDelay>
    }
  }

  return (stat);
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
	...

080088e8 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	60f8      	str	r0, [r7, #12]
 80088f0:	60b9      	str	r1, [r7, #8]
 80088f2:	603b      	str	r3, [r7, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008900:	f3ef 8305 	mrs	r3, IPSR
 8008904:	617b      	str	r3, [r7, #20]
  return(result);
 8008906:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008908:	2b00      	cmp	r3, #0
 800890a:	d028      	beq.n	800895e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d005      	beq.n	800891e <osMessageQueuePut+0x36>
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <osMessageQueuePut+0x36>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800891e:	f06f 0303 	mvn.w	r3, #3
 8008922:	61fb      	str	r3, [r7, #28]
 8008924:	e038      	b.n	8008998 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008926:	2300      	movs	r3, #0
 8008928:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800892a:	f107 0210 	add.w	r2, r7, #16
 800892e:	2300      	movs	r3, #0
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	69b8      	ldr	r0, [r7, #24]
 8008934:	f000 fb2c 	bl	8008f90 <xQueueGenericSendFromISR>
 8008938:	4603      	mov	r3, r0
 800893a:	2b01      	cmp	r3, #1
 800893c:	d003      	beq.n	8008946 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800893e:	f06f 0302 	mvn.w	r3, #2
 8008942:	61fb      	str	r3, [r7, #28]
 8008944:	e028      	b.n	8008998 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d025      	beq.n	8008998 <osMessageQueuePut+0xb0>
 800894c:	4b15      	ldr	r3, [pc, #84]	@ (80089a4 <osMessageQueuePut+0xbc>)
 800894e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	e01c      	b.n	8008998 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d002      	beq.n	800896a <osMessageQueuePut+0x82>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d103      	bne.n	8008972 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800896a:	f06f 0303 	mvn.w	r3, #3
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e012      	b.n	8008998 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008972:	2300      	movs	r3, #0
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	69b8      	ldr	r0, [r7, #24]
 800897a:	f000 fa07 	bl	8008d8c <xQueueGenericSend>
 800897e:	4603      	mov	r3, r0
 8008980:	2b01      	cmp	r3, #1
 8008982:	d009      	beq.n	8008998 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800898a:	f06f 0301 	mvn.w	r3, #1
 800898e:	61fb      	str	r3, [r7, #28]
 8008990:	e002      	b.n	8008998 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008992:	f06f 0302 	mvn.w	r3, #2
 8008996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008998:	69fb      	ldr	r3, [r7, #28]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3720      	adds	r7, #32
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a07      	ldr	r2, [pc, #28]	@ (80089d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80089b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4a06      	ldr	r2, [pc, #24]	@ (80089d8 <vApplicationGetIdleTaskMemory+0x30>)
 80089be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2280      	movs	r2, #128	@ 0x80
 80089c4:	601a      	str	r2, [r3, #0]
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	200003e8 	.word	0x200003e8
 80089d8:	20000490 	.word	0x20000490

080089dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a07      	ldr	r2, [pc, #28]	@ (8008a08 <vApplicationGetTimerTaskMemory+0x2c>)
 80089ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4a06      	ldr	r2, [pc, #24]	@ (8008a0c <vApplicationGetTimerTaskMemory+0x30>)
 80089f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089fa:	601a      	str	r2, [r3, #0]
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	20000690 	.word	0x20000690
 8008a0c:	20000738 	.word	0x20000738

08008a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f103 0208 	add.w	r2, r3, #8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f04f 32ff 	mov.w	r2, #4294967295
 8008a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f103 0208 	add.w	r2, r3, #8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f103 0208 	add.w	r2, r3, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b085      	sub	sp, #20
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	1c5a      	adds	r2, r3, #1
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	601a      	str	r2, [r3, #0]
}
 8008aa6:	bf00      	nop
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac8:	d103      	bne.n	8008ad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	e00c      	b.n	8008aec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	e002      	b.n	8008ae0 <vListInsert+0x2e>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d2f6      	bcs.n	8008ada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	601a      	str	r2, [r3, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6892      	ldr	r2, [r2, #8]
 8008b3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6852      	ldr	r2, [r2, #4]
 8008b44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d103      	bne.n	8008b58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	1e5a      	subs	r2, r3, #1
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10b      	bne.n	8008ba4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008b9e:	bf00      	nop
 8008ba0:	bf00      	nop
 8008ba2:	e7fd      	b.n	8008ba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008ba4:	f002 f8a8 	bl	800acf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bb0:	68f9      	ldr	r1, [r7, #12]
 8008bb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008bb4:	fb01 f303 	mul.w	r3, r1, r3
 8008bb8:	441a      	add	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	68f9      	ldr	r1, [r7, #12]
 8008bd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	441a      	add	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	22ff      	movs	r2, #255	@ 0xff
 8008be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	22ff      	movs	r2, #255	@ 0xff
 8008bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d114      	bne.n	8008c24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01a      	beq.n	8008c38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	3310      	adds	r3, #16
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 f942 	bl	8009e90 <xTaskRemoveFromEventList>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d012      	beq.n	8008c38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c12:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <xQueueGenericReset+0xd0>)
 8008c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	e009      	b.n	8008c38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3310      	adds	r3, #16
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff fef1 	bl	8008a10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3324      	adds	r3, #36	@ 0x24
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7ff feec 	bl	8008a10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c38:	f002 f890 	bl	800ad5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c3c:	2301      	movs	r3, #1
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	e000ed04 	.word	0xe000ed04

08008c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08e      	sub	sp, #56	@ 0x38
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10b      	bne.n	8008c78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c72:	bf00      	nop
 8008c74:	bf00      	nop
 8008c76:	e7fd      	b.n	8008c74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10b      	bne.n	8008c96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	e7fd      	b.n	8008c92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <xQueueGenericCreateStatic+0x56>
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <xQueueGenericCreateStatic+0x5a>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e000      	b.n	8008ca8 <xQueueGenericCreateStatic+0x5c>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10b      	bne.n	8008cc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	623b      	str	r3, [r7, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	bf00      	nop
 8008cc2:	e7fd      	b.n	8008cc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <xQueueGenericCreateStatic+0x84>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <xQueueGenericCreateStatic+0x88>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <xQueueGenericCreateStatic+0x8a>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	61fb      	str	r3, [r7, #28]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cf2:	2350      	movs	r3, #80	@ 0x50
 8008cf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b50      	cmp	r3, #80	@ 0x50
 8008cfa:	d00b      	beq.n	8008d14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	61bb      	str	r3, [r7, #24]
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00d      	beq.n	8008d3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4613      	mov	r3, r2
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 f805 	bl	8008d46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3730      	adds	r7, #48	@ 0x30
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d103      	bne.n	8008d62 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	e002      	b.n	8008d68 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d74:	2101      	movs	r1, #1
 8008d76:	69b8      	ldr	r0, [r7, #24]
 8008d78:	f7ff fefe 	bl	8008b78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	78fa      	ldrb	r2, [r7, #3]
 8008d80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d84:	bf00      	nop
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b08e      	sub	sp, #56	@ 0x38
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
 8008d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <xQueueGenericSend+0x34>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <xQueueGenericSend+0x42>
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d101      	bne.n	8008dd2 <xQueueGenericSend+0x46>
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e000      	b.n	8008dd4 <xQueueGenericSend+0x48>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10b      	bne.n	8008df0 <xQueueGenericSend+0x64>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	e7fd      	b.n	8008dec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d103      	bne.n	8008dfe <xQueueGenericSend+0x72>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <xQueueGenericSend+0x76>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e000      	b.n	8008e04 <xQueueGenericSend+0x78>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10b      	bne.n	8008e20 <xQueueGenericSend+0x94>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	623b      	str	r3, [r7, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e20:	f001 f9fc 	bl	800a21c <xTaskGetSchedulerState>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <xQueueGenericSend+0xa4>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <xQueueGenericSend+0xa8>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <xQueueGenericSend+0xaa>
 8008e34:	2300      	movs	r3, #0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10b      	bne.n	8008e52 <xQueueGenericSend+0xc6>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	61fb      	str	r3, [r7, #28]
}
 8008e4c:	bf00      	nop
 8008e4e:	bf00      	nop
 8008e50:	e7fd      	b.n	8008e4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e52:	f001 ff51 	bl	800acf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d302      	bcc.n	8008e68 <xQueueGenericSend+0xdc>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d129      	bne.n	8008ebc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e68:	683a      	ldr	r2, [r7, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e6e:	f000 fa0f 	bl	8009290 <prvCopyDataToQueue>
 8008e72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7e:	3324      	adds	r3, #36	@ 0x24
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f805 	bl	8009e90 <xTaskRemoveFromEventList>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d013      	beq.n	8008eb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8008f8c <xQueueGenericSend+0x200>)
 8008e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	e00a      	b.n	8008eb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ea4:	4b39      	ldr	r3, [pc, #228]	@ (8008f8c <xQueueGenericSend+0x200>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008eb4:	f001 ff52 	bl	800ad5c <vPortExitCritical>
				return pdPASS;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e063      	b.n	8008f84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d103      	bne.n	8008eca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ec2:	f001 ff4b 	bl	800ad5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	e05c      	b.n	8008f84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ed0:	f107 0314 	add.w	r3, r7, #20
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f001 f83f 	bl	8009f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ede:	f001 ff3d 	bl	800ad5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ee2:	f000 fda7 	bl	8009a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ee6:	f001 ff07 	bl	800acf8 <vPortEnterCritical>
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d103      	bne.n	8008f00 <xQueueGenericSend+0x174>
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f06:	b25b      	sxtb	r3, r3
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d103      	bne.n	8008f16 <xQueueGenericSend+0x18a>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f16:	f001 ff21 	bl	800ad5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f1a:	1d3a      	adds	r2, r7, #4
 8008f1c:	f107 0314 	add.w	r3, r7, #20
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 f82e 	bl	8009f84 <xTaskCheckForTimeOut>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d124      	bne.n	8008f78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f30:	f000 faa6 	bl	8009480 <prvIsQueueFull>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d018      	beq.n	8008f6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 ff52 	bl	8009dec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f4a:	f000 fa31 	bl	80093b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f4e:	f000 fd7f 	bl	8009a50 <xTaskResumeAll>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f47f af7c 	bne.w	8008e52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f8c <xQueueGenericSend+0x200>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	e772      	b.n	8008e52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f6e:	f000 fa1f 	bl	80093b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f72:	f000 fd6d 	bl	8009a50 <xTaskResumeAll>
 8008f76:	e76c      	b.n	8008e52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008f7a:	f000 fa19 	bl	80093b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f7e:	f000 fd67 	bl	8009a50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3738      	adds	r7, #56	@ 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	e000ed04 	.word	0xe000ed04

08008f90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b090      	sub	sp, #64	@ 0x40
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10b      	bne.n	8008fc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008fba:	bf00      	nop
 8008fbc:	bf00      	nop
 8008fbe:	e7fd      	b.n	8008fbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <xQueueGenericSendFromISR+0x3e>
 8008fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <xQueueGenericSendFromISR+0x42>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e000      	b.n	8008fd4 <xQueueGenericSendFromISR+0x44>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fdc:	f383 8811 	msr	BASEPRI, r3
 8008fe0:	f3bf 8f6f 	isb	sy
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
 8008fee:	e7fd      	b.n	8008fec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d103      	bne.n	8008ffe <xQueueGenericSendFromISR+0x6e>
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <xQueueGenericSendFromISR+0x72>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <xQueueGenericSendFromISR+0x74>
 8009002:	2300      	movs	r3, #0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10b      	bne.n	8009020 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	623b      	str	r3, [r7, #32]
}
 800901a:	bf00      	nop
 800901c:	bf00      	nop
 800901e:	e7fd      	b.n	800901c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009020:	f001 ff4a 	bl	800aeb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009024:	f3ef 8211 	mrs	r2, BASEPRI
 8009028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	61fa      	str	r2, [r7, #28]
 800903a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800903c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800903e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009042:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009048:	429a      	cmp	r2, r3
 800904a:	d302      	bcc.n	8009052 <xQueueGenericSendFromISR+0xc2>
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d12f      	bne.n	80090b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009054:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009058:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009060:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009068:	f000 f912 	bl	8009290 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800906c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d112      	bne.n	800909c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	d016      	beq.n	80090ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800907e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009080:	3324      	adds	r3, #36	@ 0x24
 8009082:	4618      	mov	r0, r3
 8009084:	f000 ff04 	bl	8009e90 <xTaskRemoveFromEventList>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00e      	beq.n	80090ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	e007      	b.n	80090ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800909c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80090a0:	3301      	adds	r3, #1
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	b25a      	sxtb	r2, r3
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80090ac:	2301      	movs	r3, #1
 80090ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80090b0:	e001      	b.n	80090b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3740      	adds	r7, #64	@ 0x40
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08c      	sub	sp, #48	@ 0x30
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090d8:	2300      	movs	r3, #0
 80090da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10b      	bne.n	80090fe <xQueueReceive+0x32>
	__asm volatile
 80090e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	623b      	str	r3, [r7, #32]
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	e7fd      	b.n	80090fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <xQueueReceive+0x40>
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <xQueueReceive+0x44>
 800910c:	2301      	movs	r3, #1
 800910e:	e000      	b.n	8009112 <xQueueReceive+0x46>
 8009110:	2300      	movs	r3, #0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10b      	bne.n	800912e <xQueueReceive+0x62>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	61fb      	str	r3, [r7, #28]
}
 8009128:	bf00      	nop
 800912a:	bf00      	nop
 800912c:	e7fd      	b.n	800912a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800912e:	f001 f875 	bl	800a21c <xTaskGetSchedulerState>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d102      	bne.n	800913e <xQueueReceive+0x72>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <xQueueReceive+0x76>
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <xQueueReceive+0x78>
 8009142:	2300      	movs	r3, #0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10b      	bne.n	8009160 <xQueueReceive+0x94>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	61bb      	str	r3, [r7, #24]
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	e7fd      	b.n	800915c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009160:	f001 fdca 	bl	800acf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009168:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800916a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01f      	beq.n	80091b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009174:	f000 f8f6 	bl	8009364 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917a:	1e5a      	subs	r2, r3, #1
 800917c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00f      	beq.n	80091a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800918a:	3310      	adds	r3, #16
 800918c:	4618      	mov	r0, r3
 800918e:	f000 fe7f 	bl	8009e90 <xTaskRemoveFromEventList>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009198:	4b3c      	ldr	r3, [pc, #240]	@ (800928c <xQueueReceive+0x1c0>)
 800919a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091a8:	f001 fdd8 	bl	800ad5c <vPortExitCritical>
				return pdPASS;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e069      	b.n	8009284 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d103      	bne.n	80091be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091b6:	f001 fdd1 	bl	800ad5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091ba:	2300      	movs	r3, #0
 80091bc:	e062      	b.n	8009284 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d106      	bne.n	80091d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091c4:	f107 0310 	add.w	r3, r7, #16
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fec5 	bl	8009f58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091ce:	2301      	movs	r3, #1
 80091d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091d2:	f001 fdc3 	bl	800ad5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091d6:	f000 fc2d 	bl	8009a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091da:	f001 fd8d 	bl	800acf8 <vPortEnterCritical>
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091e4:	b25b      	sxtb	r3, r3
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d103      	bne.n	80091f4 <xQueueReceive+0x128>
 80091ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009200:	d103      	bne.n	800920a <xQueueReceive+0x13e>
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800920a:	f001 fda7 	bl	800ad5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800920e:	1d3a      	adds	r2, r7, #4
 8009210:	f107 0310 	add.w	r3, r7, #16
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f000 feb4 	bl	8009f84 <xTaskCheckForTimeOut>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d123      	bne.n	800926a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009224:	f000 f916 	bl	8009454 <prvIsQueueEmpty>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d017      	beq.n	800925e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800922e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009230:	3324      	adds	r3, #36	@ 0x24
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	4611      	mov	r1, r2
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fdd8 	bl	8009dec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800923c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800923e:	f000 f8b7 	bl	80093b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009242:	f000 fc05 	bl	8009a50 <xTaskResumeAll>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d189      	bne.n	8009160 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800924c:	4b0f      	ldr	r3, [pc, #60]	@ (800928c <xQueueReceive+0x1c0>)
 800924e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	e780      	b.n	8009160 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800925e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009260:	f000 f8a6 	bl	80093b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009264:	f000 fbf4 	bl	8009a50 <xTaskResumeAll>
 8009268:	e77a      	b.n	8009160 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800926a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800926c:	f000 f8a0 	bl	80093b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009270:	f000 fbee 	bl	8009a50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009276:	f000 f8ed 	bl	8009454 <prvIsQueueEmpty>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	f43f af6f 	beq.w	8009160 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009282:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009284:	4618      	mov	r0, r3
 8009286:	3730      	adds	r7, #48	@ 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	e000ed04 	.word	0xe000ed04

08009290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800929c:	2300      	movs	r3, #0
 800929e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10d      	bne.n	80092ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d14d      	bne.n	8009352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f000 ffcc 	bl	800a258 <xTaskPriorityDisinherit>
 80092c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	609a      	str	r2, [r3, #8]
 80092c8:	e043      	b.n	8009352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d119      	bne.n	8009304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6858      	ldr	r0, [r3, #4]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d8:	461a      	mov	r2, r3
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	f003 fe9b 	bl	800d016 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e8:	441a      	add	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d32b      	bcc.n	8009352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	605a      	str	r2, [r3, #4]
 8009302:	e026      	b.n	8009352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	68d8      	ldr	r0, [r3, #12]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930c:	461a      	mov	r2, r3
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	f003 fe81 	bl	800d016 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931c:	425b      	negs	r3, r3
 800931e:	441a      	add	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	68da      	ldr	r2, [r3, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d207      	bcs.n	8009340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009338:	425b      	negs	r3, r3
 800933a:	441a      	add	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d105      	bne.n	8009352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3b01      	subs	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	1c5a      	adds	r2, r3, #1
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800935a:	697b      	ldr	r3, [r7, #20]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	2b00      	cmp	r3, #0
 8009374:	d018      	beq.n	80093a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	441a      	add	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68da      	ldr	r2, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	429a      	cmp	r2, r3
 800938e:	d303      	bcc.n	8009398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68d9      	ldr	r1, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a0:	461a      	mov	r2, r3
 80093a2:	6838      	ldr	r0, [r7, #0]
 80093a4:	f003 fe37 	bl	800d016 <memcpy>
	}
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093b8:	f001 fc9e 	bl	800acf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093c4:	e011      	b.n	80093ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d012      	beq.n	80093f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3324      	adds	r3, #36	@ 0x24
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fd5c 	bl	8009e90 <xTaskRemoveFromEventList>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d001      	beq.n	80093e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093de:	f000 fe35 	bl	800a04c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dce9      	bgt.n	80093c6 <prvUnlockQueue+0x16>
 80093f2:	e000      	b.n	80093f6 <prvUnlockQueue+0x46>
					break;
 80093f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	22ff      	movs	r2, #255	@ 0xff
 80093fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80093fe:	f001 fcad 	bl	800ad5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009402:	f001 fc79 	bl	800acf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800940c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800940e:	e011      	b.n	8009434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d012      	beq.n	800943e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3310      	adds	r3, #16
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fd37 	bl	8009e90 <xTaskRemoveFromEventList>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009428:	f000 fe10 	bl	800a04c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800942c:	7bbb      	ldrb	r3, [r7, #14]
 800942e:	3b01      	subs	r3, #1
 8009430:	b2db      	uxtb	r3, r3
 8009432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009438:	2b00      	cmp	r3, #0
 800943a:	dce9      	bgt.n	8009410 <prvUnlockQueue+0x60>
 800943c:	e000      	b.n	8009440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800943e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	22ff      	movs	r2, #255	@ 0xff
 8009444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009448:	f001 fc88 	bl	800ad5c <vPortExitCritical>
}
 800944c:	bf00      	nop
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800945c:	f001 fc4c 	bl	800acf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009468:	2301      	movs	r3, #1
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	e001      	b.n	8009472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009472:	f001 fc73 	bl	800ad5c <vPortExitCritical>

	return xReturn;
 8009476:	68fb      	ldr	r3, [r7, #12]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009488:	f001 fc36 	bl	800acf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009494:	429a      	cmp	r2, r3
 8009496:	d102      	bne.n	800949e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009498:	2301      	movs	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e001      	b.n	80094a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094a2:	f001 fc5b 	bl	800ad5c <vPortExitCritical>

	return xReturn;
 80094a6:	68fb      	ldr	r3, [r7, #12]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094ba:	2300      	movs	r3, #0
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	e014      	b.n	80094ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009500 <vQueueAddToRegistry+0x50>)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d10b      	bne.n	80094e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094cc:	490c      	ldr	r1, [pc, #48]	@ (8009500 <vQueueAddToRegistry+0x50>)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009500 <vQueueAddToRegistry+0x50>)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4413      	add	r3, r2
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094e2:	e006      	b.n	80094f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3301      	adds	r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2b07      	cmp	r3, #7
 80094ee:	d9e7      	bls.n	80094c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094f0:	bf00      	nop
 80094f2:	bf00      	nop
 80094f4:	3714      	adds	r7, #20
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	20000b38 	.word	0x20000b38

08009504 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009514:	f001 fbf0 	bl	800acf8 <vPortEnterCritical>
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800951e:	b25b      	sxtb	r3, r3
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d103      	bne.n	800952e <vQueueWaitForMessageRestricted+0x2a>
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009534:	b25b      	sxtb	r3, r3
 8009536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800953a:	d103      	bne.n	8009544 <vQueueWaitForMessageRestricted+0x40>
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009544:	f001 fc0a 	bl	800ad5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954c:	2b00      	cmp	r3, #0
 800954e:	d106      	bne.n	800955e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	3324      	adds	r3, #36	@ 0x24
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	68b9      	ldr	r1, [r7, #8]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fc6d 	bl	8009e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800955e:	6978      	ldr	r0, [r7, #20]
 8009560:	f7ff ff26 	bl	80093b0 <prvUnlockQueue>
	}
 8009564:	bf00      	nop
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800956c:	b580      	push	{r7, lr}
 800956e:	b08e      	sub	sp, #56	@ 0x38
 8009570:	af04      	add	r7, sp, #16
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
 8009578:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800957a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10b      	bne.n	8009598 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	623b      	str	r3, [r7, #32]
}
 8009592:	bf00      	nop
 8009594:	bf00      	nop
 8009596:	e7fd      	b.n	8009594 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10b      	bne.n	80095b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	61fb      	str	r3, [r7, #28]
}
 80095b0:	bf00      	nop
 80095b2:	bf00      	nop
 80095b4:	e7fd      	b.n	80095b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095b6:	23a8      	movs	r3, #168	@ 0xa8
 80095b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2ba8      	cmp	r3, #168	@ 0xa8
 80095be:	d00b      	beq.n	80095d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	61bb      	str	r3, [r7, #24]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01e      	beq.n	800961e <xTaskCreateStatic+0xb2>
 80095e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d01b      	beq.n	800961e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f2:	2202      	movs	r2, #2
 80095f4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095f8:	2300      	movs	r3, #0
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fe:	9302      	str	r3, [sp, #8]
 8009600:	f107 0314 	add.w	r3, r7, #20
 8009604:	9301      	str	r3, [sp, #4]
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	68b9      	ldr	r1, [r7, #8]
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 f851 	bl	80096b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009616:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009618:	f000 f8f6 	bl	8009808 <prvAddNewTaskToReadyList>
 800961c:	e001      	b.n	8009622 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009622:	697b      	ldr	r3, [r7, #20]
	}
 8009624:	4618      	mov	r0, r3
 8009626:	3728      	adds	r7, #40	@ 0x28
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08c      	sub	sp, #48	@ 0x30
 8009630:	af04      	add	r7, sp, #16
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	4613      	mov	r3, r2
 800963a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800963c:	88fb      	ldrh	r3, [r7, #6]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fc7b 	bl	800af3c <pvPortMalloc>
 8009646:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00e      	beq.n	800966c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800964e:	20a8      	movs	r0, #168	@ 0xa8
 8009650:	f001 fc74 	bl	800af3c <pvPortMalloc>
 8009654:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	631a      	str	r2, [r3, #48]	@ 0x30
 8009662:	e005      	b.n	8009670 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009664:	6978      	ldr	r0, [r7, #20]
 8009666:	f001 fd37 	bl	800b0d8 <vPortFree>
 800966a:	e001      	b.n	8009670 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800966c:	2300      	movs	r3, #0
 800966e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d017      	beq.n	80096a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800967e:	88fa      	ldrh	r2, [r7, #6]
 8009680:	2300      	movs	r3, #0
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	9302      	str	r3, [sp, #8]
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	9301      	str	r3, [sp, #4]
 800968c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 f80f 	bl	80096b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800969a:	69f8      	ldr	r0, [r7, #28]
 800969c:	f000 f8b4 	bl	8009808 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096a0:	2301      	movs	r3, #1
 80096a2:	61bb      	str	r3, [r7, #24]
 80096a4:	e002      	b.n	80096ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
 80096aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096ac:	69bb      	ldr	r3, [r7, #24]
	}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
	...

080096b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	461a      	mov	r2, r3
 80096d0:	21a5      	movs	r1, #165	@ 0xa5
 80096d2:	f003 fb5c 	bl	800cd8e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096e0:	3b01      	subs	r3, #1
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4413      	add	r3, r2
 80096e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096f0:	69bb      	ldr	r3, [r7, #24]
 80096f2:	f003 0307 	and.w	r3, r3, #7
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00b      	beq.n	8009712 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	617b      	str	r3, [r7, #20]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01f      	beq.n	8009758 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009718:	2300      	movs	r3, #0
 800971a:	61fb      	str	r3, [r7, #28]
 800971c:	e012      	b.n	8009744 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	7819      	ldrb	r1, [r3, #0]
 8009726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	4413      	add	r3, r2
 800972c:	3334      	adds	r3, #52	@ 0x34
 800972e:	460a      	mov	r2, r1
 8009730:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	4413      	add	r3, r2
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d006      	beq.n	800974c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	3301      	adds	r3, #1
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	2b0f      	cmp	r3, #15
 8009748:	d9e9      	bls.n	800971e <prvInitialiseNewTask+0x66>
 800974a:	e000      	b.n	800974e <prvInitialiseNewTask+0x96>
			{
				break;
 800974c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009756:	e003      	b.n	8009760 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	2b37      	cmp	r3, #55	@ 0x37
 8009764:	d901      	bls.n	800976a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009766:	2337      	movs	r3, #55	@ 0x37
 8009768:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800976a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009774:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	2200      	movs	r2, #0
 800977a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800977c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977e:	3304      	adds	r3, #4
 8009780:	4618      	mov	r0, r3
 8009782:	f7ff f965 	bl	8008a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	3318      	adds	r3, #24
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff f960 	bl	8008a50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009794:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	3354      	adds	r3, #84	@ 0x54
 80097ba:	224c      	movs	r2, #76	@ 0x4c
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f003 fae5 	bl	800cd8e <memset>
 80097c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c6:	4a0d      	ldr	r2, [pc, #52]	@ (80097fc <prvInitialiseNewTask+0x144>)
 80097c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80097ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <prvInitialiseNewTask+0x148>)
 80097ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80097d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009804 <prvInitialiseNewTask+0x14c>)
 80097d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	68f9      	ldr	r1, [r7, #12]
 80097da:	69b8      	ldr	r0, [r7, #24]
 80097dc:	f001 f95a 	bl	800aa94 <pxPortInitialiseStack>
 80097e0:	4602      	mov	r2, r0
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097f2:	bf00      	nop
 80097f4:	3720      	adds	r7, #32
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200051b8 	.word	0x200051b8
 8009800:	20005220 	.word	0x20005220
 8009804:	20005288 	.word	0x20005288

08009808 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009810:	f001 fa72 	bl	800acf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009814:	4b2d      	ldr	r3, [pc, #180]	@ (80098cc <prvAddNewTaskToReadyList+0xc4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	4a2c      	ldr	r2, [pc, #176]	@ (80098cc <prvAddNewTaskToReadyList+0xc4>)
 800981c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800981e:	4b2c      	ldr	r3, [pc, #176]	@ (80098d0 <prvAddNewTaskToReadyList+0xc8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d109      	bne.n	800983a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009826:	4a2a      	ldr	r2, [pc, #168]	@ (80098d0 <prvAddNewTaskToReadyList+0xc8>)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800982c:	4b27      	ldr	r3, [pc, #156]	@ (80098cc <prvAddNewTaskToReadyList+0xc4>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b01      	cmp	r3, #1
 8009832:	d110      	bne.n	8009856 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009834:	f000 fc2e 	bl	800a094 <prvInitialiseTaskLists>
 8009838:	e00d      	b.n	8009856 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800983a:	4b26      	ldr	r3, [pc, #152]	@ (80098d4 <prvAddNewTaskToReadyList+0xcc>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d109      	bne.n	8009856 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009842:	4b23      	ldr	r3, [pc, #140]	@ (80098d0 <prvAddNewTaskToReadyList+0xc8>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984c:	429a      	cmp	r2, r3
 800984e:	d802      	bhi.n	8009856 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009850:	4a1f      	ldr	r2, [pc, #124]	@ (80098d0 <prvAddNewTaskToReadyList+0xc8>)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009856:	4b20      	ldr	r3, [pc, #128]	@ (80098d8 <prvAddNewTaskToReadyList+0xd0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3301      	adds	r3, #1
 800985c:	4a1e      	ldr	r2, [pc, #120]	@ (80098d8 <prvAddNewTaskToReadyList+0xd0>)
 800985e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009860:	4b1d      	ldr	r3, [pc, #116]	@ (80098d8 <prvAddNewTaskToReadyList+0xd0>)
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800986c:	4b1b      	ldr	r3, [pc, #108]	@ (80098dc <prvAddNewTaskToReadyList+0xd4>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	429a      	cmp	r2, r3
 8009872:	d903      	bls.n	800987c <prvAddNewTaskToReadyList+0x74>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009878:	4a18      	ldr	r2, [pc, #96]	@ (80098dc <prvAddNewTaskToReadyList+0xd4>)
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4a15      	ldr	r2, [pc, #84]	@ (80098e0 <prvAddNewTaskToReadyList+0xd8>)
 800988a:	441a      	add	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	3304      	adds	r3, #4
 8009890:	4619      	mov	r1, r3
 8009892:	4610      	mov	r0, r2
 8009894:	f7ff f8e9 	bl	8008a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009898:	f001 fa60 	bl	800ad5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800989c:	4b0d      	ldr	r3, [pc, #52]	@ (80098d4 <prvAddNewTaskToReadyList+0xcc>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00e      	beq.n	80098c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098a4:	4b0a      	ldr	r3, [pc, #40]	@ (80098d0 <prvAddNewTaskToReadyList+0xc8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d207      	bcs.n	80098c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098b2:	4b0c      	ldr	r3, [pc, #48]	@ (80098e4 <prvAddNewTaskToReadyList+0xdc>)
 80098b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	2000104c 	.word	0x2000104c
 80098d0:	20000b78 	.word	0x20000b78
 80098d4:	20001058 	.word	0x20001058
 80098d8:	20001068 	.word	0x20001068
 80098dc:	20001054 	.word	0x20001054
 80098e0:	20000b7c 	.word	0x20000b7c
 80098e4:	e000ed04 	.word	0xe000ed04

080098e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d018      	beq.n	800992c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098fa:	4b14      	ldr	r3, [pc, #80]	@ (800994c <vTaskDelay+0x64>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <vTaskDelay+0x32>
	__asm volatile
 8009902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009906:	f383 8811 	msr	BASEPRI, r3
 800990a:	f3bf 8f6f 	isb	sy
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	60bb      	str	r3, [r7, #8]
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	e7fd      	b.n	8009916 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800991a:	f000 f88b 	bl	8009a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800991e:	2100      	movs	r1, #0
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fd09 	bl	800a338 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009926:	f000 f893 	bl	8009a50 <xTaskResumeAll>
 800992a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d107      	bne.n	8009942 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009932:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <vTaskDelay+0x68>)
 8009934:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	20001074 	.word	0x20001074
 8009950:	e000ed04 	.word	0xe000ed04

08009954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08a      	sub	sp, #40	@ 0x28
 8009958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009962:	463a      	mov	r2, r7
 8009964:	1d39      	adds	r1, r7, #4
 8009966:	f107 0308 	add.w	r3, r7, #8
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff f81c 	bl	80089a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009970:	6839      	ldr	r1, [r7, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	9202      	str	r2, [sp, #8]
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	2300      	movs	r3, #0
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	2300      	movs	r3, #0
 8009980:	460a      	mov	r2, r1
 8009982:	4924      	ldr	r1, [pc, #144]	@ (8009a14 <vTaskStartScheduler+0xc0>)
 8009984:	4824      	ldr	r0, [pc, #144]	@ (8009a18 <vTaskStartScheduler+0xc4>)
 8009986:	f7ff fdf1 	bl	800956c <xTaskCreateStatic>
 800998a:	4603      	mov	r3, r0
 800998c:	4a23      	ldr	r2, [pc, #140]	@ (8009a1c <vTaskStartScheduler+0xc8>)
 800998e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009990:	4b22      	ldr	r3, [pc, #136]	@ (8009a1c <vTaskStartScheduler+0xc8>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	e001      	b.n	80099a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d102      	bne.n	80099ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099a8:	f000 fd1a 	bl	800a3e0 <xTimerCreateTimerTask>
 80099ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d11b      	bne.n	80099ec <vTaskStartScheduler+0x98>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	613b      	str	r3, [r7, #16]
}
 80099c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099c8:	4b15      	ldr	r3, [pc, #84]	@ (8009a20 <vTaskStartScheduler+0xcc>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3354      	adds	r3, #84	@ 0x54
 80099ce:	4a15      	ldr	r2, [pc, #84]	@ (8009a24 <vTaskStartScheduler+0xd0>)
 80099d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099d2:	4b15      	ldr	r3, [pc, #84]	@ (8009a28 <vTaskStartScheduler+0xd4>)
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295
 80099d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099da:	4b14      	ldr	r3, [pc, #80]	@ (8009a2c <vTaskStartScheduler+0xd8>)
 80099dc:	2201      	movs	r2, #1
 80099de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099e0:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <vTaskStartScheduler+0xdc>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099e6:	f001 f8e3 	bl	800abb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099ea:	e00f      	b.n	8009a0c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f2:	d10b      	bne.n	8009a0c <vTaskStartScheduler+0xb8>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	60fb      	str	r3, [r7, #12]
}
 8009a06:	bf00      	nop
 8009a08:	bf00      	nop
 8009a0a:	e7fd      	b.n	8009a08 <vTaskStartScheduler+0xb4>
}
 8009a0c:	bf00      	nop
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	0800fa34 	.word	0x0800fa34
 8009a18:	0800a065 	.word	0x0800a065
 8009a1c:	20001070 	.word	0x20001070
 8009a20:	20000b78 	.word	0x20000b78
 8009a24:	20000188 	.word	0x20000188
 8009a28:	2000106c 	.word	0x2000106c
 8009a2c:	20001058 	.word	0x20001058
 8009a30:	20001050 	.word	0x20001050

08009a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a34:	b480      	push	{r7}
 8009a36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a38:	4b04      	ldr	r3, [pc, #16]	@ (8009a4c <vTaskSuspendAll+0x18>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	4a03      	ldr	r2, [pc, #12]	@ (8009a4c <vTaskSuspendAll+0x18>)
 8009a40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a42:	bf00      	nop
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	20001074 	.word	0x20001074

08009a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a5e:	4b42      	ldr	r3, [pc, #264]	@ (8009b68 <xTaskResumeAll+0x118>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <xTaskResumeAll+0x2e>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	603b      	str	r3, [r7, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a7e:	f001 f93b 	bl	800acf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a82:	4b39      	ldr	r3, [pc, #228]	@ (8009b68 <xTaskResumeAll+0x118>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	4a37      	ldr	r2, [pc, #220]	@ (8009b68 <xTaskResumeAll+0x118>)
 8009a8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a8c:	4b36      	ldr	r3, [pc, #216]	@ (8009b68 <xTaskResumeAll+0x118>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d162      	bne.n	8009b5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a94:	4b35      	ldr	r3, [pc, #212]	@ (8009b6c <xTaskResumeAll+0x11c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d05e      	beq.n	8009b5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a9c:	e02f      	b.n	8009afe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9e:	4b34      	ldr	r3, [pc, #208]	@ (8009b70 <xTaskResumeAll+0x120>)
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3318      	adds	r3, #24
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff f83a 	bl	8008b24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7ff f835 	bl	8008b24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	4b2d      	ldr	r3, [pc, #180]	@ (8009b74 <xTaskResumeAll+0x124>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d903      	bls.n	8009ace <xTaskResumeAll+0x7e>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aca:	4a2a      	ldr	r2, [pc, #168]	@ (8009b74 <xTaskResumeAll+0x124>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4a27      	ldr	r2, [pc, #156]	@ (8009b78 <xTaskResumeAll+0x128>)
 8009adc:	441a      	add	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	f7fe ffc0 	bl	8008a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aee:	4b23      	ldr	r3, [pc, #140]	@ (8009b7c <xTaskResumeAll+0x12c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d302      	bcc.n	8009afe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009af8:	4b21      	ldr	r3, [pc, #132]	@ (8009b80 <xTaskResumeAll+0x130>)
 8009afa:	2201      	movs	r2, #1
 8009afc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009afe:	4b1c      	ldr	r3, [pc, #112]	@ (8009b70 <xTaskResumeAll+0x120>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1cb      	bne.n	8009a9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b0c:	f000 fb66 	bl	800a1dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b10:	4b1c      	ldr	r3, [pc, #112]	@ (8009b84 <xTaskResumeAll+0x134>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d010      	beq.n	8009b3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b1c:	f000 f846 	bl	8009bac <xTaskIncrementTick>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b26:	4b16      	ldr	r3, [pc, #88]	@ (8009b80 <xTaskResumeAll+0x130>)
 8009b28:	2201      	movs	r2, #1
 8009b2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1f1      	bne.n	8009b1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009b38:	4b12      	ldr	r3, [pc, #72]	@ (8009b84 <xTaskResumeAll+0x134>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b3e:	4b10      	ldr	r3, [pc, #64]	@ (8009b80 <xTaskResumeAll+0x130>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d009      	beq.n	8009b5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b46:	2301      	movs	r3, #1
 8009b48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b88 <xTaskResumeAll+0x138>)
 8009b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b5a:	f001 f8ff 	bl	800ad5c <vPortExitCritical>

	return xAlreadyYielded;
 8009b5e:	68bb      	ldr	r3, [r7, #8]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20001074 	.word	0x20001074
 8009b6c:	2000104c 	.word	0x2000104c
 8009b70:	2000100c 	.word	0x2000100c
 8009b74:	20001054 	.word	0x20001054
 8009b78:	20000b7c 	.word	0x20000b7c
 8009b7c:	20000b78 	.word	0x20000b78
 8009b80:	20001060 	.word	0x20001060
 8009b84:	2000105c 	.word	0x2000105c
 8009b88:	e000ed04 	.word	0xe000ed04

08009b8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b92:	4b05      	ldr	r3, [pc, #20]	@ (8009ba8 <xTaskGetTickCount+0x1c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b98:	687b      	ldr	r3, [r7, #4]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20001050 	.word	0x20001050

08009bac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8009cf4 <xTaskIncrementTick+0x148>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 8090 	bne.w	8009ce0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8009cf8 <xTaskIncrementTick+0x14c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8009cf8 <xTaskIncrementTick+0x14c>)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d121      	bne.n	8009c18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bd4:	4b49      	ldr	r3, [pc, #292]	@ (8009cfc <xTaskIncrementTick+0x150>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be2:	f383 8811 	msr	BASEPRI, r3
 8009be6:	f3bf 8f6f 	isb	sy
 8009bea:	f3bf 8f4f 	dsb	sy
 8009bee:	603b      	str	r3, [r7, #0]
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop
 8009bf4:	e7fd      	b.n	8009bf2 <xTaskIncrementTick+0x46>
 8009bf6:	4b41      	ldr	r3, [pc, #260]	@ (8009cfc <xTaskIncrementTick+0x150>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	4b40      	ldr	r3, [pc, #256]	@ (8009d00 <xTaskIncrementTick+0x154>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a3e      	ldr	r2, [pc, #248]	@ (8009cfc <xTaskIncrementTick+0x150>)
 8009c02:	6013      	str	r3, [r2, #0]
 8009c04:	4a3e      	ldr	r2, [pc, #248]	@ (8009d00 <xTaskIncrementTick+0x154>)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009d04 <xTaskIncrementTick+0x158>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	4a3c      	ldr	r2, [pc, #240]	@ (8009d04 <xTaskIncrementTick+0x158>)
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	f000 fae2 	bl	800a1dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c18:	4b3b      	ldr	r3, [pc, #236]	@ (8009d08 <xTaskIncrementTick+0x15c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d349      	bcc.n	8009cb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c22:	4b36      	ldr	r3, [pc, #216]	@ (8009cfc <xTaskIncrementTick+0x150>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d104      	bne.n	8009c36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c2c:	4b36      	ldr	r3, [pc, #216]	@ (8009d08 <xTaskIncrementTick+0x15c>)
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c32:	601a      	str	r2, [r3, #0]
					break;
 8009c34:	e03f      	b.n	8009cb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c36:	4b31      	ldr	r3, [pc, #196]	@ (8009cfc <xTaskIncrementTick+0x150>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d203      	bcs.n	8009c56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8009d08 <xTaskIncrementTick+0x15c>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c54:	e02f      	b.n	8009cb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe ff62 	bl	8008b24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	3318      	adds	r3, #24
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe ff59 	bl	8008b24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c76:	4b25      	ldr	r3, [pc, #148]	@ (8009d0c <xTaskIncrementTick+0x160>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d903      	bls.n	8009c86 <xTaskIncrementTick+0xda>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c82:	4a22      	ldr	r2, [pc, #136]	@ (8009d0c <xTaskIncrementTick+0x160>)
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	4413      	add	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4a1f      	ldr	r2, [pc, #124]	@ (8009d10 <xTaskIncrementTick+0x164>)
 8009c94:	441a      	add	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	3304      	adds	r3, #4
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	f7fe fee4 	bl	8008a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8009d14 <xTaskIncrementTick+0x168>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d3b8      	bcc.n	8009c22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cb4:	e7b5      	b.n	8009c22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009cb6:	4b17      	ldr	r3, [pc, #92]	@ (8009d14 <xTaskIncrementTick+0x168>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbc:	4914      	ldr	r1, [pc, #80]	@ (8009d10 <xTaskIncrementTick+0x164>)
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	440b      	add	r3, r1
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d901      	bls.n	8009cd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009cd2:	4b11      	ldr	r3, [pc, #68]	@ (8009d18 <xTaskIncrementTick+0x16c>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d007      	beq.n	8009cea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	617b      	str	r3, [r7, #20]
 8009cde:	e004      	b.n	8009cea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8009d1c <xTaskIncrementTick+0x170>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8009d1c <xTaskIncrementTick+0x170>)
 8009ce8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cea:	697b      	ldr	r3, [r7, #20]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3718      	adds	r7, #24
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20001074 	.word	0x20001074
 8009cf8:	20001050 	.word	0x20001050
 8009cfc:	20001004 	.word	0x20001004
 8009d00:	20001008 	.word	0x20001008
 8009d04:	20001064 	.word	0x20001064
 8009d08:	2000106c 	.word	0x2000106c
 8009d0c:	20001054 	.word	0x20001054
 8009d10:	20000b7c 	.word	0x20000b7c
 8009d14:	20000b78 	.word	0x20000b78
 8009d18:	20001060 	.word	0x20001060
 8009d1c:	2000105c 	.word	0x2000105c

08009d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009d26:	4b2b      	ldr	r3, [pc, #172]	@ (8009dd4 <vTaskSwitchContext+0xb4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8009dd8 <vTaskSwitchContext+0xb8>)
 8009d30:	2201      	movs	r2, #1
 8009d32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d34:	e047      	b.n	8009dc6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009d36:	4b28      	ldr	r3, [pc, #160]	@ (8009dd8 <vTaskSwitchContext+0xb8>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3c:	4b27      	ldr	r3, [pc, #156]	@ (8009ddc <vTaskSwitchContext+0xbc>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e011      	b.n	8009d68 <vTaskSwitchContext+0x48>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10b      	bne.n	8009d62 <vTaskSwitchContext+0x42>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	607b      	str	r3, [r7, #4]
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	e7fd      	b.n	8009d5e <vTaskSwitchContext+0x3e>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	491d      	ldr	r1, [pc, #116]	@ (8009de0 <vTaskSwitchContext+0xc0>)
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d0e3      	beq.n	8009d44 <vTaskSwitchContext+0x24>
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4a16      	ldr	r2, [pc, #88]	@ (8009de0 <vTaskSwitchContext+0xc0>)
 8009d88:	4413      	add	r3, r2
 8009d8a:	60bb      	str	r3, [r7, #8]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	605a      	str	r2, [r3, #4]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	685a      	ldr	r2, [r3, #4]
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d104      	bne.n	8009dac <vTaskSwitchContext+0x8c>
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	605a      	str	r2, [r3, #4]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	4a0c      	ldr	r2, [pc, #48]	@ (8009de4 <vTaskSwitchContext+0xc4>)
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	4a09      	ldr	r2, [pc, #36]	@ (8009ddc <vTaskSwitchContext+0xbc>)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009dbc:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <vTaskSwitchContext+0xc4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3354      	adds	r3, #84	@ 0x54
 8009dc2:	4a09      	ldr	r2, [pc, #36]	@ (8009de8 <vTaskSwitchContext+0xc8>)
 8009dc4:	6013      	str	r3, [r2, #0]
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20001074 	.word	0x20001074
 8009dd8:	20001060 	.word	0x20001060
 8009ddc:	20001054 	.word	0x20001054
 8009de0:	20000b7c 	.word	0x20000b7c
 8009de4:	20000b78 	.word	0x20000b78
 8009de8:	20000188 	.word	0x20000188

08009dec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10b      	bne.n	8009e14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60fb      	str	r3, [r7, #12]
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	e7fd      	b.n	8009e10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e14:	4b07      	ldr	r3, [pc, #28]	@ (8009e34 <vTaskPlaceOnEventList+0x48>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3318      	adds	r3, #24
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7fe fe48 	bl	8008ab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e22:	2101      	movs	r1, #1
 8009e24:	6838      	ldr	r0, [r7, #0]
 8009e26:	f000 fa87 	bl	800a338 <prvAddCurrentTaskToDelayedList>
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000b78 	.word	0x20000b78

08009e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10b      	bne.n	8009e62 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	617b      	str	r3, [r7, #20]
}
 8009e5c:	bf00      	nop
 8009e5e:	bf00      	nop
 8009e60:	e7fd      	b.n	8009e5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e62:	4b0a      	ldr	r3, [pc, #40]	@ (8009e8c <vTaskPlaceOnEventListRestricted+0x54>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3318      	adds	r3, #24
 8009e68:	4619      	mov	r1, r3
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7fe fdfd 	bl	8008a6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d002      	beq.n	8009e7c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009e76:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	68b8      	ldr	r0, [r7, #8]
 8009e80:	f000 fa5a 	bl	800a338 <prvAddCurrentTaskToDelayedList>
	}
 8009e84:	bf00      	nop
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20000b78 	.word	0x20000b78

08009e90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10b      	bne.n	8009ebe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	60fb      	str	r3, [r7, #12]
}
 8009eb8:	bf00      	nop
 8009eba:	bf00      	nop
 8009ebc:	e7fd      	b.n	8009eba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	3318      	adds	r3, #24
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fe fe2e 	bl	8008b24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ec8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f40 <xTaskRemoveFromEventList+0xb0>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d11d      	bne.n	8009f0c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	3304      	adds	r3, #4
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fe fe25 	bl	8008b24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ede:	4b19      	ldr	r3, [pc, #100]	@ (8009f44 <xTaskRemoveFromEventList+0xb4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d903      	bls.n	8009eee <xTaskRemoveFromEventList+0x5e>
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eea:	4a16      	ldr	r2, [pc, #88]	@ (8009f44 <xTaskRemoveFromEventList+0xb4>)
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	4a13      	ldr	r2, [pc, #76]	@ (8009f48 <xTaskRemoveFromEventList+0xb8>)
 8009efc:	441a      	add	r2, r3
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	3304      	adds	r3, #4
 8009f02:	4619      	mov	r1, r3
 8009f04:	4610      	mov	r0, r2
 8009f06:	f7fe fdb0 	bl	8008a6a <vListInsertEnd>
 8009f0a:	e005      	b.n	8009f18 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	3318      	adds	r3, #24
 8009f10:	4619      	mov	r1, r3
 8009f12:	480e      	ldr	r0, [pc, #56]	@ (8009f4c <xTaskRemoveFromEventList+0xbc>)
 8009f14:	f7fe fda9 	bl	8008a6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8009f50 <xTaskRemoveFromEventList+0xc0>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d905      	bls.n	8009f32 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f26:	2301      	movs	r3, #1
 8009f28:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f54 <xTaskRemoveFromEventList+0xc4>)
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	e001      	b.n	8009f36 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009f36:	697b      	ldr	r3, [r7, #20]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3718      	adds	r7, #24
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20001074 	.word	0x20001074
 8009f44:	20001054 	.word	0x20001054
 8009f48:	20000b7c 	.word	0x20000b7c
 8009f4c:	2000100c 	.word	0x2000100c
 8009f50:	20000b78 	.word	0x20000b78
 8009f54:	20001060 	.word	0x20001060

08009f58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f60:	4b06      	ldr	r3, [pc, #24]	@ (8009f7c <vTaskInternalSetTimeOutState+0x24>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f68:	4b05      	ldr	r3, [pc, #20]	@ (8009f80 <vTaskInternalSetTimeOutState+0x28>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	605a      	str	r2, [r3, #4]
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	20001064 	.word	0x20001064
 8009f80:	20001050 	.word	0x20001050

08009f84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10b      	bne.n	8009fac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	613b      	str	r3, [r7, #16]
}
 8009fa6:	bf00      	nop
 8009fa8:	bf00      	nop
 8009faa:	e7fd      	b.n	8009fa8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10b      	bne.n	8009fca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	60fb      	str	r3, [r7, #12]
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	e7fd      	b.n	8009fc6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009fca:	f000 fe95 	bl	800acf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fce:	4b1d      	ldr	r3, [pc, #116]	@ (800a044 <xTaskCheckForTimeOut+0xc0>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	1ad3      	subs	r3, r2, r3
 8009fdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe6:	d102      	bne.n	8009fee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	e023      	b.n	800a036 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	4b15      	ldr	r3, [pc, #84]	@ (800a048 <xTaskCheckForTimeOut+0xc4>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d007      	beq.n	800a00a <xTaskCheckForTimeOut+0x86>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	429a      	cmp	r2, r3
 800a002:	d302      	bcc.n	800a00a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	e015      	b.n	800a036 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	429a      	cmp	r2, r3
 800a012:	d20b      	bcs.n	800a02c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	1ad2      	subs	r2, r2, r3
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7ff ff99 	bl	8009f58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a026:	2300      	movs	r3, #0
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	e004      	b.n	800a036 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a032:	2301      	movs	r3, #1
 800a034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a036:	f000 fe91 	bl	800ad5c <vPortExitCritical>

	return xReturn;
 800a03a:	69fb      	ldr	r3, [r7, #28]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3720      	adds	r7, #32
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	20001050 	.word	0x20001050
 800a048:	20001064 	.word	0x20001064

0800a04c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a050:	4b03      	ldr	r3, [pc, #12]	@ (800a060 <vTaskMissedYield+0x14>)
 800a052:	2201      	movs	r2, #1
 800a054:	601a      	str	r2, [r3, #0]
}
 800a056:	bf00      	nop
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	20001060 	.word	0x20001060

0800a064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a06c:	f000 f852 	bl	800a114 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a070:	4b06      	ldr	r3, [pc, #24]	@ (800a08c <prvIdleTask+0x28>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d9f9      	bls.n	800a06c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a078:	4b05      	ldr	r3, [pc, #20]	@ (800a090 <prvIdleTask+0x2c>)
 800a07a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a07e:	601a      	str	r2, [r3, #0]
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a088:	e7f0      	b.n	800a06c <prvIdleTask+0x8>
 800a08a:	bf00      	nop
 800a08c:	20000b7c 	.word	0x20000b7c
 800a090:	e000ed04 	.word	0xe000ed04

0800a094 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a09a:	2300      	movs	r3, #0
 800a09c:	607b      	str	r3, [r7, #4]
 800a09e:	e00c      	b.n	800a0ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4a12      	ldr	r2, [pc, #72]	@ (800a0f4 <prvInitialiseTaskLists+0x60>)
 800a0ac:	4413      	add	r3, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fcae 	bl	8008a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	607b      	str	r3, [r7, #4]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b37      	cmp	r3, #55	@ 0x37
 800a0be:	d9ef      	bls.n	800a0a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a0c0:	480d      	ldr	r0, [pc, #52]	@ (800a0f8 <prvInitialiseTaskLists+0x64>)
 800a0c2:	f7fe fca5 	bl	8008a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a0c6:	480d      	ldr	r0, [pc, #52]	@ (800a0fc <prvInitialiseTaskLists+0x68>)
 800a0c8:	f7fe fca2 	bl	8008a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a0cc:	480c      	ldr	r0, [pc, #48]	@ (800a100 <prvInitialiseTaskLists+0x6c>)
 800a0ce:	f7fe fc9f 	bl	8008a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a0d2:	480c      	ldr	r0, [pc, #48]	@ (800a104 <prvInitialiseTaskLists+0x70>)
 800a0d4:	f7fe fc9c 	bl	8008a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a0d8:	480b      	ldr	r0, [pc, #44]	@ (800a108 <prvInitialiseTaskLists+0x74>)
 800a0da:	f7fe fc99 	bl	8008a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a0de:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <prvInitialiseTaskLists+0x78>)
 800a0e0:	4a05      	ldr	r2, [pc, #20]	@ (800a0f8 <prvInitialiseTaskLists+0x64>)
 800a0e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <prvInitialiseTaskLists+0x7c>)
 800a0e6:	4a05      	ldr	r2, [pc, #20]	@ (800a0fc <prvInitialiseTaskLists+0x68>)
 800a0e8:	601a      	str	r2, [r3, #0]
}
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20000b7c 	.word	0x20000b7c
 800a0f8:	20000fdc 	.word	0x20000fdc
 800a0fc:	20000ff0 	.word	0x20000ff0
 800a100:	2000100c 	.word	0x2000100c
 800a104:	20001020 	.word	0x20001020
 800a108:	20001038 	.word	0x20001038
 800a10c:	20001004 	.word	0x20001004
 800a110:	20001008 	.word	0x20001008

0800a114 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a11a:	e019      	b.n	800a150 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a11c:	f000 fdec 	bl	800acf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a120:	4b10      	ldr	r3, [pc, #64]	@ (800a164 <prvCheckTasksWaitingTermination+0x50>)
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fe fcf9 	bl	8008b24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a132:	4b0d      	ldr	r3, [pc, #52]	@ (800a168 <prvCheckTasksWaitingTermination+0x54>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	3b01      	subs	r3, #1
 800a138:	4a0b      	ldr	r2, [pc, #44]	@ (800a168 <prvCheckTasksWaitingTermination+0x54>)
 800a13a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a13c:	4b0b      	ldr	r3, [pc, #44]	@ (800a16c <prvCheckTasksWaitingTermination+0x58>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3b01      	subs	r3, #1
 800a142:	4a0a      	ldr	r2, [pc, #40]	@ (800a16c <prvCheckTasksWaitingTermination+0x58>)
 800a144:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a146:	f000 fe09 	bl	800ad5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f810 	bl	800a170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a150:	4b06      	ldr	r3, [pc, #24]	@ (800a16c <prvCheckTasksWaitingTermination+0x58>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e1      	bne.n	800a11c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a158:	bf00      	nop
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	20001020 	.word	0x20001020
 800a168:	2000104c 	.word	0x2000104c
 800a16c:	20001034 	.word	0x20001034

0800a170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	3354      	adds	r3, #84	@ 0x54
 800a17c:	4618      	mov	r0, r3
 800a17e:	f002 fe65 	bl	800ce4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d108      	bne.n	800a19e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a190:	4618      	mov	r0, r3
 800a192:	f000 ffa1 	bl	800b0d8 <vPortFree>
				vPortFree( pxTCB );
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 ff9e 	bl	800b0d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a19c:	e019      	b.n	800a1d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d103      	bne.n	800a1b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 ff95 	bl	800b0d8 <vPortFree>
	}
 800a1ae:	e010      	b.n	800a1d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d00b      	beq.n	800a1d2 <prvDeleteTCB+0x62>
	__asm volatile
 800a1ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1be:	f383 8811 	msr	BASEPRI, r3
 800a1c2:	f3bf 8f6f 	isb	sy
 800a1c6:	f3bf 8f4f 	dsb	sy
 800a1ca:	60fb      	str	r3, [r7, #12]
}
 800a1cc:	bf00      	nop
 800a1ce:	bf00      	nop
 800a1d0:	e7fd      	b.n	800a1ce <prvDeleteTCB+0x5e>
	}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a214 <prvResetNextTaskUnblockTime+0x38>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d104      	bne.n	800a1f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a218 <prvResetNextTaskUnblockTime+0x3c>)
 800a1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a1f4:	e008      	b.n	800a208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1f6:	4b07      	ldr	r3, [pc, #28]	@ (800a214 <prvResetNextTaskUnblockTime+0x38>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	4a04      	ldr	r2, [pc, #16]	@ (800a218 <prvResetNextTaskUnblockTime+0x3c>)
 800a206:	6013      	str	r3, [r2, #0]
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	20001004 	.word	0x20001004
 800a218:	2000106c 	.word	0x2000106c

0800a21c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a222:	4b0b      	ldr	r3, [pc, #44]	@ (800a250 <xTaskGetSchedulerState+0x34>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a22a:	2301      	movs	r3, #1
 800a22c:	607b      	str	r3, [r7, #4]
 800a22e:	e008      	b.n	800a242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a230:	4b08      	ldr	r3, [pc, #32]	@ (800a254 <xTaskGetSchedulerState+0x38>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a238:	2302      	movs	r3, #2
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e001      	b.n	800a242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a23e:	2300      	movs	r3, #0
 800a240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a242:	687b      	ldr	r3, [r7, #4]
	}
 800a244:	4618      	mov	r0, r3
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	20001058 	.word	0x20001058
 800a254:	20001074 	.word	0x20001074

0800a258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b086      	sub	sp, #24
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d058      	beq.n	800a320 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a26e:	4b2f      	ldr	r3, [pc, #188]	@ (800a32c <xTaskPriorityDisinherit+0xd4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	693a      	ldr	r2, [r7, #16]
 800a274:	429a      	cmp	r2, r3
 800a276:	d00b      	beq.n	800a290 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60fb      	str	r3, [r7, #12]
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10b      	bne.n	800a2b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	60bb      	str	r3, [r7, #8]
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	e7fd      	b.n	800a2ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b4:	1e5a      	subs	r2, r3, #1
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d02c      	beq.n	800a320 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d128      	bne.n	800a320 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe fc26 	bl	8008b24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a330 <xTaskPriorityDisinherit+0xd8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d903      	bls.n	800a300 <xTaskPriorityDisinherit+0xa8>
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2fc:	4a0c      	ldr	r2, [pc, #48]	@ (800a330 <xTaskPriorityDisinherit+0xd8>)
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a304:	4613      	mov	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4a09      	ldr	r2, [pc, #36]	@ (800a334 <xTaskPriorityDisinherit+0xdc>)
 800a30e:	441a      	add	r2, r3
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	3304      	adds	r3, #4
 800a314:	4619      	mov	r1, r3
 800a316:	4610      	mov	r0, r2
 800a318:	f7fe fba7 	bl	8008a6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a31c:	2301      	movs	r3, #1
 800a31e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a320:	697b      	ldr	r3, [r7, #20]
	}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20000b78 	.word	0x20000b78
 800a330:	20001054 	.word	0x20001054
 800a334:	20000b7c 	.word	0x20000b7c

0800a338 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a342:	4b21      	ldr	r3, [pc, #132]	@ (800a3c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a348:	4b20      	ldr	r3, [pc, #128]	@ (800a3cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3304      	adds	r3, #4
 800a34e:	4618      	mov	r0, r3
 800a350:	f7fe fbe8 	bl	8008b24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d10a      	bne.n	800a372 <prvAddCurrentTaskToDelayedList+0x3a>
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d007      	beq.n	800a372 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a362:	4b1a      	ldr	r3, [pc, #104]	@ (800a3cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3304      	adds	r3, #4
 800a368:	4619      	mov	r1, r3
 800a36a:	4819      	ldr	r0, [pc, #100]	@ (800a3d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a36c:	f7fe fb7d 	bl	8008a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a370:	e026      	b.n	800a3c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a37a:	4b14      	ldr	r3, [pc, #80]	@ (800a3cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	429a      	cmp	r2, r3
 800a388:	d209      	bcs.n	800a39e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a38a:	4b12      	ldr	r3, [pc, #72]	@ (800a3d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	4b0f      	ldr	r3, [pc, #60]	@ (800a3cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f7fe fb8b 	bl	8008ab2 <vListInsert>
}
 800a39c:	e010      	b.n	800a3c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a39e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4610      	mov	r0, r2
 800a3ac:	f7fe fb81 	bl	8008ab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d202      	bcs.n	800a3c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3ba:	4a08      	ldr	r2, [pc, #32]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6013      	str	r3, [r2, #0]
}
 800a3c0:	bf00      	nop
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20001050 	.word	0x20001050
 800a3cc:	20000b78 	.word	0x20000b78
 800a3d0:	20001038 	.word	0x20001038
 800a3d4:	20001008 	.word	0x20001008
 800a3d8:	20001004 	.word	0x20001004
 800a3dc:	2000106c 	.word	0x2000106c

0800a3e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08a      	sub	sp, #40	@ 0x28
 800a3e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3ea:	f000 fb13 	bl	800aa14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a464 <xTimerCreateTimerTask+0x84>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d021      	beq.n	800a43a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3fe:	1d3a      	adds	r2, r7, #4
 800a400:	f107 0108 	add.w	r1, r7, #8
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fae7 	bl	80089dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	68fa      	ldr	r2, [r7, #12]
 800a414:	9202      	str	r2, [sp, #8]
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	2302      	movs	r3, #2
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	2300      	movs	r3, #0
 800a41e:	460a      	mov	r2, r1
 800a420:	4911      	ldr	r1, [pc, #68]	@ (800a468 <xTimerCreateTimerTask+0x88>)
 800a422:	4812      	ldr	r0, [pc, #72]	@ (800a46c <xTimerCreateTimerTask+0x8c>)
 800a424:	f7ff f8a2 	bl	800956c <xTaskCreateStatic>
 800a428:	4603      	mov	r3, r0
 800a42a:	4a11      	ldr	r2, [pc, #68]	@ (800a470 <xTimerCreateTimerTask+0x90>)
 800a42c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a42e:	4b10      	ldr	r3, [pc, #64]	@ (800a470 <xTimerCreateTimerTask+0x90>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a436:	2301      	movs	r3, #1
 800a438:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10b      	bne.n	800a458 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	613b      	str	r3, [r7, #16]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a458:	697b      	ldr	r3, [r7, #20]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	200010a8 	.word	0x200010a8
 800a468:	0800fa3c 	.word	0x0800fa3c
 800a46c:	0800a5ad 	.word	0x0800a5ad
 800a470:	200010ac 	.word	0x200010ac

0800a474 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b08a      	sub	sp, #40	@ 0x28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
 800a480:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a482:	2300      	movs	r3, #0
 800a484:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10b      	bne.n	800a4a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	623b      	str	r3, [r7, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a4a4:	4b19      	ldr	r3, [pc, #100]	@ (800a50c <xTimerGenericCommand+0x98>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d02a      	beq.n	800a502 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	dc18      	bgt.n	800a4f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a4be:	f7ff fead 	bl	800a21c <xTaskGetSchedulerState>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d109      	bne.n	800a4dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4c8:	4b10      	ldr	r3, [pc, #64]	@ (800a50c <xTimerGenericCommand+0x98>)
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	f107 0110 	add.w	r1, r7, #16
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4d4:	f7fe fc5a 	bl	8008d8c <xQueueGenericSend>
 800a4d8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a4da:	e012      	b.n	800a502 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a50c <xTimerGenericCommand+0x98>)
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	f107 0110 	add.w	r1, r7, #16
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f7fe fc50 	bl	8008d8c <xQueueGenericSend>
 800a4ec:	6278      	str	r0, [r7, #36]	@ 0x24
 800a4ee:	e008      	b.n	800a502 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4f0:	4b06      	ldr	r3, [pc, #24]	@ (800a50c <xTimerGenericCommand+0x98>)
 800a4f2:	6818      	ldr	r0, [r3, #0]
 800a4f4:	f107 0110 	add.w	r1, r7, #16
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	f7fe fd48 	bl	8008f90 <xQueueGenericSendFromISR>
 800a500:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a504:	4618      	mov	r0, r3
 800a506:	3728      	adds	r7, #40	@ 0x28
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	200010a8 	.word	0x200010a8

0800a510 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af02      	add	r7, sp, #8
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a51a:	4b23      	ldr	r3, [pc, #140]	@ (800a5a8 <prvProcessExpiredTimer+0x98>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	3304      	adds	r3, #4
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fafb 	bl	8008b24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d023      	beq.n	800a584 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	699a      	ldr	r2, [r3, #24]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	18d1      	adds	r1, r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	6978      	ldr	r0, [r7, #20]
 800a54a:	f000 f8d5 	bl	800a6f8 <prvInsertTimerInActiveList>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d020      	beq.n	800a596 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a554:	2300      	movs	r3, #0
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	2300      	movs	r3, #0
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	2100      	movs	r1, #0
 800a55e:	6978      	ldr	r0, [r7, #20]
 800a560:	f7ff ff88 	bl	800a474 <xTimerGenericCommand>
 800a564:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d114      	bne.n	800a596 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	60fb      	str	r3, [r7, #12]
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a58a:	f023 0301 	bic.w	r3, r3, #1
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	6978      	ldr	r0, [r7, #20]
 800a59c:	4798      	blx	r3
}
 800a59e:	bf00      	nop
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200010a0 	.word	0x200010a0

0800a5ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5b4:	f107 0308 	add.w	r3, r7, #8
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f859 	bl	800a670 <prvGetNextExpireTime>
 800a5be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f000 f805 	bl	800a5d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5ca:	f000 f8d7 	bl	800a77c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5ce:	bf00      	nop
 800a5d0:	e7f0      	b.n	800a5b4 <prvTimerTask+0x8>
	...

0800a5d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5de:	f7ff fa29 	bl	8009a34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 f866 	bl	800a6b8 <prvSampleTimeNow>
 800a5ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d130      	bne.n	800a656 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <prvProcessTimerOrBlockTask+0x3c>
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d806      	bhi.n	800a610 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a602:	f7ff fa25 	bl	8009a50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f7ff ff81 	bl	800a510 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a60e:	e024      	b.n	800a65a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a616:	4b13      	ldr	r3, [pc, #76]	@ (800a664 <prvProcessTimerOrBlockTask+0x90>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <prvProcessTimerOrBlockTask+0x50>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <prvProcessTimerOrBlockTask+0x52>
 800a624:	2300      	movs	r3, #0
 800a626:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a628:	4b0f      	ldr	r3, [pc, #60]	@ (800a668 <prvProcessTimerOrBlockTask+0x94>)
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	4619      	mov	r1, r3
 800a636:	f7fe ff65 	bl	8009504 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a63a:	f7ff fa09 	bl	8009a50 <xTaskResumeAll>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a644:	4b09      	ldr	r3, [pc, #36]	@ (800a66c <prvProcessTimerOrBlockTask+0x98>)
 800a646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	f3bf 8f6f 	isb	sy
}
 800a654:	e001      	b.n	800a65a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a656:	f7ff f9fb 	bl	8009a50 <xTaskResumeAll>
}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	200010a4 	.word	0x200010a4
 800a668:	200010a8 	.word	0x200010a8
 800a66c:	e000ed04 	.word	0xe000ed04

0800a670 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a678:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b4 <prvGetNextExpireTime+0x44>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <prvGetNextExpireTime+0x16>
 800a682:	2201      	movs	r2, #1
 800a684:	e000      	b.n	800a688 <prvGetNextExpireTime+0x18>
 800a686:	2200      	movs	r2, #0
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d105      	bne.n	800a6a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a694:	4b07      	ldr	r3, [pc, #28]	@ (800a6b4 <prvGetNextExpireTime+0x44>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	e001      	b.n	800a6a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	200010a0 	.word	0x200010a0

0800a6b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a6c0:	f7ff fa64 	bl	8009b8c <xTaskGetTickCount>
 800a6c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a6c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f4 <prvSampleTimeNow+0x3c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d205      	bcs.n	800a6dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6d0:	f000 f93a 	bl	800a948 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6e2:	4a04      	ldr	r2, [pc, #16]	@ (800a6f4 <prvSampleTimeNow+0x3c>)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	200010b0 	.word	0x200010b0

0800a6f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a706:	2300      	movs	r3, #0
 800a708:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d812      	bhi.n	800a744 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	1ad2      	subs	r2, r2, r3
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	699b      	ldr	r3, [r3, #24]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d302      	bcc.n	800a732 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e01b      	b.n	800a76a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a732:	4b10      	ldr	r3, [pc, #64]	@ (800a774 <prvInsertTimerInActiveList+0x7c>)
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3304      	adds	r3, #4
 800a73a:	4619      	mov	r1, r3
 800a73c:	4610      	mov	r0, r2
 800a73e:	f7fe f9b8 	bl	8008ab2 <vListInsert>
 800a742:	e012      	b.n	800a76a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d206      	bcs.n	800a75a <prvInsertTimerInActiveList+0x62>
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d302      	bcc.n	800a75a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a754:	2301      	movs	r3, #1
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e007      	b.n	800a76a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a75a:	4b07      	ldr	r3, [pc, #28]	@ (800a778 <prvInsertTimerInActiveList+0x80>)
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3304      	adds	r3, #4
 800a762:	4619      	mov	r1, r3
 800a764:	4610      	mov	r0, r2
 800a766:	f7fe f9a4 	bl	8008ab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a76a:	697b      	ldr	r3, [r7, #20]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	200010a4 	.word	0x200010a4
 800a778:	200010a0 	.word	0x200010a0

0800a77c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08e      	sub	sp, #56	@ 0x38
 800a780:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a782:	e0ce      	b.n	800a922 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	da19      	bge.n	800a7be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a78a:	1d3b      	adds	r3, r7, #4
 800a78c:	3304      	adds	r3, #4
 800a78e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79a:	f383 8811 	msr	BASEPRI, r3
 800a79e:	f3bf 8f6f 	isb	sy
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	61fb      	str	r3, [r7, #28]
}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	e7fd      	b.n	800a7aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b4:	6850      	ldr	r0, [r2, #4]
 800a7b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a7b8:	6892      	ldr	r2, [r2, #8]
 800a7ba:	4611      	mov	r1, r2
 800a7bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f2c0 80ae 	blt.w	800a922 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d004      	beq.n	800a7dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fe f9a4 	bl	8008b24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7dc:	463b      	mov	r3, r7
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff ff6a 	bl	800a6b8 <prvSampleTimeNow>
 800a7e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	f200 8097 	bhi.w	800a91c <prvProcessReceivedCommands+0x1a0>
 800a7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f4 <prvProcessReceivedCommands+0x78>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a81d 	.word	0x0800a81d
 800a7fc:	0800a81d 	.word	0x0800a81d
 800a800:	0800a893 	.word	0x0800a893
 800a804:	0800a8a7 	.word	0x0800a8a7
 800a808:	0800a8f3 	.word	0x0800a8f3
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a81d 	.word	0x0800a81d
 800a814:	0800a893 	.word	0x0800a893
 800a818:	0800a8a7 	.word	0x0800a8a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a81e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a822:	f043 0301 	orr.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a82a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	18d1      	adds	r1, r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a83a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a83c:	f7ff ff5c 	bl	800a6f8 <prvInsertTimerInActiveList>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d06c      	beq.n	800a920 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a84c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a854:	f003 0304 	and.w	r3, r3, #4
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d061      	beq.n	800a920 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	441a      	add	r2, r3
 800a864:	2300      	movs	r3, #0
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	2300      	movs	r3, #0
 800a86a:	2100      	movs	r1, #0
 800a86c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a86e:	f7ff fe01 	bl	800a474 <xTimerGenericCommand>
 800a872:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a874:	6a3b      	ldr	r3, [r7, #32]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d152      	bne.n	800a920 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a87e:	f383 8811 	msr	BASEPRI, r3
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	61bb      	str	r3, [r7, #24]
}
 800a88c:	bf00      	nop
 800a88e:	bf00      	nop
 800a890:	e7fd      	b.n	800a88e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a898:	f023 0301 	bic.w	r3, r3, #1
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a8a4:	e03d      	b.n	800a922 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8ac:	f043 0301 	orr.w	r3, r3, #1
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10b      	bne.n	800a8de <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	617b      	str	r3, [r7, #20]
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	e7fd      	b.n	800a8da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	18d1      	adds	r1, r2, r3
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8ec:	f7ff ff04 	bl	800a6f8 <prvInsertTimerInActiveList>
					break;
 800a8f0:	e017      	b.n	800a922 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8f8:	f003 0302 	and.w	r3, r3, #2
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a900:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a902:	f000 fbe9 	bl	800b0d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a906:	e00c      	b.n	800a922 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a90e:	f023 0301 	bic.w	r3, r3, #1
 800a912:	b2da      	uxtb	r2, r3
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a91a:	e002      	b.n	800a922 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a91c:	bf00      	nop
 800a91e:	e000      	b.n	800a922 <prvProcessReceivedCommands+0x1a6>
					break;
 800a920:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a922:	4b08      	ldr	r3, [pc, #32]	@ (800a944 <prvProcessReceivedCommands+0x1c8>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	1d39      	adds	r1, r7, #4
 800a928:	2200      	movs	r2, #0
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fe fbce 	bl	80090cc <xQueueReceive>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f47f af26 	bne.w	800a784 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	3730      	adds	r7, #48	@ 0x30
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	200010a8 	.word	0x200010a8

0800a948 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a94e:	e049      	b.n	800a9e4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a950:	4b2e      	ldr	r3, [pc, #184]	@ (800aa0c <prvSwitchTimerLists+0xc4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a95a:	4b2c      	ldr	r3, [pc, #176]	@ (800aa0c <prvSwitchTimerLists+0xc4>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	3304      	adds	r3, #4
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fe f8db 	bl	8008b24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d02f      	beq.n	800a9e4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	4413      	add	r3, r2
 800a98c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	429a      	cmp	r2, r3
 800a994:	d90e      	bls.n	800a9b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9a2:	4b1a      	ldr	r3, [pc, #104]	@ (800aa0c <prvSwitchTimerLists+0xc4>)
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	f7fe f880 	bl	8008ab2 <vListInsert>
 800a9b2:	e017      	b.n	800a9e4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	2100      	movs	r1, #0
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f7ff fd58 	bl	800a474 <xTimerGenericCommand>
 800a9c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10b      	bne.n	800a9e4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9d0:	f383 8811 	msr	BASEPRI, r3
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	603b      	str	r3, [r7, #0]
}
 800a9de:	bf00      	nop
 800a9e0:	bf00      	nop
 800a9e2:	e7fd      	b.n	800a9e0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9e4:	4b09      	ldr	r3, [pc, #36]	@ (800aa0c <prvSwitchTimerLists+0xc4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1b0      	bne.n	800a950 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9ee:	4b07      	ldr	r3, [pc, #28]	@ (800aa0c <prvSwitchTimerLists+0xc4>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9f4:	4b06      	ldr	r3, [pc, #24]	@ (800aa10 <prvSwitchTimerLists+0xc8>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a04      	ldr	r2, [pc, #16]	@ (800aa0c <prvSwitchTimerLists+0xc4>)
 800a9fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9fc:	4a04      	ldr	r2, [pc, #16]	@ (800aa10 <prvSwitchTimerLists+0xc8>)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	6013      	str	r3, [r2, #0]
}
 800aa02:	bf00      	nop
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200010a0 	.word	0x200010a0
 800aa10:	200010a4 	.word	0x200010a4

0800aa14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa1a:	f000 f96d 	bl	800acf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa1e:	4b15      	ldr	r3, [pc, #84]	@ (800aa74 <prvCheckForValidListAndQueue+0x60>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d120      	bne.n	800aa68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa26:	4814      	ldr	r0, [pc, #80]	@ (800aa78 <prvCheckForValidListAndQueue+0x64>)
 800aa28:	f7fd fff2 	bl	8008a10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa2c:	4813      	ldr	r0, [pc, #76]	@ (800aa7c <prvCheckForValidListAndQueue+0x68>)
 800aa2e:	f7fd ffef 	bl	8008a10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa32:	4b13      	ldr	r3, [pc, #76]	@ (800aa80 <prvCheckForValidListAndQueue+0x6c>)
 800aa34:	4a10      	ldr	r2, [pc, #64]	@ (800aa78 <prvCheckForValidListAndQueue+0x64>)
 800aa36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa38:	4b12      	ldr	r3, [pc, #72]	@ (800aa84 <prvCheckForValidListAndQueue+0x70>)
 800aa3a:	4a10      	ldr	r2, [pc, #64]	@ (800aa7c <prvCheckForValidListAndQueue+0x68>)
 800aa3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	4b11      	ldr	r3, [pc, #68]	@ (800aa88 <prvCheckForValidListAndQueue+0x74>)
 800aa44:	4a11      	ldr	r2, [pc, #68]	@ (800aa8c <prvCheckForValidListAndQueue+0x78>)
 800aa46:	2110      	movs	r1, #16
 800aa48:	200a      	movs	r0, #10
 800aa4a:	f7fe f8ff 	bl	8008c4c <xQueueGenericCreateStatic>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	4a08      	ldr	r2, [pc, #32]	@ (800aa74 <prvCheckForValidListAndQueue+0x60>)
 800aa52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa54:	4b07      	ldr	r3, [pc, #28]	@ (800aa74 <prvCheckForValidListAndQueue+0x60>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d005      	beq.n	800aa68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa5c:	4b05      	ldr	r3, [pc, #20]	@ (800aa74 <prvCheckForValidListAndQueue+0x60>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	490b      	ldr	r1, [pc, #44]	@ (800aa90 <prvCheckForValidListAndQueue+0x7c>)
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fd24 	bl	80094b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa68:	f000 f978 	bl	800ad5c <vPortExitCritical>
}
 800aa6c:	bf00      	nop
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	200010a8 	.word	0x200010a8
 800aa78:	20001078 	.word	0x20001078
 800aa7c:	2000108c 	.word	0x2000108c
 800aa80:	200010a0 	.word	0x200010a0
 800aa84:	200010a4 	.word	0x200010a4
 800aa88:	20001154 	.word	0x20001154
 800aa8c:	200010b4 	.word	0x200010b4
 800aa90:	0800fa44 	.word	0x0800fa44

0800aa94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b085      	sub	sp, #20
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	3b04      	subs	r3, #4
 800aaa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800aaac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f023 0201 	bic.w	r2, r3, #1
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3b04      	subs	r3, #4
 800aac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aac4:	4a0c      	ldr	r2, [pc, #48]	@ (800aaf8 <pxPortInitialiseStack+0x64>)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3b14      	subs	r3, #20
 800aace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	3b04      	subs	r3, #4
 800aada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f06f 0202 	mvn.w	r2, #2
 800aae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3b20      	subs	r3, #32
 800aae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaea:	68fb      	ldr	r3, [r7, #12]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr
 800aaf8:	0800aafd 	.word	0x0800aafd

0800aafc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab06:	4b13      	ldr	r3, [pc, #76]	@ (800ab54 <prvTaskExitError+0x58>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0e:	d00b      	beq.n	800ab28 <prvTaskExitError+0x2c>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	60fb      	str	r3, [r7, #12]
}
 800ab22:	bf00      	nop
 800ab24:	bf00      	nop
 800ab26:	e7fd      	b.n	800ab24 <prvTaskExitError+0x28>
	__asm volatile
 800ab28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	60bb      	str	r3, [r7, #8]
}
 800ab3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab3c:	bf00      	nop
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d0fc      	beq.n	800ab3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	2000000c 	.word	0x2000000c
	...

0800ab60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab60:	4b07      	ldr	r3, [pc, #28]	@ (800ab80 <pxCurrentTCBConst2>)
 800ab62:	6819      	ldr	r1, [r3, #0]
 800ab64:	6808      	ldr	r0, [r1, #0]
 800ab66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6a:	f380 8809 	msr	PSP, r0
 800ab6e:	f3bf 8f6f 	isb	sy
 800ab72:	f04f 0000 	mov.w	r0, #0
 800ab76:	f380 8811 	msr	BASEPRI, r0
 800ab7a:	4770      	bx	lr
 800ab7c:	f3af 8000 	nop.w

0800ab80 <pxCurrentTCBConst2>:
 800ab80:	20000b78 	.word	0x20000b78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop

0800ab88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab88:	4808      	ldr	r0, [pc, #32]	@ (800abac <prvPortStartFirstTask+0x24>)
 800ab8a:	6800      	ldr	r0, [r0, #0]
 800ab8c:	6800      	ldr	r0, [r0, #0]
 800ab8e:	f380 8808 	msr	MSP, r0
 800ab92:	f04f 0000 	mov.w	r0, #0
 800ab96:	f380 8814 	msr	CONTROL, r0
 800ab9a:	b662      	cpsie	i
 800ab9c:	b661      	cpsie	f
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	df00      	svc	0
 800aba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abaa:	bf00      	nop
 800abac:	e000ed08 	.word	0xe000ed08

0800abb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abb6:	4b47      	ldr	r3, [pc, #284]	@ (800acd4 <xPortStartScheduler+0x124>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a47      	ldr	r2, [pc, #284]	@ (800acd8 <xPortStartScheduler+0x128>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d10b      	bne.n	800abd8 <xPortStartScheduler+0x28>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	60fb      	str	r3, [r7, #12]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800abd8:	4b3e      	ldr	r3, [pc, #248]	@ (800acd4 <xPortStartScheduler+0x124>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a3f      	ldr	r2, [pc, #252]	@ (800acdc <xPortStartScheduler+0x12c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d10b      	bne.n	800abfa <xPortStartScheduler+0x4a>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	613b      	str	r3, [r7, #16]
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	e7fd      	b.n	800abf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800abfa:	4b39      	ldr	r3, [pc, #228]	@ (800ace0 <xPortStartScheduler+0x130>)
 800abfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	22ff      	movs	r2, #255	@ 0xff
 800ac0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	4b31      	ldr	r3, [pc, #196]	@ (800ace4 <xPortStartScheduler+0x134>)
 800ac20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac22:	4b31      	ldr	r3, [pc, #196]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac24:	2207      	movs	r2, #7
 800ac26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac28:	e009      	b.n	800ac3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ac2a:	4b2f      	ldr	r3, [pc, #188]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	4a2d      	ldr	r2, [pc, #180]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac3e:	78fb      	ldrb	r3, [r7, #3]
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac46:	2b80      	cmp	r3, #128	@ 0x80
 800ac48:	d0ef      	beq.n	800ac2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac4a:	4b27      	ldr	r3, [pc, #156]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f1c3 0307 	rsb	r3, r3, #7
 800ac52:	2b04      	cmp	r3, #4
 800ac54:	d00b      	beq.n	800ac6e <xPortStartScheduler+0xbe>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	60bb      	str	r3, [r7, #8]
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	e7fd      	b.n	800ac6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	4a1c      	ldr	r2, [pc, #112]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac78:	4b1b      	ldr	r3, [pc, #108]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ac80:	4a19      	ldr	r2, [pc, #100]	@ (800ace8 <xPortStartScheduler+0x138>)
 800ac82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac8c:	4b17      	ldr	r3, [pc, #92]	@ (800acec <xPortStartScheduler+0x13c>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a16      	ldr	r2, [pc, #88]	@ (800acec <xPortStartScheduler+0x13c>)
 800ac92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ac96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac98:	4b14      	ldr	r3, [pc, #80]	@ (800acec <xPortStartScheduler+0x13c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a13      	ldr	r2, [pc, #76]	@ (800acec <xPortStartScheduler+0x13c>)
 800ac9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aca2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aca4:	f000 f8da 	bl	800ae5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aca8:	4b11      	ldr	r3, [pc, #68]	@ (800acf0 <xPortStartScheduler+0x140>)
 800acaa:	2200      	movs	r2, #0
 800acac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acae:	f000 f8f9 	bl	800aea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acb2:	4b10      	ldr	r3, [pc, #64]	@ (800acf4 <xPortStartScheduler+0x144>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a0f      	ldr	r2, [pc, #60]	@ (800acf4 <xPortStartScheduler+0x144>)
 800acb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800acbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800acbe:	f7ff ff63 	bl	800ab88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acc2:	f7ff f82d 	bl	8009d20 <vTaskSwitchContext>
	prvTaskExitError();
 800acc6:	f7ff ff19 	bl	800aafc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	e000ed00 	.word	0xe000ed00
 800acd8:	410fc271 	.word	0x410fc271
 800acdc:	410fc270 	.word	0x410fc270
 800ace0:	e000e400 	.word	0xe000e400
 800ace4:	200011a4 	.word	0x200011a4
 800ace8:	200011a8 	.word	0x200011a8
 800acec:	e000ed20 	.word	0xe000ed20
 800acf0:	2000000c 	.word	0x2000000c
 800acf4:	e000ef34 	.word	0xe000ef34

0800acf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	607b      	str	r3, [r7, #4]
}
 800ad10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad12:	4b10      	ldr	r3, [pc, #64]	@ (800ad54 <vPortEnterCritical+0x5c>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3301      	adds	r3, #1
 800ad18:	4a0e      	ldr	r2, [pc, #56]	@ (800ad54 <vPortEnterCritical+0x5c>)
 800ad1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ad54 <vPortEnterCritical+0x5c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d110      	bne.n	800ad46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad24:	4b0c      	ldr	r3, [pc, #48]	@ (800ad58 <vPortEnterCritical+0x60>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00b      	beq.n	800ad46 <vPortEnterCritical+0x4e>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	f383 8811 	msr	BASEPRI, r3
 800ad36:	f3bf 8f6f 	isb	sy
 800ad3a:	f3bf 8f4f 	dsb	sy
 800ad3e:	603b      	str	r3, [r7, #0]
}
 800ad40:	bf00      	nop
 800ad42:	bf00      	nop
 800ad44:	e7fd      	b.n	800ad42 <vPortEnterCritical+0x4a>
	}
}
 800ad46:	bf00      	nop
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	2000000c 	.word	0x2000000c
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad62:	4b12      	ldr	r3, [pc, #72]	@ (800adac <vPortExitCritical+0x50>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <vPortExitCritical+0x26>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	607b      	str	r3, [r7, #4]
}
 800ad7c:	bf00      	nop
 800ad7e:	bf00      	nop
 800ad80:	e7fd      	b.n	800ad7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ad82:	4b0a      	ldr	r3, [pc, #40]	@ (800adac <vPortExitCritical+0x50>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	4a08      	ldr	r2, [pc, #32]	@ (800adac <vPortExitCritical+0x50>)
 800ad8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad8c:	4b07      	ldr	r3, [pc, #28]	@ (800adac <vPortExitCritical+0x50>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d105      	bne.n	800ada0 <vPortExitCritical+0x44>
 800ad94:	2300      	movs	r3, #0
 800ad96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f383 8811 	msr	BASEPRI, r3
}
 800ad9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	2000000c 	.word	0x2000000c

0800adb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800adb0:	f3ef 8009 	mrs	r0, PSP
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	4b15      	ldr	r3, [pc, #84]	@ (800ae10 <pxCurrentTCBConst>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	f01e 0f10 	tst.w	lr, #16
 800adc0:	bf08      	it	eq
 800adc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adca:	6010      	str	r0, [r2, #0]
 800adcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800add0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800add4:	f380 8811 	msr	BASEPRI, r0
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f7fe ff9e 	bl	8009d20 <vTaskSwitchContext>
 800ade4:	f04f 0000 	mov.w	r0, #0
 800ade8:	f380 8811 	msr	BASEPRI, r0
 800adec:	bc09      	pop	{r0, r3}
 800adee:	6819      	ldr	r1, [r3, #0]
 800adf0:	6808      	ldr	r0, [r1, #0]
 800adf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf6:	f01e 0f10 	tst.w	lr, #16
 800adfa:	bf08      	it	eq
 800adfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae00:	f380 8809 	msr	PSP, r0
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	f3af 8000 	nop.w

0800ae10 <pxCurrentTCBConst>:
 800ae10:	20000b78 	.word	0x20000b78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop

0800ae18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	607b      	str	r3, [r7, #4]
}
 800ae30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae32:	f7fe febb 	bl	8009bac <xTaskIncrementTick>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d003      	beq.n	800ae44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae3c:	4b06      	ldr	r3, [pc, #24]	@ (800ae58 <xPortSysTickHandler+0x40>)
 800ae3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	2300      	movs	r3, #0
 800ae46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	f383 8811 	msr	BASEPRI, r3
}
 800ae4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	e000ed04 	.word	0xe000ed04

0800ae5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae60:	4b0b      	ldr	r3, [pc, #44]	@ (800ae90 <vPortSetupTimerInterrupt+0x34>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae66:	4b0b      	ldr	r3, [pc, #44]	@ (800ae94 <vPortSetupTimerInterrupt+0x38>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae98 <vPortSetupTimerInterrupt+0x3c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a0a      	ldr	r2, [pc, #40]	@ (800ae9c <vPortSetupTimerInterrupt+0x40>)
 800ae72:	fba2 2303 	umull	r2, r3, r2, r3
 800ae76:	099b      	lsrs	r3, r3, #6
 800ae78:	4a09      	ldr	r2, [pc, #36]	@ (800aea0 <vPortSetupTimerInterrupt+0x44>)
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae7e:	4b04      	ldr	r3, [pc, #16]	@ (800ae90 <vPortSetupTimerInterrupt+0x34>)
 800ae80:	2207      	movs	r2, #7
 800ae82:	601a      	str	r2, [r3, #0]
}
 800ae84:	bf00      	nop
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	e000e010 	.word	0xe000e010
 800ae94:	e000e018 	.word	0xe000e018
 800ae98:	20000000 	.word	0x20000000
 800ae9c:	10624dd3 	.word	0x10624dd3
 800aea0:	e000e014 	.word	0xe000e014

0800aea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aeb4 <vPortEnableVFP+0x10>
 800aea8:	6801      	ldr	r1, [r0, #0]
 800aeaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aeae:	6001      	str	r1, [r0, #0]
 800aeb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aeb2:	bf00      	nop
 800aeb4:	e000ed88 	.word	0xe000ed88

0800aeb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aebe:	f3ef 8305 	mrs	r3, IPSR
 800aec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2b0f      	cmp	r3, #15
 800aec8:	d915      	bls.n	800aef6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aeca:	4a18      	ldr	r2, [pc, #96]	@ (800af2c <vPortValidateInterruptPriority+0x74>)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	4413      	add	r3, r2
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aed4:	4b16      	ldr	r3, [pc, #88]	@ (800af30 <vPortValidateInterruptPriority+0x78>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	7afa      	ldrb	r2, [r7, #11]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d20b      	bcs.n	800aef6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	607b      	str	r3, [r7, #4]
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	e7fd      	b.n	800aef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aef6:	4b0f      	ldr	r3, [pc, #60]	@ (800af34 <vPortValidateInterruptPriority+0x7c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800aefe:	4b0e      	ldr	r3, [pc, #56]	@ (800af38 <vPortValidateInterruptPriority+0x80>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	429a      	cmp	r2, r3
 800af04:	d90b      	bls.n	800af1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	603b      	str	r3, [r7, #0]
}
 800af18:	bf00      	nop
 800af1a:	bf00      	nop
 800af1c:	e7fd      	b.n	800af1a <vPortValidateInterruptPriority+0x62>
	}
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	e000e3f0 	.word	0xe000e3f0
 800af30:	200011a4 	.word	0x200011a4
 800af34:	e000ed0c 	.word	0xe000ed0c
 800af38:	200011a8 	.word	0x200011a8

0800af3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08a      	sub	sp, #40	@ 0x28
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af44:	2300      	movs	r3, #0
 800af46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af48:	f7fe fd74 	bl	8009a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af4c:	4b5c      	ldr	r3, [pc, #368]	@ (800b0c0 <pvPortMalloc+0x184>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af54:	f000 f924 	bl	800b1a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af58:	4b5a      	ldr	r3, [pc, #360]	@ (800b0c4 <pvPortMalloc+0x188>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4013      	ands	r3, r2
 800af60:	2b00      	cmp	r3, #0
 800af62:	f040 8095 	bne.w	800b090 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d01e      	beq.n	800afaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800af6c:	2208      	movs	r2, #8
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4413      	add	r3, r2
 800af72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f003 0307 	and.w	r3, r3, #7
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d015      	beq.n	800afaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f023 0307 	bic.w	r3, r3, #7
 800af84:	3308      	adds	r3, #8
 800af86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00b      	beq.n	800afaa <pvPortMalloc+0x6e>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	617b      	str	r3, [r7, #20]
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop
 800afa8:	e7fd      	b.n	800afa6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d06f      	beq.n	800b090 <pvPortMalloc+0x154>
 800afb0:	4b45      	ldr	r3, [pc, #276]	@ (800b0c8 <pvPortMalloc+0x18c>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d86a      	bhi.n	800b090 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afba:	4b44      	ldr	r3, [pc, #272]	@ (800b0cc <pvPortMalloc+0x190>)
 800afbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afbe:	4b43      	ldr	r3, [pc, #268]	@ (800b0cc <pvPortMalloc+0x190>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afc4:	e004      	b.n	800afd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d903      	bls.n	800afe2 <pvPortMalloc+0xa6>
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d1f1      	bne.n	800afc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800afe2:	4b37      	ldr	r3, [pc, #220]	@ (800b0c0 <pvPortMalloc+0x184>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afe8:	429a      	cmp	r2, r3
 800afea:	d051      	beq.n	800b090 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2208      	movs	r2, #8
 800aff2:	4413      	add	r3, r2
 800aff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800affe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	1ad2      	subs	r2, r2, r3
 800b006:	2308      	movs	r3, #8
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d920      	bls.n	800b050 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b00e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00b      	beq.n	800b038 <pvPortMalloc+0xfc>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	613b      	str	r3, [r7, #16]
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03a:	685a      	ldr	r2, [r3, #4]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	1ad2      	subs	r2, r2, r3
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b04a:	69b8      	ldr	r0, [r7, #24]
 800b04c:	f000 f90a 	bl	800b264 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b050:	4b1d      	ldr	r3, [pc, #116]	@ (800b0c8 <pvPortMalloc+0x18c>)
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	4a1b      	ldr	r2, [pc, #108]	@ (800b0c8 <pvPortMalloc+0x18c>)
 800b05c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b05e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0c8 <pvPortMalloc+0x18c>)
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	4b1b      	ldr	r3, [pc, #108]	@ (800b0d0 <pvPortMalloc+0x194>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d203      	bcs.n	800b072 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b06a:	4b17      	ldr	r3, [pc, #92]	@ (800b0c8 <pvPortMalloc+0x18c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a18      	ldr	r2, [pc, #96]	@ (800b0d0 <pvPortMalloc+0x194>)
 800b070:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	4b13      	ldr	r3, [pc, #76]	@ (800b0c4 <pvPortMalloc+0x188>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	431a      	orrs	r2, r3
 800b07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b07e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b086:	4b13      	ldr	r3, [pc, #76]	@ (800b0d4 <pvPortMalloc+0x198>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	3301      	adds	r3, #1
 800b08c:	4a11      	ldr	r2, [pc, #68]	@ (800b0d4 <pvPortMalloc+0x198>)
 800b08e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b090:	f7fe fcde 	bl	8009a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00b      	beq.n	800b0b6 <pvPortMalloc+0x17a>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	60fb      	str	r3, [r7, #12]
}
 800b0b0:	bf00      	nop
 800b0b2:	bf00      	nop
 800b0b4:	e7fd      	b.n	800b0b2 <pvPortMalloc+0x176>
	return pvReturn;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3728      	adds	r7, #40	@ 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20004db4 	.word	0x20004db4
 800b0c4:	20004dc8 	.word	0x20004dc8
 800b0c8:	20004db8 	.word	0x20004db8
 800b0cc:	20004dac 	.word	0x20004dac
 800b0d0:	20004dbc 	.word	0x20004dbc
 800b0d4:	20004dc0 	.word	0x20004dc0

0800b0d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d04f      	beq.n	800b18a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0ea:	2308      	movs	r3, #8
 800b0ec:	425b      	negs	r3, r3
 800b0ee:	697a      	ldr	r2, [r7, #20]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	4b25      	ldr	r3, [pc, #148]	@ (800b194 <vPortFree+0xbc>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4013      	ands	r3, r2
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10b      	bne.n	800b11e <vPortFree+0x46>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	60fb      	str	r3, [r7, #12]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00b      	beq.n	800b13e <vPortFree+0x66>
	__asm volatile
 800b126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b12a:	f383 8811 	msr	BASEPRI, r3
 800b12e:	f3bf 8f6f 	isb	sy
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	60bb      	str	r3, [r7, #8]
}
 800b138:	bf00      	nop
 800b13a:	bf00      	nop
 800b13c:	e7fd      	b.n	800b13a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	4b14      	ldr	r3, [pc, #80]	@ (800b194 <vPortFree+0xbc>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4013      	ands	r3, r2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d01e      	beq.n	800b18a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d11a      	bne.n	800b18a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	4b0e      	ldr	r3, [pc, #56]	@ (800b194 <vPortFree+0xbc>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	43db      	mvns	r3, r3
 800b15e:	401a      	ands	r2, r3
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b164:	f7fe fc66 	bl	8009a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	4b0a      	ldr	r3, [pc, #40]	@ (800b198 <vPortFree+0xc0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4413      	add	r3, r2
 800b172:	4a09      	ldr	r2, [pc, #36]	@ (800b198 <vPortFree+0xc0>)
 800b174:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b176:	6938      	ldr	r0, [r7, #16]
 800b178:	f000 f874 	bl	800b264 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b17c:	4b07      	ldr	r3, [pc, #28]	@ (800b19c <vPortFree+0xc4>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	3301      	adds	r3, #1
 800b182:	4a06      	ldr	r2, [pc, #24]	@ (800b19c <vPortFree+0xc4>)
 800b184:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b186:	f7fe fc63 	bl	8009a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b18a:	bf00      	nop
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20004dc8 	.word	0x20004dc8
 800b198:	20004db8 	.word	0x20004db8
 800b19c:	20004dc4 	.word	0x20004dc4

0800b1a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b1aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1ac:	4b27      	ldr	r3, [pc, #156]	@ (800b24c <prvHeapInit+0xac>)
 800b1ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d00c      	beq.n	800b1d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	3307      	adds	r3, #7
 800b1be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f023 0307 	bic.w	r3, r3, #7
 800b1c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	1ad3      	subs	r3, r2, r3
 800b1ce:	4a1f      	ldr	r2, [pc, #124]	@ (800b24c <prvHeapInit+0xac>)
 800b1d0:	4413      	add	r3, r2
 800b1d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b250 <prvHeapInit+0xb0>)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1de:	4b1c      	ldr	r3, [pc, #112]	@ (800b250 <prvHeapInit+0xb0>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1ec:	2208      	movs	r2, #8
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	1a9b      	subs	r3, r3, r2
 800b1f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f023 0307 	bic.w	r3, r3, #7
 800b1fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4a15      	ldr	r2, [pc, #84]	@ (800b254 <prvHeapInit+0xb4>)
 800b200:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b202:	4b14      	ldr	r3, [pc, #80]	@ (800b254 <prvHeapInit+0xb4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2200      	movs	r2, #0
 800b208:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b20a:	4b12      	ldr	r3, [pc, #72]	@ (800b254 <prvHeapInit+0xb4>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	1ad2      	subs	r2, r2, r3
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b220:	4b0c      	ldr	r3, [pc, #48]	@ (800b254 <prvHeapInit+0xb4>)
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	4a0a      	ldr	r2, [pc, #40]	@ (800b258 <prvHeapInit+0xb8>)
 800b22e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	4a09      	ldr	r2, [pc, #36]	@ (800b25c <prvHeapInit+0xbc>)
 800b236:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b238:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <prvHeapInit+0xc0>)
 800b23a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b23e:	601a      	str	r2, [r3, #0]
}
 800b240:	bf00      	nop
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	200011ac 	.word	0x200011ac
 800b250:	20004dac 	.word	0x20004dac
 800b254:	20004db4 	.word	0x20004db4
 800b258:	20004dbc 	.word	0x20004dbc
 800b25c:	20004db8 	.word	0x20004db8
 800b260:	20004dc8 	.word	0x20004dc8

0800b264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b26c:	4b28      	ldr	r3, [pc, #160]	@ (800b310 <prvInsertBlockIntoFreeList+0xac>)
 800b26e:	60fb      	str	r3, [r7, #12]
 800b270:	e002      	b.n	800b278 <prvInsertBlockIntoFreeList+0x14>
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	429a      	cmp	r2, r3
 800b280:	d8f7      	bhi.n	800b272 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	68ba      	ldr	r2, [r7, #8]
 800b28c:	4413      	add	r3, r2
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	429a      	cmp	r2, r3
 800b292:	d108      	bne.n	800b2a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	441a      	add	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	441a      	add	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d118      	bne.n	800b2ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	4b15      	ldr	r3, [pc, #84]	@ (800b314 <prvInsertBlockIntoFreeList+0xb0>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d00d      	beq.n	800b2e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	441a      	add	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	e008      	b.n	800b2f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b314 <prvInsertBlockIntoFreeList+0xb0>)
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	e003      	b.n	800b2f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d002      	beq.n	800b302 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b302:	bf00      	nop
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	20004dac 	.word	0x20004dac
 800b314:	20004db4 	.word	0x20004db4

0800b318 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b326:	4618      	mov	r0, r3
 800b328:	f7fd f8c6 	bl	80084b8 <USBH_LL_IncTimer>
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b342:	4618      	mov	r0, r3
 800b344:	f7fd f90a 	bl	800855c <USBH_LL_Connect>
}
 800b348:	bf00      	nop
 800b34a:	3708      	adds	r7, #8
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fd f91f 	bl	80085a2 <USBH_LL_Disconnect>
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	70fb      	strb	r3, [r7, #3]
 800b378:	4613      	mov	r3, r2
 800b37a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b382:	4618      	mov	r0, r3
 800b384:	f7fd f93f 	bl	8008606 <USBH_LL_NotifyURBChange>
#endif
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fd f8b4 	bl	800850c <USBH_LL_PortEnabled>
}
 800b3a4:	bf00      	nop
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fd f8c0 	bl	8008540 <USBH_LL_PortDisabled>
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b084      	sub	sp, #16
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7f8 fee7 	bl	80041b2 <HAL_HCD_Stop>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f808 	bl	800b400 <USBH_Get_USB_Status>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
	...

0800b400 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	4603      	mov	r3, r0
 800b408:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	2b03      	cmp	r3, #3
 800b412:	d817      	bhi.n	800b444 <USBH_Get_USB_Status+0x44>
 800b414:	a201      	add	r2, pc, #4	@ (adr r2, 800b41c <USBH_Get_USB_Status+0x1c>)
 800b416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41a:	bf00      	nop
 800b41c:	0800b42d 	.word	0x0800b42d
 800b420:	0800b433 	.word	0x0800b433
 800b424:	0800b439 	.word	0x0800b439
 800b428:	0800b43f 	.word	0x0800b43f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]
    break;
 800b430:	e00b      	b.n	800b44a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b432:	2302      	movs	r3, #2
 800b434:	73fb      	strb	r3, [r7, #15]
    break;
 800b436:	e008      	b.n	800b44a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b438:	2301      	movs	r3, #1
 800b43a:	73fb      	strb	r3, [r7, #15]
    break;
 800b43c:	e005      	b.n	800b44a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b43e:	2302      	movs	r3, #2
 800b440:	73fb      	strb	r3, [r7, #15]
    break;
 800b442:	e002      	b.n	800b44a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b444:	2302      	movs	r3, #2
 800b446:	73fb      	strb	r3, [r7, #15]
    break;
 800b448:	bf00      	nop
  }
  return usb_status;
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3714      	adds	r7, #20
 800b450:	46bd      	mov	sp, r7
 800b452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b456:	4770      	bx	lr

0800b458 <_Znwj>:
 800b458:	2801      	cmp	r0, #1
 800b45a:	bf38      	it	cc
 800b45c:	2001      	movcc	r0, #1
 800b45e:	b510      	push	{r4, lr}
 800b460:	4604      	mov	r4, r0
 800b462:	4620      	mov	r0, r4
 800b464:	f000 f81c 	bl	800b4a0 <malloc>
 800b468:	b100      	cbz	r0, 800b46c <_Znwj+0x14>
 800b46a:	bd10      	pop	{r4, pc}
 800b46c:	f000 f806 	bl	800b47c <_ZSt15get_new_handlerv>
 800b470:	b908      	cbnz	r0, 800b476 <_Znwj+0x1e>
 800b472:	f000 f80b 	bl	800b48c <abort>
 800b476:	4780      	blx	r0
 800b478:	e7f3      	b.n	800b462 <_Znwj+0xa>
	...

0800b47c <_ZSt15get_new_handlerv>:
 800b47c:	4b02      	ldr	r3, [pc, #8]	@ (800b488 <_ZSt15get_new_handlerv+0xc>)
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	f3bf 8f5b 	dmb	ish
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	200051ac 	.word	0x200051ac

0800b48c <abort>:
 800b48c:	b508      	push	{r3, lr}
 800b48e:	2006      	movs	r0, #6
 800b490:	f001 fcc0 	bl	800ce14 <raise>
 800b494:	2001      	movs	r0, #1
 800b496:	f004 f96d 	bl	800f774 <_exit>

0800b49a <atof>:
 800b49a:	2100      	movs	r1, #0
 800b49c:	f000 beb8 	b.w	800c210 <strtod>

0800b4a0 <malloc>:
 800b4a0:	4b02      	ldr	r3, [pc, #8]	@ (800b4ac <malloc+0xc>)
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	6818      	ldr	r0, [r3, #0]
 800b4a6:	f000 b825 	b.w	800b4f4 <_malloc_r>
 800b4aa:	bf00      	nop
 800b4ac:	20000188 	.word	0x20000188

0800b4b0 <sbrk_aligned>:
 800b4b0:	b570      	push	{r4, r5, r6, lr}
 800b4b2:	4e0f      	ldr	r6, [pc, #60]	@ (800b4f0 <sbrk_aligned+0x40>)
 800b4b4:	460c      	mov	r4, r1
 800b4b6:	6831      	ldr	r1, [r6, #0]
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	b911      	cbnz	r1, 800b4c2 <sbrk_aligned+0x12>
 800b4bc:	f001 fd5c 	bl	800cf78 <_sbrk_r>
 800b4c0:	6030      	str	r0, [r6, #0]
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f001 fd57 	bl	800cf78 <_sbrk_r>
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	d103      	bne.n	800b4d6 <sbrk_aligned+0x26>
 800b4ce:	f04f 34ff 	mov.w	r4, #4294967295
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	bd70      	pop	{r4, r5, r6, pc}
 800b4d6:	1cc4      	adds	r4, r0, #3
 800b4d8:	f024 0403 	bic.w	r4, r4, #3
 800b4dc:	42a0      	cmp	r0, r4
 800b4de:	d0f8      	beq.n	800b4d2 <sbrk_aligned+0x22>
 800b4e0:	1a21      	subs	r1, r4, r0
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f001 fd48 	bl	800cf78 <_sbrk_r>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d1f2      	bne.n	800b4d2 <sbrk_aligned+0x22>
 800b4ec:	e7ef      	b.n	800b4ce <sbrk_aligned+0x1e>
 800b4ee:	bf00      	nop
 800b4f0:	200051b0 	.word	0x200051b0

0800b4f4 <_malloc_r>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	1ccd      	adds	r5, r1, #3
 800b4fa:	f025 0503 	bic.w	r5, r5, #3
 800b4fe:	3508      	adds	r5, #8
 800b500:	2d0c      	cmp	r5, #12
 800b502:	bf38      	it	cc
 800b504:	250c      	movcc	r5, #12
 800b506:	2d00      	cmp	r5, #0
 800b508:	4606      	mov	r6, r0
 800b50a:	db01      	blt.n	800b510 <_malloc_r+0x1c>
 800b50c:	42a9      	cmp	r1, r5
 800b50e:	d904      	bls.n	800b51a <_malloc_r+0x26>
 800b510:	230c      	movs	r3, #12
 800b512:	6033      	str	r3, [r6, #0]
 800b514:	2000      	movs	r0, #0
 800b516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5f0 <_malloc_r+0xfc>
 800b51e:	f000 f869 	bl	800b5f4 <__malloc_lock>
 800b522:	f8d8 3000 	ldr.w	r3, [r8]
 800b526:	461c      	mov	r4, r3
 800b528:	bb44      	cbnz	r4, 800b57c <_malloc_r+0x88>
 800b52a:	4629      	mov	r1, r5
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff ffbf 	bl	800b4b0 <sbrk_aligned>
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	4604      	mov	r4, r0
 800b536:	d158      	bne.n	800b5ea <_malloc_r+0xf6>
 800b538:	f8d8 4000 	ldr.w	r4, [r8]
 800b53c:	4627      	mov	r7, r4
 800b53e:	2f00      	cmp	r7, #0
 800b540:	d143      	bne.n	800b5ca <_malloc_r+0xd6>
 800b542:	2c00      	cmp	r4, #0
 800b544:	d04b      	beq.n	800b5de <_malloc_r+0xea>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	4639      	mov	r1, r7
 800b54a:	4630      	mov	r0, r6
 800b54c:	eb04 0903 	add.w	r9, r4, r3
 800b550:	f001 fd12 	bl	800cf78 <_sbrk_r>
 800b554:	4581      	cmp	r9, r0
 800b556:	d142      	bne.n	800b5de <_malloc_r+0xea>
 800b558:	6821      	ldr	r1, [r4, #0]
 800b55a:	1a6d      	subs	r5, r5, r1
 800b55c:	4629      	mov	r1, r5
 800b55e:	4630      	mov	r0, r6
 800b560:	f7ff ffa6 	bl	800b4b0 <sbrk_aligned>
 800b564:	3001      	adds	r0, #1
 800b566:	d03a      	beq.n	800b5de <_malloc_r+0xea>
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	442b      	add	r3, r5
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	f8d8 3000 	ldr.w	r3, [r8]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	bb62      	cbnz	r2, 800b5d0 <_malloc_r+0xdc>
 800b576:	f8c8 7000 	str.w	r7, [r8]
 800b57a:	e00f      	b.n	800b59c <_malloc_r+0xa8>
 800b57c:	6822      	ldr	r2, [r4, #0]
 800b57e:	1b52      	subs	r2, r2, r5
 800b580:	d420      	bmi.n	800b5c4 <_malloc_r+0xd0>
 800b582:	2a0b      	cmp	r2, #11
 800b584:	d917      	bls.n	800b5b6 <_malloc_r+0xc2>
 800b586:	1961      	adds	r1, r4, r5
 800b588:	42a3      	cmp	r3, r4
 800b58a:	6025      	str	r5, [r4, #0]
 800b58c:	bf18      	it	ne
 800b58e:	6059      	strne	r1, [r3, #4]
 800b590:	6863      	ldr	r3, [r4, #4]
 800b592:	bf08      	it	eq
 800b594:	f8c8 1000 	streq.w	r1, [r8]
 800b598:	5162      	str	r2, [r4, r5]
 800b59a:	604b      	str	r3, [r1, #4]
 800b59c:	4630      	mov	r0, r6
 800b59e:	f000 f82f 	bl	800b600 <__malloc_unlock>
 800b5a2:	f104 000b 	add.w	r0, r4, #11
 800b5a6:	1d23      	adds	r3, r4, #4
 800b5a8:	f020 0007 	bic.w	r0, r0, #7
 800b5ac:	1ac2      	subs	r2, r0, r3
 800b5ae:	bf1c      	itt	ne
 800b5b0:	1a1b      	subne	r3, r3, r0
 800b5b2:	50a3      	strne	r3, [r4, r2]
 800b5b4:	e7af      	b.n	800b516 <_malloc_r+0x22>
 800b5b6:	6862      	ldr	r2, [r4, #4]
 800b5b8:	42a3      	cmp	r3, r4
 800b5ba:	bf0c      	ite	eq
 800b5bc:	f8c8 2000 	streq.w	r2, [r8]
 800b5c0:	605a      	strne	r2, [r3, #4]
 800b5c2:	e7eb      	b.n	800b59c <_malloc_r+0xa8>
 800b5c4:	4623      	mov	r3, r4
 800b5c6:	6864      	ldr	r4, [r4, #4]
 800b5c8:	e7ae      	b.n	800b528 <_malloc_r+0x34>
 800b5ca:	463c      	mov	r4, r7
 800b5cc:	687f      	ldr	r7, [r7, #4]
 800b5ce:	e7b6      	b.n	800b53e <_malloc_r+0x4a>
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	42a3      	cmp	r3, r4
 800b5d6:	d1fb      	bne.n	800b5d0 <_malloc_r+0xdc>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	6053      	str	r3, [r2, #4]
 800b5dc:	e7de      	b.n	800b59c <_malloc_r+0xa8>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	6033      	str	r3, [r6, #0]
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f000 f80c 	bl	800b600 <__malloc_unlock>
 800b5e8:	e794      	b.n	800b514 <_malloc_r+0x20>
 800b5ea:	6005      	str	r5, [r0, #0]
 800b5ec:	e7d6      	b.n	800b59c <_malloc_r+0xa8>
 800b5ee:	bf00      	nop
 800b5f0:	200051b4 	.word	0x200051b4

0800b5f4 <__malloc_lock>:
 800b5f4:	4801      	ldr	r0, [pc, #4]	@ (800b5fc <__malloc_lock+0x8>)
 800b5f6:	f001 bd0c 	b.w	800d012 <__retarget_lock_acquire_recursive>
 800b5fa:	bf00      	nop
 800b5fc:	200052f8 	.word	0x200052f8

0800b600 <__malloc_unlock>:
 800b600:	4801      	ldr	r0, [pc, #4]	@ (800b608 <__malloc_unlock+0x8>)
 800b602:	f001 bd07 	b.w	800d014 <__retarget_lock_release_recursive>
 800b606:	bf00      	nop
 800b608:	200052f8 	.word	0x200052f8

0800b60c <sulp>:
 800b60c:	b570      	push	{r4, r5, r6, lr}
 800b60e:	4604      	mov	r4, r0
 800b610:	460d      	mov	r5, r1
 800b612:	ec45 4b10 	vmov	d0, r4, r5
 800b616:	4616      	mov	r6, r2
 800b618:	f003 fa70 	bl	800eafc <__ulp>
 800b61c:	ec51 0b10 	vmov	r0, r1, d0
 800b620:	b17e      	cbz	r6, 800b642 <sulp+0x36>
 800b622:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b626:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	dd09      	ble.n	800b642 <sulp+0x36>
 800b62e:	051b      	lsls	r3, r3, #20
 800b630:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b634:	2400      	movs	r4, #0
 800b636:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b63a:	4622      	mov	r2, r4
 800b63c:	462b      	mov	r3, r5
 800b63e:	f7f4 ffdb 	bl	80005f8 <__aeabi_dmul>
 800b642:	ec41 0b10 	vmov	d0, r0, r1
 800b646:	bd70      	pop	{r4, r5, r6, pc}

0800b648 <_strtod_l>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	b09f      	sub	sp, #124	@ 0x7c
 800b64e:	460c      	mov	r4, r1
 800b650:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b652:	2200      	movs	r2, #0
 800b654:	921a      	str	r2, [sp, #104]	@ 0x68
 800b656:	9005      	str	r0, [sp, #20]
 800b658:	f04f 0a00 	mov.w	sl, #0
 800b65c:	f04f 0b00 	mov.w	fp, #0
 800b660:	460a      	mov	r2, r1
 800b662:	9219      	str	r2, [sp, #100]	@ 0x64
 800b664:	7811      	ldrb	r1, [r2, #0]
 800b666:	292b      	cmp	r1, #43	@ 0x2b
 800b668:	d04a      	beq.n	800b700 <_strtod_l+0xb8>
 800b66a:	d838      	bhi.n	800b6de <_strtod_l+0x96>
 800b66c:	290d      	cmp	r1, #13
 800b66e:	d832      	bhi.n	800b6d6 <_strtod_l+0x8e>
 800b670:	2908      	cmp	r1, #8
 800b672:	d832      	bhi.n	800b6da <_strtod_l+0x92>
 800b674:	2900      	cmp	r1, #0
 800b676:	d03b      	beq.n	800b6f0 <_strtod_l+0xa8>
 800b678:	2200      	movs	r2, #0
 800b67a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b67c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b67e:	782a      	ldrb	r2, [r5, #0]
 800b680:	2a30      	cmp	r2, #48	@ 0x30
 800b682:	f040 80b2 	bne.w	800b7ea <_strtod_l+0x1a2>
 800b686:	786a      	ldrb	r2, [r5, #1]
 800b688:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b68c:	2a58      	cmp	r2, #88	@ 0x58
 800b68e:	d16e      	bne.n	800b76e <_strtod_l+0x126>
 800b690:	9302      	str	r3, [sp, #8]
 800b692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	ab1a      	add	r3, sp, #104	@ 0x68
 800b698:	9300      	str	r3, [sp, #0]
 800b69a:	4a8f      	ldr	r2, [pc, #572]	@ (800b8d8 <_strtod_l+0x290>)
 800b69c:	9805      	ldr	r0, [sp, #20]
 800b69e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b6a0:	a919      	add	r1, sp, #100	@ 0x64
 800b6a2:	f002 fbdb 	bl	800de5c <__gethex>
 800b6a6:	f010 060f 	ands.w	r6, r0, #15
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	d005      	beq.n	800b6ba <_strtod_l+0x72>
 800b6ae:	2e06      	cmp	r6, #6
 800b6b0:	d128      	bne.n	800b704 <_strtod_l+0xbc>
 800b6b2:	3501      	adds	r5, #1
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b6b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f040 858e 	bne.w	800c1de <_strtod_l+0xb96>
 800b6c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c4:	b1cb      	cbz	r3, 800b6fa <_strtod_l+0xb2>
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b6cc:	ec43 2b10 	vmov	d0, r2, r3
 800b6d0:	b01f      	add	sp, #124	@ 0x7c
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	2920      	cmp	r1, #32
 800b6d8:	d1ce      	bne.n	800b678 <_strtod_l+0x30>
 800b6da:	3201      	adds	r2, #1
 800b6dc:	e7c1      	b.n	800b662 <_strtod_l+0x1a>
 800b6de:	292d      	cmp	r1, #45	@ 0x2d
 800b6e0:	d1ca      	bne.n	800b678 <_strtod_l+0x30>
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	910e      	str	r1, [sp, #56]	@ 0x38
 800b6e6:	1c51      	adds	r1, r2, #1
 800b6e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b6ea:	7852      	ldrb	r2, [r2, #1]
 800b6ec:	2a00      	cmp	r2, #0
 800b6ee:	d1c5      	bne.n	800b67c <_strtod_l+0x34>
 800b6f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b6f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 8570 	bne.w	800c1da <_strtod_l+0xb92>
 800b6fa:	4652      	mov	r2, sl
 800b6fc:	465b      	mov	r3, fp
 800b6fe:	e7e5      	b.n	800b6cc <_strtod_l+0x84>
 800b700:	2100      	movs	r1, #0
 800b702:	e7ef      	b.n	800b6e4 <_strtod_l+0x9c>
 800b704:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b706:	b13a      	cbz	r2, 800b718 <_strtod_l+0xd0>
 800b708:	2135      	movs	r1, #53	@ 0x35
 800b70a:	a81c      	add	r0, sp, #112	@ 0x70
 800b70c:	f003 faf0 	bl	800ecf0 <__copybits>
 800b710:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b712:	9805      	ldr	r0, [sp, #20]
 800b714:	f002 fec6 	bl	800e4a4 <_Bfree>
 800b718:	3e01      	subs	r6, #1
 800b71a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b71c:	2e04      	cmp	r6, #4
 800b71e:	d806      	bhi.n	800b72e <_strtod_l+0xe6>
 800b720:	e8df f006 	tbb	[pc, r6]
 800b724:	201d0314 	.word	0x201d0314
 800b728:	14          	.byte	0x14
 800b729:	00          	.byte	0x00
 800b72a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b72e:	05e1      	lsls	r1, r4, #23
 800b730:	bf48      	it	mi
 800b732:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b736:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b73a:	0d1b      	lsrs	r3, r3, #20
 800b73c:	051b      	lsls	r3, r3, #20
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1bb      	bne.n	800b6ba <_strtod_l+0x72>
 800b742:	f001 fc3b 	bl	800cfbc <__errno>
 800b746:	2322      	movs	r3, #34	@ 0x22
 800b748:	6003      	str	r3, [r0, #0]
 800b74a:	e7b6      	b.n	800b6ba <_strtod_l+0x72>
 800b74c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b750:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b754:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b758:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b75c:	e7e7      	b.n	800b72e <_strtod_l+0xe6>
 800b75e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b8e0 <_strtod_l+0x298>
 800b762:	e7e4      	b.n	800b72e <_strtod_l+0xe6>
 800b764:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b768:	f04f 3aff 	mov.w	sl, #4294967295
 800b76c:	e7df      	b.n	800b72e <_strtod_l+0xe6>
 800b76e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	9219      	str	r2, [sp, #100]	@ 0x64
 800b774:	785b      	ldrb	r3, [r3, #1]
 800b776:	2b30      	cmp	r3, #48	@ 0x30
 800b778:	d0f9      	beq.n	800b76e <_strtod_l+0x126>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d09d      	beq.n	800b6ba <_strtod_l+0x72>
 800b77e:	2301      	movs	r3, #1
 800b780:	2700      	movs	r7, #0
 800b782:	9308      	str	r3, [sp, #32]
 800b784:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b786:	930c      	str	r3, [sp, #48]	@ 0x30
 800b788:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b78a:	46b9      	mov	r9, r7
 800b78c:	220a      	movs	r2, #10
 800b78e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b790:	7805      	ldrb	r5, [r0, #0]
 800b792:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b796:	b2d9      	uxtb	r1, r3
 800b798:	2909      	cmp	r1, #9
 800b79a:	d928      	bls.n	800b7ee <_strtod_l+0x1a6>
 800b79c:	494f      	ldr	r1, [pc, #316]	@ (800b8dc <_strtod_l+0x294>)
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f001 fafd 	bl	800cd9e <strncmp>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d032      	beq.n	800b80e <_strtod_l+0x1c6>
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	462a      	mov	r2, r5
 800b7ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800b7ae:	464d      	mov	r5, r9
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2a65      	cmp	r2, #101	@ 0x65
 800b7b4:	d001      	beq.n	800b7ba <_strtod_l+0x172>
 800b7b6:	2a45      	cmp	r2, #69	@ 0x45
 800b7b8:	d114      	bne.n	800b7e4 <_strtod_l+0x19c>
 800b7ba:	b91d      	cbnz	r5, 800b7c4 <_strtod_l+0x17c>
 800b7bc:	9a08      	ldr	r2, [sp, #32]
 800b7be:	4302      	orrs	r2, r0
 800b7c0:	d096      	beq.n	800b6f0 <_strtod_l+0xa8>
 800b7c2:	2500      	movs	r5, #0
 800b7c4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b7c6:	1c62      	adds	r2, r4, #1
 800b7c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b7ca:	7862      	ldrb	r2, [r4, #1]
 800b7cc:	2a2b      	cmp	r2, #43	@ 0x2b
 800b7ce:	d07a      	beq.n	800b8c6 <_strtod_l+0x27e>
 800b7d0:	2a2d      	cmp	r2, #45	@ 0x2d
 800b7d2:	d07e      	beq.n	800b8d2 <_strtod_l+0x28a>
 800b7d4:	f04f 0c00 	mov.w	ip, #0
 800b7d8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b7dc:	2909      	cmp	r1, #9
 800b7de:	f240 8085 	bls.w	800b8ec <_strtod_l+0x2a4>
 800b7e2:	9419      	str	r4, [sp, #100]	@ 0x64
 800b7e4:	f04f 0800 	mov.w	r8, #0
 800b7e8:	e0a5      	b.n	800b936 <_strtod_l+0x2ee>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	e7c8      	b.n	800b780 <_strtod_l+0x138>
 800b7ee:	f1b9 0f08 	cmp.w	r9, #8
 800b7f2:	bfd8      	it	le
 800b7f4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b7f6:	f100 0001 	add.w	r0, r0, #1
 800b7fa:	bfda      	itte	le
 800b7fc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b800:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b802:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b806:	f109 0901 	add.w	r9, r9, #1
 800b80a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b80c:	e7bf      	b.n	800b78e <_strtod_l+0x146>
 800b80e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b810:	1c5a      	adds	r2, r3, #1
 800b812:	9219      	str	r2, [sp, #100]	@ 0x64
 800b814:	785a      	ldrb	r2, [r3, #1]
 800b816:	f1b9 0f00 	cmp.w	r9, #0
 800b81a:	d03b      	beq.n	800b894 <_strtod_l+0x24c>
 800b81c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b81e:	464d      	mov	r5, r9
 800b820:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b824:	2b09      	cmp	r3, #9
 800b826:	d912      	bls.n	800b84e <_strtod_l+0x206>
 800b828:	2301      	movs	r3, #1
 800b82a:	e7c2      	b.n	800b7b2 <_strtod_l+0x16a>
 800b82c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b82e:	1c5a      	adds	r2, r3, #1
 800b830:	9219      	str	r2, [sp, #100]	@ 0x64
 800b832:	785a      	ldrb	r2, [r3, #1]
 800b834:	3001      	adds	r0, #1
 800b836:	2a30      	cmp	r2, #48	@ 0x30
 800b838:	d0f8      	beq.n	800b82c <_strtod_l+0x1e4>
 800b83a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b83e:	2b08      	cmp	r3, #8
 800b840:	f200 84d2 	bhi.w	800c1e8 <_strtod_l+0xba0>
 800b844:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b846:	900a      	str	r0, [sp, #40]	@ 0x28
 800b848:	2000      	movs	r0, #0
 800b84a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b84c:	4605      	mov	r5, r0
 800b84e:	3a30      	subs	r2, #48	@ 0x30
 800b850:	f100 0301 	add.w	r3, r0, #1
 800b854:	d018      	beq.n	800b888 <_strtod_l+0x240>
 800b856:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b858:	4419      	add	r1, r3
 800b85a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b85c:	462e      	mov	r6, r5
 800b85e:	f04f 0e0a 	mov.w	lr, #10
 800b862:	1c71      	adds	r1, r6, #1
 800b864:	eba1 0c05 	sub.w	ip, r1, r5
 800b868:	4563      	cmp	r3, ip
 800b86a:	dc15      	bgt.n	800b898 <_strtod_l+0x250>
 800b86c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b870:	182b      	adds	r3, r5, r0
 800b872:	2b08      	cmp	r3, #8
 800b874:	f105 0501 	add.w	r5, r5, #1
 800b878:	4405      	add	r5, r0
 800b87a:	dc1a      	bgt.n	800b8b2 <_strtod_l+0x26a>
 800b87c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b87e:	230a      	movs	r3, #10
 800b880:	fb03 2301 	mla	r3, r3, r1, r2
 800b884:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b886:	2300      	movs	r3, #0
 800b888:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b88a:	1c51      	adds	r1, r2, #1
 800b88c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b88e:	7852      	ldrb	r2, [r2, #1]
 800b890:	4618      	mov	r0, r3
 800b892:	e7c5      	b.n	800b820 <_strtod_l+0x1d8>
 800b894:	4648      	mov	r0, r9
 800b896:	e7ce      	b.n	800b836 <_strtod_l+0x1ee>
 800b898:	2e08      	cmp	r6, #8
 800b89a:	dc05      	bgt.n	800b8a8 <_strtod_l+0x260>
 800b89c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b89e:	fb0e f606 	mul.w	r6, lr, r6
 800b8a2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b8a4:	460e      	mov	r6, r1
 800b8a6:	e7dc      	b.n	800b862 <_strtod_l+0x21a>
 800b8a8:	2910      	cmp	r1, #16
 800b8aa:	bfd8      	it	le
 800b8ac:	fb0e f707 	mulle.w	r7, lr, r7
 800b8b0:	e7f8      	b.n	800b8a4 <_strtod_l+0x25c>
 800b8b2:	2b0f      	cmp	r3, #15
 800b8b4:	bfdc      	itt	le
 800b8b6:	230a      	movle	r3, #10
 800b8b8:	fb03 2707 	mlale	r7, r3, r7, r2
 800b8bc:	e7e3      	b.n	800b886 <_strtod_l+0x23e>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	e77a      	b.n	800b7bc <_strtod_l+0x174>
 800b8c6:	f04f 0c00 	mov.w	ip, #0
 800b8ca:	1ca2      	adds	r2, r4, #2
 800b8cc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b8ce:	78a2      	ldrb	r2, [r4, #2]
 800b8d0:	e782      	b.n	800b7d8 <_strtod_l+0x190>
 800b8d2:	f04f 0c01 	mov.w	ip, #1
 800b8d6:	e7f8      	b.n	800b8ca <_strtod_l+0x282>
 800b8d8:	0800fcb8 	.word	0x0800fcb8
 800b8dc:	0800fad0 	.word	0x0800fad0
 800b8e0:	7ff00000 	.word	0x7ff00000
 800b8e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8e6:	1c51      	adds	r1, r2, #1
 800b8e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8ea:	7852      	ldrb	r2, [r2, #1]
 800b8ec:	2a30      	cmp	r2, #48	@ 0x30
 800b8ee:	d0f9      	beq.n	800b8e4 <_strtod_l+0x29c>
 800b8f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b8f4:	2908      	cmp	r1, #8
 800b8f6:	f63f af75 	bhi.w	800b7e4 <_strtod_l+0x19c>
 800b8fa:	3a30      	subs	r2, #48	@ 0x30
 800b8fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b900:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b902:	f04f 080a 	mov.w	r8, #10
 800b906:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b908:	1c56      	adds	r6, r2, #1
 800b90a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b90c:	7852      	ldrb	r2, [r2, #1]
 800b90e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b912:	f1be 0f09 	cmp.w	lr, #9
 800b916:	d939      	bls.n	800b98c <_strtod_l+0x344>
 800b918:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b91a:	1a76      	subs	r6, r6, r1
 800b91c:	2e08      	cmp	r6, #8
 800b91e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b922:	dc03      	bgt.n	800b92c <_strtod_l+0x2e4>
 800b924:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b926:	4588      	cmp	r8, r1
 800b928:	bfa8      	it	ge
 800b92a:	4688      	movge	r8, r1
 800b92c:	f1bc 0f00 	cmp.w	ip, #0
 800b930:	d001      	beq.n	800b936 <_strtod_l+0x2ee>
 800b932:	f1c8 0800 	rsb	r8, r8, #0
 800b936:	2d00      	cmp	r5, #0
 800b938:	d14e      	bne.n	800b9d8 <_strtod_l+0x390>
 800b93a:	9908      	ldr	r1, [sp, #32]
 800b93c:	4308      	orrs	r0, r1
 800b93e:	f47f aebc 	bne.w	800b6ba <_strtod_l+0x72>
 800b942:	2b00      	cmp	r3, #0
 800b944:	f47f aed4 	bne.w	800b6f0 <_strtod_l+0xa8>
 800b948:	2a69      	cmp	r2, #105	@ 0x69
 800b94a:	d028      	beq.n	800b99e <_strtod_l+0x356>
 800b94c:	dc25      	bgt.n	800b99a <_strtod_l+0x352>
 800b94e:	2a49      	cmp	r2, #73	@ 0x49
 800b950:	d025      	beq.n	800b99e <_strtod_l+0x356>
 800b952:	2a4e      	cmp	r2, #78	@ 0x4e
 800b954:	f47f aecc 	bne.w	800b6f0 <_strtod_l+0xa8>
 800b958:	499a      	ldr	r1, [pc, #616]	@ (800bbc4 <_strtod_l+0x57c>)
 800b95a:	a819      	add	r0, sp, #100	@ 0x64
 800b95c:	f002 fca0 	bl	800e2a0 <__match>
 800b960:	2800      	cmp	r0, #0
 800b962:	f43f aec5 	beq.w	800b6f0 <_strtod_l+0xa8>
 800b966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	2b28      	cmp	r3, #40	@ 0x28
 800b96c:	d12e      	bne.n	800b9cc <_strtod_l+0x384>
 800b96e:	4996      	ldr	r1, [pc, #600]	@ (800bbc8 <_strtod_l+0x580>)
 800b970:	aa1c      	add	r2, sp, #112	@ 0x70
 800b972:	a819      	add	r0, sp, #100	@ 0x64
 800b974:	f002 fca8 	bl	800e2c8 <__hexnan>
 800b978:	2805      	cmp	r0, #5
 800b97a:	d127      	bne.n	800b9cc <_strtod_l+0x384>
 800b97c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b97e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b982:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b986:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b98a:	e696      	b.n	800b6ba <_strtod_l+0x72>
 800b98c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b98e:	fb08 2101 	mla	r1, r8, r1, r2
 800b992:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b996:	9209      	str	r2, [sp, #36]	@ 0x24
 800b998:	e7b5      	b.n	800b906 <_strtod_l+0x2be>
 800b99a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b99c:	e7da      	b.n	800b954 <_strtod_l+0x30c>
 800b99e:	498b      	ldr	r1, [pc, #556]	@ (800bbcc <_strtod_l+0x584>)
 800b9a0:	a819      	add	r0, sp, #100	@ 0x64
 800b9a2:	f002 fc7d 	bl	800e2a0 <__match>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	f43f aea2 	beq.w	800b6f0 <_strtod_l+0xa8>
 800b9ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9ae:	4988      	ldr	r1, [pc, #544]	@ (800bbd0 <_strtod_l+0x588>)
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	a819      	add	r0, sp, #100	@ 0x64
 800b9b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b9b6:	f002 fc73 	bl	800e2a0 <__match>
 800b9ba:	b910      	cbnz	r0, 800b9c2 <_strtod_l+0x37a>
 800b9bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9be:	3301      	adds	r3, #1
 800b9c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b9c2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800bbe0 <_strtod_l+0x598>
 800b9c6:	f04f 0a00 	mov.w	sl, #0
 800b9ca:	e676      	b.n	800b6ba <_strtod_l+0x72>
 800b9cc:	4881      	ldr	r0, [pc, #516]	@ (800bbd4 <_strtod_l+0x58c>)
 800b9ce:	f001 fb33 	bl	800d038 <nan>
 800b9d2:	ec5b ab10 	vmov	sl, fp, d0
 800b9d6:	e670      	b.n	800b6ba <_strtod_l+0x72>
 800b9d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9da:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b9dc:	eba8 0303 	sub.w	r3, r8, r3
 800b9e0:	f1b9 0f00 	cmp.w	r9, #0
 800b9e4:	bf08      	it	eq
 800b9e6:	46a9      	moveq	r9, r5
 800b9e8:	2d10      	cmp	r5, #16
 800b9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9ec:	462c      	mov	r4, r5
 800b9ee:	bfa8      	it	ge
 800b9f0:	2410      	movge	r4, #16
 800b9f2:	f7f4 fd87 	bl	8000504 <__aeabi_ui2d>
 800b9f6:	2d09      	cmp	r5, #9
 800b9f8:	4682      	mov	sl, r0
 800b9fa:	468b      	mov	fp, r1
 800b9fc:	dc13      	bgt.n	800ba26 <_strtod_l+0x3de>
 800b9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f43f ae5a 	beq.w	800b6ba <_strtod_l+0x72>
 800ba06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba08:	dd78      	ble.n	800bafc <_strtod_l+0x4b4>
 800ba0a:	2b16      	cmp	r3, #22
 800ba0c:	dc5f      	bgt.n	800bace <_strtod_l+0x486>
 800ba0e:	4972      	ldr	r1, [pc, #456]	@ (800bbd8 <_strtod_l+0x590>)
 800ba10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba18:	4652      	mov	r2, sl
 800ba1a:	465b      	mov	r3, fp
 800ba1c:	f7f4 fdec 	bl	80005f8 <__aeabi_dmul>
 800ba20:	4682      	mov	sl, r0
 800ba22:	468b      	mov	fp, r1
 800ba24:	e649      	b.n	800b6ba <_strtod_l+0x72>
 800ba26:	4b6c      	ldr	r3, [pc, #432]	@ (800bbd8 <_strtod_l+0x590>)
 800ba28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba2c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ba30:	f7f4 fde2 	bl	80005f8 <__aeabi_dmul>
 800ba34:	4682      	mov	sl, r0
 800ba36:	4638      	mov	r0, r7
 800ba38:	468b      	mov	fp, r1
 800ba3a:	f7f4 fd63 	bl	8000504 <__aeabi_ui2d>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4650      	mov	r0, sl
 800ba44:	4659      	mov	r1, fp
 800ba46:	f7f4 fc21 	bl	800028c <__adddf3>
 800ba4a:	2d0f      	cmp	r5, #15
 800ba4c:	4682      	mov	sl, r0
 800ba4e:	468b      	mov	fp, r1
 800ba50:	ddd5      	ble.n	800b9fe <_strtod_l+0x3b6>
 800ba52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba54:	1b2c      	subs	r4, r5, r4
 800ba56:	441c      	add	r4, r3
 800ba58:	2c00      	cmp	r4, #0
 800ba5a:	f340 8093 	ble.w	800bb84 <_strtod_l+0x53c>
 800ba5e:	f014 030f 	ands.w	r3, r4, #15
 800ba62:	d00a      	beq.n	800ba7a <_strtod_l+0x432>
 800ba64:	495c      	ldr	r1, [pc, #368]	@ (800bbd8 <_strtod_l+0x590>)
 800ba66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	465b      	mov	r3, fp
 800ba6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba72:	f7f4 fdc1 	bl	80005f8 <__aeabi_dmul>
 800ba76:	4682      	mov	sl, r0
 800ba78:	468b      	mov	fp, r1
 800ba7a:	f034 040f 	bics.w	r4, r4, #15
 800ba7e:	d073      	beq.n	800bb68 <_strtod_l+0x520>
 800ba80:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ba84:	dd49      	ble.n	800bb1a <_strtod_l+0x4d2>
 800ba86:	2400      	movs	r4, #0
 800ba88:	46a0      	mov	r8, r4
 800ba8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba8c:	46a1      	mov	r9, r4
 800ba8e:	9a05      	ldr	r2, [sp, #20]
 800ba90:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800bbe0 <_strtod_l+0x598>
 800ba94:	2322      	movs	r3, #34	@ 0x22
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	f04f 0a00 	mov.w	sl, #0
 800ba9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f43f ae0b 	beq.w	800b6ba <_strtod_l+0x72>
 800baa4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baa6:	9805      	ldr	r0, [sp, #20]
 800baa8:	f002 fcfc 	bl	800e4a4 <_Bfree>
 800baac:	9805      	ldr	r0, [sp, #20]
 800baae:	4649      	mov	r1, r9
 800bab0:	f002 fcf8 	bl	800e4a4 <_Bfree>
 800bab4:	9805      	ldr	r0, [sp, #20]
 800bab6:	4641      	mov	r1, r8
 800bab8:	f002 fcf4 	bl	800e4a4 <_Bfree>
 800babc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800babe:	9805      	ldr	r0, [sp, #20]
 800bac0:	f002 fcf0 	bl	800e4a4 <_Bfree>
 800bac4:	9805      	ldr	r0, [sp, #20]
 800bac6:	4621      	mov	r1, r4
 800bac8:	f002 fcec 	bl	800e4a4 <_Bfree>
 800bacc:	e5f5      	b.n	800b6ba <_strtod_l+0x72>
 800bace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bad0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800bad4:	4293      	cmp	r3, r2
 800bad6:	dbbc      	blt.n	800ba52 <_strtod_l+0x40a>
 800bad8:	4c3f      	ldr	r4, [pc, #252]	@ (800bbd8 <_strtod_l+0x590>)
 800bada:	f1c5 050f 	rsb	r5, r5, #15
 800bade:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bae2:	4652      	mov	r2, sl
 800bae4:	465b      	mov	r3, fp
 800bae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baea:	f7f4 fd85 	bl	80005f8 <__aeabi_dmul>
 800baee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf0:	1b5d      	subs	r5, r3, r5
 800baf2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800baf6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bafa:	e78f      	b.n	800ba1c <_strtod_l+0x3d4>
 800bafc:	3316      	adds	r3, #22
 800bafe:	dba8      	blt.n	800ba52 <_strtod_l+0x40a>
 800bb00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb02:	eba3 0808 	sub.w	r8, r3, r8
 800bb06:	4b34      	ldr	r3, [pc, #208]	@ (800bbd8 <_strtod_l+0x590>)
 800bb08:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800bb0c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bb10:	4650      	mov	r0, sl
 800bb12:	4659      	mov	r1, fp
 800bb14:	f7f4 fe9a 	bl	800084c <__aeabi_ddiv>
 800bb18:	e782      	b.n	800ba20 <_strtod_l+0x3d8>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4f2f      	ldr	r7, [pc, #188]	@ (800bbdc <_strtod_l+0x594>)
 800bb1e:	1124      	asrs	r4, r4, #4
 800bb20:	4650      	mov	r0, sl
 800bb22:	4659      	mov	r1, fp
 800bb24:	461e      	mov	r6, r3
 800bb26:	2c01      	cmp	r4, #1
 800bb28:	dc21      	bgt.n	800bb6e <_strtod_l+0x526>
 800bb2a:	b10b      	cbz	r3, 800bb30 <_strtod_l+0x4e8>
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	468b      	mov	fp, r1
 800bb30:	492a      	ldr	r1, [pc, #168]	@ (800bbdc <_strtod_l+0x594>)
 800bb32:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800bb36:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800bb3a:	4652      	mov	r2, sl
 800bb3c:	465b      	mov	r3, fp
 800bb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb42:	f7f4 fd59 	bl	80005f8 <__aeabi_dmul>
 800bb46:	4b26      	ldr	r3, [pc, #152]	@ (800bbe0 <_strtod_l+0x598>)
 800bb48:	460a      	mov	r2, r1
 800bb4a:	400b      	ands	r3, r1
 800bb4c:	4925      	ldr	r1, [pc, #148]	@ (800bbe4 <_strtod_l+0x59c>)
 800bb4e:	428b      	cmp	r3, r1
 800bb50:	4682      	mov	sl, r0
 800bb52:	d898      	bhi.n	800ba86 <_strtod_l+0x43e>
 800bb54:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800bb58:	428b      	cmp	r3, r1
 800bb5a:	bf86      	itte	hi
 800bb5c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800bbe8 <_strtod_l+0x5a0>
 800bb60:	f04f 3aff 	movhi.w	sl, #4294967295
 800bb64:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9308      	str	r3, [sp, #32]
 800bb6c:	e076      	b.n	800bc5c <_strtod_l+0x614>
 800bb6e:	07e2      	lsls	r2, r4, #31
 800bb70:	d504      	bpl.n	800bb7c <_strtod_l+0x534>
 800bb72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb76:	f7f4 fd3f 	bl	80005f8 <__aeabi_dmul>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	3601      	adds	r6, #1
 800bb7e:	1064      	asrs	r4, r4, #1
 800bb80:	3708      	adds	r7, #8
 800bb82:	e7d0      	b.n	800bb26 <_strtod_l+0x4de>
 800bb84:	d0f0      	beq.n	800bb68 <_strtod_l+0x520>
 800bb86:	4264      	negs	r4, r4
 800bb88:	f014 020f 	ands.w	r2, r4, #15
 800bb8c:	d00a      	beq.n	800bba4 <_strtod_l+0x55c>
 800bb8e:	4b12      	ldr	r3, [pc, #72]	@ (800bbd8 <_strtod_l+0x590>)
 800bb90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb94:	4650      	mov	r0, sl
 800bb96:	4659      	mov	r1, fp
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	f7f4 fe56 	bl	800084c <__aeabi_ddiv>
 800bba0:	4682      	mov	sl, r0
 800bba2:	468b      	mov	fp, r1
 800bba4:	1124      	asrs	r4, r4, #4
 800bba6:	d0df      	beq.n	800bb68 <_strtod_l+0x520>
 800bba8:	2c1f      	cmp	r4, #31
 800bbaa:	dd1f      	ble.n	800bbec <_strtod_l+0x5a4>
 800bbac:	2400      	movs	r4, #0
 800bbae:	46a0      	mov	r8, r4
 800bbb0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bbb2:	46a1      	mov	r9, r4
 800bbb4:	9a05      	ldr	r2, [sp, #20]
 800bbb6:	2322      	movs	r3, #34	@ 0x22
 800bbb8:	f04f 0a00 	mov.w	sl, #0
 800bbbc:	f04f 0b00 	mov.w	fp, #0
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	e76b      	b.n	800ba9c <_strtod_l+0x454>
 800bbc4:	0800fadf 	.word	0x0800fadf
 800bbc8:	0800fca4 	.word	0x0800fca4
 800bbcc:	0800fad7 	.word	0x0800fad7
 800bbd0:	0800fb11 	.word	0x0800fb11
 800bbd4:	0800fca0 	.word	0x0800fca0
 800bbd8:	0800fd30 	.word	0x0800fd30
 800bbdc:	0800fd08 	.word	0x0800fd08
 800bbe0:	7ff00000 	.word	0x7ff00000
 800bbe4:	7ca00000 	.word	0x7ca00000
 800bbe8:	7fefffff 	.word	0x7fefffff
 800bbec:	f014 0310 	ands.w	r3, r4, #16
 800bbf0:	bf18      	it	ne
 800bbf2:	236a      	movne	r3, #106	@ 0x6a
 800bbf4:	4ea9      	ldr	r6, [pc, #676]	@ (800be9c <_strtod_l+0x854>)
 800bbf6:	9308      	str	r3, [sp, #32]
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	4659      	mov	r1, fp
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	07e7      	lsls	r7, r4, #31
 800bc00:	d504      	bpl.n	800bc0c <_strtod_l+0x5c4>
 800bc02:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	1064      	asrs	r4, r4, #1
 800bc0e:	f106 0608 	add.w	r6, r6, #8
 800bc12:	d1f4      	bne.n	800bbfe <_strtod_l+0x5b6>
 800bc14:	b10b      	cbz	r3, 800bc1a <_strtod_l+0x5d2>
 800bc16:	4682      	mov	sl, r0
 800bc18:	468b      	mov	fp, r1
 800bc1a:	9b08      	ldr	r3, [sp, #32]
 800bc1c:	b1b3      	cbz	r3, 800bc4c <_strtod_l+0x604>
 800bc1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bc22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	4659      	mov	r1, fp
 800bc2a:	dd0f      	ble.n	800bc4c <_strtod_l+0x604>
 800bc2c:	2b1f      	cmp	r3, #31
 800bc2e:	dd56      	ble.n	800bcde <_strtod_l+0x696>
 800bc30:	2b34      	cmp	r3, #52	@ 0x34
 800bc32:	bfde      	ittt	le
 800bc34:	f04f 33ff 	movle.w	r3, #4294967295
 800bc38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bc3c:	4093      	lslle	r3, r2
 800bc3e:	f04f 0a00 	mov.w	sl, #0
 800bc42:	bfcc      	ite	gt
 800bc44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bc48:	ea03 0b01 	andle.w	fp, r3, r1
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2300      	movs	r3, #0
 800bc50:	4650      	mov	r0, sl
 800bc52:	4659      	mov	r1, fp
 800bc54:	f7f4 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d1a7      	bne.n	800bbac <_strtod_l+0x564>
 800bc5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc62:	9805      	ldr	r0, [sp, #20]
 800bc64:	462b      	mov	r3, r5
 800bc66:	464a      	mov	r2, r9
 800bc68:	f002 fc84 	bl	800e574 <__s2b>
 800bc6c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	f43f af09 	beq.w	800ba86 <_strtod_l+0x43e>
 800bc74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc78:	2a00      	cmp	r2, #0
 800bc7a:	eba3 0308 	sub.w	r3, r3, r8
 800bc7e:	bfa8      	it	ge
 800bc80:	2300      	movge	r3, #0
 800bc82:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc84:	2400      	movs	r4, #0
 800bc86:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc8a:	9316      	str	r3, [sp, #88]	@ 0x58
 800bc8c:	46a0      	mov	r8, r4
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc90:	9805      	ldr	r0, [sp, #20]
 800bc92:	6859      	ldr	r1, [r3, #4]
 800bc94:	f002 fbc6 	bl	800e424 <_Balloc>
 800bc98:	4681      	mov	r9, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	f43f aef7 	beq.w	800ba8e <_strtod_l+0x446>
 800bca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bca2:	691a      	ldr	r2, [r3, #16]
 800bca4:	3202      	adds	r2, #2
 800bca6:	f103 010c 	add.w	r1, r3, #12
 800bcaa:	0092      	lsls	r2, r2, #2
 800bcac:	300c      	adds	r0, #12
 800bcae:	f001 f9b2 	bl	800d016 <memcpy>
 800bcb2:	ec4b ab10 	vmov	d0, sl, fp
 800bcb6:	9805      	ldr	r0, [sp, #20]
 800bcb8:	aa1c      	add	r2, sp, #112	@ 0x70
 800bcba:	a91b      	add	r1, sp, #108	@ 0x6c
 800bcbc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bcc0:	f002 ff8c 	bl	800ebdc <__d2b>
 800bcc4:	901a      	str	r0, [sp, #104]	@ 0x68
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f43f aee1 	beq.w	800ba8e <_strtod_l+0x446>
 800bccc:	9805      	ldr	r0, [sp, #20]
 800bcce:	2101      	movs	r1, #1
 800bcd0:	f002 fce6 	bl	800e6a0 <__i2b>
 800bcd4:	4680      	mov	r8, r0
 800bcd6:	b948      	cbnz	r0, 800bcec <_strtod_l+0x6a4>
 800bcd8:	f04f 0800 	mov.w	r8, #0
 800bcdc:	e6d7      	b.n	800ba8e <_strtod_l+0x446>
 800bcde:	f04f 32ff 	mov.w	r2, #4294967295
 800bce2:	fa02 f303 	lsl.w	r3, r2, r3
 800bce6:	ea03 0a0a 	and.w	sl, r3, sl
 800bcea:	e7af      	b.n	800bc4c <_strtod_l+0x604>
 800bcec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bcee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	bfab      	itete	ge
 800bcf4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bcf6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bcf8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bcfa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bcfc:	bfac      	ite	ge
 800bcfe:	18ef      	addge	r7, r5, r3
 800bd00:	1b5e      	sublt	r6, r3, r5
 800bd02:	9b08      	ldr	r3, [sp, #32]
 800bd04:	1aed      	subs	r5, r5, r3
 800bd06:	4415      	add	r5, r2
 800bd08:	4b65      	ldr	r3, [pc, #404]	@ (800bea0 <_strtod_l+0x858>)
 800bd0a:	3d01      	subs	r5, #1
 800bd0c:	429d      	cmp	r5, r3
 800bd0e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bd12:	da50      	bge.n	800bdb6 <_strtod_l+0x76e>
 800bd14:	1b5b      	subs	r3, r3, r5
 800bd16:	2b1f      	cmp	r3, #31
 800bd18:	eba2 0203 	sub.w	r2, r2, r3
 800bd1c:	f04f 0101 	mov.w	r1, #1
 800bd20:	dc3d      	bgt.n	800bd9e <_strtod_l+0x756>
 800bd22:	fa01 f303 	lsl.w	r3, r1, r3
 800bd26:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd28:	2300      	movs	r3, #0
 800bd2a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd2c:	18bd      	adds	r5, r7, r2
 800bd2e:	9b08      	ldr	r3, [sp, #32]
 800bd30:	42af      	cmp	r7, r5
 800bd32:	4416      	add	r6, r2
 800bd34:	441e      	add	r6, r3
 800bd36:	463b      	mov	r3, r7
 800bd38:	bfa8      	it	ge
 800bd3a:	462b      	movge	r3, r5
 800bd3c:	42b3      	cmp	r3, r6
 800bd3e:	bfa8      	it	ge
 800bd40:	4633      	movge	r3, r6
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	bfc2      	ittt	gt
 800bd46:	1aed      	subgt	r5, r5, r3
 800bd48:	1af6      	subgt	r6, r6, r3
 800bd4a:	1aff      	subgt	r7, r7, r3
 800bd4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	dd16      	ble.n	800bd80 <_strtod_l+0x738>
 800bd52:	4641      	mov	r1, r8
 800bd54:	9805      	ldr	r0, [sp, #20]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f002 fd5a 	bl	800e810 <__pow5mult>
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d0ba      	beq.n	800bcd8 <_strtod_l+0x690>
 800bd62:	4601      	mov	r1, r0
 800bd64:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd66:	9805      	ldr	r0, [sp, #20]
 800bd68:	f002 fcb0 	bl	800e6cc <__multiply>
 800bd6c:	900a      	str	r0, [sp, #40]	@ 0x28
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f43f ae8d 	beq.w	800ba8e <_strtod_l+0x446>
 800bd74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd76:	9805      	ldr	r0, [sp, #20]
 800bd78:	f002 fb94 	bl	800e4a4 <_Bfree>
 800bd7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd7e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd80:	2d00      	cmp	r5, #0
 800bd82:	dc1d      	bgt.n	800bdc0 <_strtod_l+0x778>
 800bd84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	dd23      	ble.n	800bdd2 <_strtod_l+0x78a>
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bd8e:	9805      	ldr	r0, [sp, #20]
 800bd90:	f002 fd3e 	bl	800e810 <__pow5mult>
 800bd94:	4681      	mov	r9, r0
 800bd96:	b9e0      	cbnz	r0, 800bdd2 <_strtod_l+0x78a>
 800bd98:	f04f 0900 	mov.w	r9, #0
 800bd9c:	e677      	b.n	800ba8e <_strtod_l+0x446>
 800bd9e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bda2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bda6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bdaa:	35e2      	adds	r5, #226	@ 0xe2
 800bdac:	fa01 f305 	lsl.w	r3, r1, r5
 800bdb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdb2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bdb4:	e7ba      	b.n	800bd2c <_strtod_l+0x6e4>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bdba:	2301      	movs	r3, #1
 800bdbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdbe:	e7b5      	b.n	800bd2c <_strtod_l+0x6e4>
 800bdc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdc2:	9805      	ldr	r0, [sp, #20]
 800bdc4:	462a      	mov	r2, r5
 800bdc6:	f002 fd7d 	bl	800e8c4 <__lshift>
 800bdca:	901a      	str	r0, [sp, #104]	@ 0x68
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d1d9      	bne.n	800bd84 <_strtod_l+0x73c>
 800bdd0:	e65d      	b.n	800ba8e <_strtod_l+0x446>
 800bdd2:	2e00      	cmp	r6, #0
 800bdd4:	dd07      	ble.n	800bde6 <_strtod_l+0x79e>
 800bdd6:	4649      	mov	r1, r9
 800bdd8:	9805      	ldr	r0, [sp, #20]
 800bdda:	4632      	mov	r2, r6
 800bddc:	f002 fd72 	bl	800e8c4 <__lshift>
 800bde0:	4681      	mov	r9, r0
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d0d8      	beq.n	800bd98 <_strtod_l+0x750>
 800bde6:	2f00      	cmp	r7, #0
 800bde8:	dd08      	ble.n	800bdfc <_strtod_l+0x7b4>
 800bdea:	4641      	mov	r1, r8
 800bdec:	9805      	ldr	r0, [sp, #20]
 800bdee:	463a      	mov	r2, r7
 800bdf0:	f002 fd68 	bl	800e8c4 <__lshift>
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f ae49 	beq.w	800ba8e <_strtod_l+0x446>
 800bdfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bdfe:	9805      	ldr	r0, [sp, #20]
 800be00:	464a      	mov	r2, r9
 800be02:	f002 fde7 	bl	800e9d4 <__mdiff>
 800be06:	4604      	mov	r4, r0
 800be08:	2800      	cmp	r0, #0
 800be0a:	f43f ae40 	beq.w	800ba8e <_strtod_l+0x446>
 800be0e:	68c3      	ldr	r3, [r0, #12]
 800be10:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be12:	2300      	movs	r3, #0
 800be14:	60c3      	str	r3, [r0, #12]
 800be16:	4641      	mov	r1, r8
 800be18:	f002 fdc0 	bl	800e99c <__mcmp>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	da45      	bge.n	800beac <_strtod_l+0x864>
 800be20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be22:	ea53 030a 	orrs.w	r3, r3, sl
 800be26:	d16b      	bne.n	800bf00 <_strtod_l+0x8b8>
 800be28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d167      	bne.n	800bf00 <_strtod_l+0x8b8>
 800be30:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be34:	0d1b      	lsrs	r3, r3, #20
 800be36:	051b      	lsls	r3, r3, #20
 800be38:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be3c:	d960      	bls.n	800bf00 <_strtod_l+0x8b8>
 800be3e:	6963      	ldr	r3, [r4, #20]
 800be40:	b913      	cbnz	r3, 800be48 <_strtod_l+0x800>
 800be42:	6923      	ldr	r3, [r4, #16]
 800be44:	2b01      	cmp	r3, #1
 800be46:	dd5b      	ble.n	800bf00 <_strtod_l+0x8b8>
 800be48:	4621      	mov	r1, r4
 800be4a:	2201      	movs	r2, #1
 800be4c:	9805      	ldr	r0, [sp, #20]
 800be4e:	f002 fd39 	bl	800e8c4 <__lshift>
 800be52:	4641      	mov	r1, r8
 800be54:	4604      	mov	r4, r0
 800be56:	f002 fda1 	bl	800e99c <__mcmp>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	dd50      	ble.n	800bf00 <_strtod_l+0x8b8>
 800be5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be62:	9a08      	ldr	r2, [sp, #32]
 800be64:	0d1b      	lsrs	r3, r3, #20
 800be66:	051b      	lsls	r3, r3, #20
 800be68:	2a00      	cmp	r2, #0
 800be6a:	d06a      	beq.n	800bf42 <_strtod_l+0x8fa>
 800be6c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800be70:	d867      	bhi.n	800bf42 <_strtod_l+0x8fa>
 800be72:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800be76:	f67f ae9d 	bls.w	800bbb4 <_strtod_l+0x56c>
 800be7a:	4b0a      	ldr	r3, [pc, #40]	@ (800bea4 <_strtod_l+0x85c>)
 800be7c:	4650      	mov	r0, sl
 800be7e:	4659      	mov	r1, fp
 800be80:	2200      	movs	r2, #0
 800be82:	f7f4 fbb9 	bl	80005f8 <__aeabi_dmul>
 800be86:	4b08      	ldr	r3, [pc, #32]	@ (800bea8 <_strtod_l+0x860>)
 800be88:	400b      	ands	r3, r1
 800be8a:	4682      	mov	sl, r0
 800be8c:	468b      	mov	fp, r1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f47f ae08 	bne.w	800baa4 <_strtod_l+0x45c>
 800be94:	9a05      	ldr	r2, [sp, #20]
 800be96:	2322      	movs	r3, #34	@ 0x22
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	e603      	b.n	800baa4 <_strtod_l+0x45c>
 800be9c:	0800fcd0 	.word	0x0800fcd0
 800bea0:	fffffc02 	.word	0xfffffc02
 800bea4:	39500000 	.word	0x39500000
 800bea8:	7ff00000 	.word	0x7ff00000
 800beac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800beb0:	d165      	bne.n	800bf7e <_strtod_l+0x936>
 800beb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800beb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beb8:	b35a      	cbz	r2, 800bf12 <_strtod_l+0x8ca>
 800beba:	4a9f      	ldr	r2, [pc, #636]	@ (800c138 <_strtod_l+0xaf0>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d12b      	bne.n	800bf18 <_strtod_l+0x8d0>
 800bec0:	9b08      	ldr	r3, [sp, #32]
 800bec2:	4651      	mov	r1, sl
 800bec4:	b303      	cbz	r3, 800bf08 <_strtod_l+0x8c0>
 800bec6:	4b9d      	ldr	r3, [pc, #628]	@ (800c13c <_strtod_l+0xaf4>)
 800bec8:	465a      	mov	r2, fp
 800beca:	4013      	ands	r3, r2
 800becc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295
 800bed4:	d81b      	bhi.n	800bf0e <_strtod_l+0x8c6>
 800bed6:	0d1b      	lsrs	r3, r3, #20
 800bed8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bedc:	fa02 f303 	lsl.w	r3, r2, r3
 800bee0:	4299      	cmp	r1, r3
 800bee2:	d119      	bne.n	800bf18 <_strtod_l+0x8d0>
 800bee4:	4b96      	ldr	r3, [pc, #600]	@ (800c140 <_strtod_l+0xaf8>)
 800bee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bee8:	429a      	cmp	r2, r3
 800beea:	d102      	bne.n	800bef2 <_strtod_l+0x8aa>
 800beec:	3101      	adds	r1, #1
 800beee:	f43f adce 	beq.w	800ba8e <_strtod_l+0x446>
 800bef2:	4b92      	ldr	r3, [pc, #584]	@ (800c13c <_strtod_l+0xaf4>)
 800bef4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bef6:	401a      	ands	r2, r3
 800bef8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	9b08      	ldr	r3, [sp, #32]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1b9      	bne.n	800be7a <_strtod_l+0x832>
 800bf06:	e5cd      	b.n	800baa4 <_strtod_l+0x45c>
 800bf08:	f04f 33ff 	mov.w	r3, #4294967295
 800bf0c:	e7e8      	b.n	800bee0 <_strtod_l+0x898>
 800bf0e:	4613      	mov	r3, r2
 800bf10:	e7e6      	b.n	800bee0 <_strtod_l+0x898>
 800bf12:	ea53 030a 	orrs.w	r3, r3, sl
 800bf16:	d0a2      	beq.n	800be5e <_strtod_l+0x816>
 800bf18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bf1a:	b1db      	cbz	r3, 800bf54 <_strtod_l+0x90c>
 800bf1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf1e:	4213      	tst	r3, r2
 800bf20:	d0ee      	beq.n	800bf00 <_strtod_l+0x8b8>
 800bf22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf24:	9a08      	ldr	r2, [sp, #32]
 800bf26:	4650      	mov	r0, sl
 800bf28:	4659      	mov	r1, fp
 800bf2a:	b1bb      	cbz	r3, 800bf5c <_strtod_l+0x914>
 800bf2c:	f7ff fb6e 	bl	800b60c <sulp>
 800bf30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf34:	ec53 2b10 	vmov	r2, r3, d0
 800bf38:	f7f4 f9a8 	bl	800028c <__adddf3>
 800bf3c:	4682      	mov	sl, r0
 800bf3e:	468b      	mov	fp, r1
 800bf40:	e7de      	b.n	800bf00 <_strtod_l+0x8b8>
 800bf42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bf46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bf4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bf4e:	f04f 3aff 	mov.w	sl, #4294967295
 800bf52:	e7d5      	b.n	800bf00 <_strtod_l+0x8b8>
 800bf54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf56:	ea13 0f0a 	tst.w	r3, sl
 800bf5a:	e7e1      	b.n	800bf20 <_strtod_l+0x8d8>
 800bf5c:	f7ff fb56 	bl	800b60c <sulp>
 800bf60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf64:	ec53 2b10 	vmov	r2, r3, d0
 800bf68:	f7f4 f98e 	bl	8000288 <__aeabi_dsub>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4682      	mov	sl, r0
 800bf72:	468b      	mov	fp, r1
 800bf74:	f7f4 fda8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d0c1      	beq.n	800bf00 <_strtod_l+0x8b8>
 800bf7c:	e61a      	b.n	800bbb4 <_strtod_l+0x56c>
 800bf7e:	4641      	mov	r1, r8
 800bf80:	4620      	mov	r0, r4
 800bf82:	f002 fe83 	bl	800ec8c <__ratio>
 800bf86:	ec57 6b10 	vmov	r6, r7, d0
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf90:	4630      	mov	r0, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	f7f4 fdac 	bl	8000af0 <__aeabi_dcmple>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d06f      	beq.n	800c07c <_strtod_l+0xa34>
 800bf9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d17a      	bne.n	800c098 <_strtod_l+0xa50>
 800bfa2:	f1ba 0f00 	cmp.w	sl, #0
 800bfa6:	d158      	bne.n	800c05a <_strtod_l+0xa12>
 800bfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d15a      	bne.n	800c068 <_strtod_l+0xa20>
 800bfb2:	4b64      	ldr	r3, [pc, #400]	@ (800c144 <_strtod_l+0xafc>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 fd8f 	bl	8000adc <__aeabi_dcmplt>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d159      	bne.n	800c076 <_strtod_l+0xa2e>
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	4b60      	ldr	r3, [pc, #384]	@ (800c148 <_strtod_l+0xb00>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f7f4 fb15 	bl	80005f8 <__aeabi_dmul>
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460f      	mov	r7, r1
 800bfd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bfd6:	9606      	str	r6, [sp, #24]
 800bfd8:	9307      	str	r3, [sp, #28]
 800bfda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfde:	4d57      	ldr	r5, [pc, #348]	@ (800c13c <_strtod_l+0xaf4>)
 800bfe0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfe6:	401d      	ands	r5, r3
 800bfe8:	4b58      	ldr	r3, [pc, #352]	@ (800c14c <_strtod_l+0xb04>)
 800bfea:	429d      	cmp	r5, r3
 800bfec:	f040 80b2 	bne.w	800c154 <_strtod_l+0xb0c>
 800bff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bff2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bff6:	ec4b ab10 	vmov	d0, sl, fp
 800bffa:	f002 fd7f 	bl	800eafc <__ulp>
 800bffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c002:	ec51 0b10 	vmov	r0, r1, d0
 800c006:	f7f4 faf7 	bl	80005f8 <__aeabi_dmul>
 800c00a:	4652      	mov	r2, sl
 800c00c:	465b      	mov	r3, fp
 800c00e:	f7f4 f93d 	bl	800028c <__adddf3>
 800c012:	460b      	mov	r3, r1
 800c014:	4949      	ldr	r1, [pc, #292]	@ (800c13c <_strtod_l+0xaf4>)
 800c016:	4a4e      	ldr	r2, [pc, #312]	@ (800c150 <_strtod_l+0xb08>)
 800c018:	4019      	ands	r1, r3
 800c01a:	4291      	cmp	r1, r2
 800c01c:	4682      	mov	sl, r0
 800c01e:	d942      	bls.n	800c0a6 <_strtod_l+0xa5e>
 800c020:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c022:	4b47      	ldr	r3, [pc, #284]	@ (800c140 <_strtod_l+0xaf8>)
 800c024:	429a      	cmp	r2, r3
 800c026:	d103      	bne.n	800c030 <_strtod_l+0x9e8>
 800c028:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c02a:	3301      	adds	r3, #1
 800c02c:	f43f ad2f 	beq.w	800ba8e <_strtod_l+0x446>
 800c030:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c140 <_strtod_l+0xaf8>
 800c034:	f04f 3aff 	mov.w	sl, #4294967295
 800c038:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c03a:	9805      	ldr	r0, [sp, #20]
 800c03c:	f002 fa32 	bl	800e4a4 <_Bfree>
 800c040:	9805      	ldr	r0, [sp, #20]
 800c042:	4649      	mov	r1, r9
 800c044:	f002 fa2e 	bl	800e4a4 <_Bfree>
 800c048:	9805      	ldr	r0, [sp, #20]
 800c04a:	4641      	mov	r1, r8
 800c04c:	f002 fa2a 	bl	800e4a4 <_Bfree>
 800c050:	9805      	ldr	r0, [sp, #20]
 800c052:	4621      	mov	r1, r4
 800c054:	f002 fa26 	bl	800e4a4 <_Bfree>
 800c058:	e619      	b.n	800bc8e <_strtod_l+0x646>
 800c05a:	f1ba 0f01 	cmp.w	sl, #1
 800c05e:	d103      	bne.n	800c068 <_strtod_l+0xa20>
 800c060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c062:	2b00      	cmp	r3, #0
 800c064:	f43f ada6 	beq.w	800bbb4 <_strtod_l+0x56c>
 800c068:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c118 <_strtod_l+0xad0>
 800c06c:	4f35      	ldr	r7, [pc, #212]	@ (800c144 <_strtod_l+0xafc>)
 800c06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c072:	2600      	movs	r6, #0
 800c074:	e7b1      	b.n	800bfda <_strtod_l+0x992>
 800c076:	4f34      	ldr	r7, [pc, #208]	@ (800c148 <_strtod_l+0xb00>)
 800c078:	2600      	movs	r6, #0
 800c07a:	e7aa      	b.n	800bfd2 <_strtod_l+0x98a>
 800c07c:	4b32      	ldr	r3, [pc, #200]	@ (800c148 <_strtod_l+0xb00>)
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fab8 	bl	80005f8 <__aeabi_dmul>
 800c088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d09f      	beq.n	800bfd2 <_strtod_l+0x98a>
 800c092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c096:	e7a0      	b.n	800bfda <_strtod_l+0x992>
 800c098:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c120 <_strtod_l+0xad8>
 800c09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0a0:	ec57 6b17 	vmov	r6, r7, d7
 800c0a4:	e799      	b.n	800bfda <_strtod_l+0x992>
 800c0a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c0aa:	9b08      	ldr	r3, [sp, #32]
 800c0ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1c1      	bne.n	800c038 <_strtod_l+0x9f0>
 800c0b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c0b8:	0d1b      	lsrs	r3, r3, #20
 800c0ba:	051b      	lsls	r3, r3, #20
 800c0bc:	429d      	cmp	r5, r3
 800c0be:	d1bb      	bne.n	800c038 <_strtod_l+0x9f0>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fdf8 	bl	8000cb8 <__aeabi_d2lz>
 800c0c8:	f7f4 fa68 	bl	800059c <__aeabi_l2d>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f8d8 	bl	8000288 <__aeabi_dsub>
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4602      	mov	r2, r0
 800c0dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c0e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c0e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0e6:	ea46 060a 	orr.w	r6, r6, sl
 800c0ea:	431e      	orrs	r6, r3
 800c0ec:	d06f      	beq.n	800c1ce <_strtod_l+0xb86>
 800c0ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800c128 <_strtod_l+0xae0>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f7f4 fcf2 	bl	8000adc <__aeabi_dcmplt>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	f47f acd3 	bne.w	800baa4 <_strtod_l+0x45c>
 800c0fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800c130 <_strtod_l+0xae8>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c108:	f7f4 fd06 	bl	8000b18 <__aeabi_dcmpgt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d093      	beq.n	800c038 <_strtod_l+0x9f0>
 800c110:	e4c8      	b.n	800baa4 <_strtod_l+0x45c>
 800c112:	bf00      	nop
 800c114:	f3af 8000 	nop.w
 800c118:	00000000 	.word	0x00000000
 800c11c:	bff00000 	.word	0xbff00000
 800c120:	00000000 	.word	0x00000000
 800c124:	3ff00000 	.word	0x3ff00000
 800c128:	94a03595 	.word	0x94a03595
 800c12c:	3fdfffff 	.word	0x3fdfffff
 800c130:	35afe535 	.word	0x35afe535
 800c134:	3fe00000 	.word	0x3fe00000
 800c138:	000fffff 	.word	0x000fffff
 800c13c:	7ff00000 	.word	0x7ff00000
 800c140:	7fefffff 	.word	0x7fefffff
 800c144:	3ff00000 	.word	0x3ff00000
 800c148:	3fe00000 	.word	0x3fe00000
 800c14c:	7fe00000 	.word	0x7fe00000
 800c150:	7c9fffff 	.word	0x7c9fffff
 800c154:	9b08      	ldr	r3, [sp, #32]
 800c156:	b323      	cbz	r3, 800c1a2 <_strtod_l+0xb5a>
 800c158:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c15c:	d821      	bhi.n	800c1a2 <_strtod_l+0xb5a>
 800c15e:	a328      	add	r3, pc, #160	@ (adr r3, 800c200 <_strtod_l+0xbb8>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	4630      	mov	r0, r6
 800c166:	4639      	mov	r1, r7
 800c168:	f7f4 fcc2 	bl	8000af0 <__aeabi_dcmple>
 800c16c:	b1a0      	cbz	r0, 800c198 <_strtod_l+0xb50>
 800c16e:	4639      	mov	r1, r7
 800c170:	4630      	mov	r0, r6
 800c172:	f7f4 fd19 	bl	8000ba8 <__aeabi_d2uiz>
 800c176:	2801      	cmp	r0, #1
 800c178:	bf38      	it	cc
 800c17a:	2001      	movcc	r0, #1
 800c17c:	f7f4 f9c2 	bl	8000504 <__aeabi_ui2d>
 800c180:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c182:	4606      	mov	r6, r0
 800c184:	460f      	mov	r7, r1
 800c186:	b9fb      	cbnz	r3, 800c1c8 <_strtod_l+0xb80>
 800c188:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c18c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c18e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c190:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c194:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c198:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c19a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c19e:	1b5b      	subs	r3, r3, r5
 800c1a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c1a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c1a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c1aa:	f002 fca7 	bl	800eafc <__ulp>
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	ec53 2b10 	vmov	r2, r3, d0
 800c1b4:	4659      	mov	r1, fp
 800c1b6:	f7f4 fa1f 	bl	80005f8 <__aeabi_dmul>
 800c1ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c1be:	f7f4 f865 	bl	800028c <__adddf3>
 800c1c2:	4682      	mov	sl, r0
 800c1c4:	468b      	mov	fp, r1
 800c1c6:	e770      	b.n	800c0aa <_strtod_l+0xa62>
 800c1c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c1cc:	e7e0      	b.n	800c190 <_strtod_l+0xb48>
 800c1ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800c208 <_strtod_l+0xbc0>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7f4 fc82 	bl	8000adc <__aeabi_dcmplt>
 800c1d8:	e798      	b.n	800c10c <_strtod_l+0xac4>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c1de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c1e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1e2:	6013      	str	r3, [r2, #0]
 800c1e4:	f7ff ba6d 	b.w	800b6c2 <_strtod_l+0x7a>
 800c1e8:	2a65      	cmp	r2, #101	@ 0x65
 800c1ea:	f43f ab68 	beq.w	800b8be <_strtod_l+0x276>
 800c1ee:	2a45      	cmp	r2, #69	@ 0x45
 800c1f0:	f43f ab65 	beq.w	800b8be <_strtod_l+0x276>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	f7ff bba0 	b.w	800b93a <_strtod_l+0x2f2>
 800c1fa:	bf00      	nop
 800c1fc:	f3af 8000 	nop.w
 800c200:	ffc00000 	.word	0xffc00000
 800c204:	41dfffff 	.word	0x41dfffff
 800c208:	94a03595 	.word	0x94a03595
 800c20c:	3fcfffff 	.word	0x3fcfffff

0800c210 <strtod>:
 800c210:	460a      	mov	r2, r1
 800c212:	4601      	mov	r1, r0
 800c214:	4802      	ldr	r0, [pc, #8]	@ (800c220 <strtod+0x10>)
 800c216:	4b03      	ldr	r3, [pc, #12]	@ (800c224 <strtod+0x14>)
 800c218:	6800      	ldr	r0, [r0, #0]
 800c21a:	f7ff ba15 	b.w	800b648 <_strtod_l>
 800c21e:	bf00      	nop
 800c220:	20000188 	.word	0x20000188
 800c224:	2000001c 	.word	0x2000001c

0800c228 <__cvt>:
 800c228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c22c:	ec57 6b10 	vmov	r6, r7, d0
 800c230:	2f00      	cmp	r7, #0
 800c232:	460c      	mov	r4, r1
 800c234:	4619      	mov	r1, r3
 800c236:	463b      	mov	r3, r7
 800c238:	bfbb      	ittet	lt
 800c23a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c23e:	461f      	movlt	r7, r3
 800c240:	2300      	movge	r3, #0
 800c242:	232d      	movlt	r3, #45	@ 0x2d
 800c244:	700b      	strb	r3, [r1, #0]
 800c246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c248:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c24c:	4691      	mov	r9, r2
 800c24e:	f023 0820 	bic.w	r8, r3, #32
 800c252:	bfbc      	itt	lt
 800c254:	4632      	movlt	r2, r6
 800c256:	4616      	movlt	r6, r2
 800c258:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c25c:	d005      	beq.n	800c26a <__cvt+0x42>
 800c25e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c262:	d100      	bne.n	800c266 <__cvt+0x3e>
 800c264:	3401      	adds	r4, #1
 800c266:	2102      	movs	r1, #2
 800c268:	e000      	b.n	800c26c <__cvt+0x44>
 800c26a:	2103      	movs	r1, #3
 800c26c:	ab03      	add	r3, sp, #12
 800c26e:	9301      	str	r3, [sp, #4]
 800c270:	ab02      	add	r3, sp, #8
 800c272:	9300      	str	r3, [sp, #0]
 800c274:	ec47 6b10 	vmov	d0, r6, r7
 800c278:	4653      	mov	r3, sl
 800c27a:	4622      	mov	r2, r4
 800c27c:	f000 ff6c 	bl	800d158 <_dtoa_r>
 800c280:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c284:	4605      	mov	r5, r0
 800c286:	d119      	bne.n	800c2bc <__cvt+0x94>
 800c288:	f019 0f01 	tst.w	r9, #1
 800c28c:	d00e      	beq.n	800c2ac <__cvt+0x84>
 800c28e:	eb00 0904 	add.w	r9, r0, r4
 800c292:	2200      	movs	r2, #0
 800c294:	2300      	movs	r3, #0
 800c296:	4630      	mov	r0, r6
 800c298:	4639      	mov	r1, r7
 800c29a:	f7f4 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800c29e:	b108      	cbz	r0, 800c2a4 <__cvt+0x7c>
 800c2a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2a4:	2230      	movs	r2, #48	@ 0x30
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	454b      	cmp	r3, r9
 800c2aa:	d31e      	bcc.n	800c2ea <__cvt+0xc2>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c2b0:	1b5b      	subs	r3, r3, r5
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	6013      	str	r3, [r2, #0]
 800c2b6:	b004      	add	sp, #16
 800c2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2c0:	eb00 0904 	add.w	r9, r0, r4
 800c2c4:	d1e5      	bne.n	800c292 <__cvt+0x6a>
 800c2c6:	7803      	ldrb	r3, [r0, #0]
 800c2c8:	2b30      	cmp	r3, #48	@ 0x30
 800c2ca:	d10a      	bne.n	800c2e2 <__cvt+0xba>
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	f7f4 fbf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2d8:	b918      	cbnz	r0, 800c2e2 <__cvt+0xba>
 800c2da:	f1c4 0401 	rsb	r4, r4, #1
 800c2de:	f8ca 4000 	str.w	r4, [sl]
 800c2e2:	f8da 3000 	ldr.w	r3, [sl]
 800c2e6:	4499      	add	r9, r3
 800c2e8:	e7d3      	b.n	800c292 <__cvt+0x6a>
 800c2ea:	1c59      	adds	r1, r3, #1
 800c2ec:	9103      	str	r1, [sp, #12]
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	e7d9      	b.n	800c2a6 <__cvt+0x7e>

0800c2f2 <__exponent>:
 800c2f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2f4:	2900      	cmp	r1, #0
 800c2f6:	bfba      	itte	lt
 800c2f8:	4249      	neglt	r1, r1
 800c2fa:	232d      	movlt	r3, #45	@ 0x2d
 800c2fc:	232b      	movge	r3, #43	@ 0x2b
 800c2fe:	2909      	cmp	r1, #9
 800c300:	7002      	strb	r2, [r0, #0]
 800c302:	7043      	strb	r3, [r0, #1]
 800c304:	dd29      	ble.n	800c35a <__exponent+0x68>
 800c306:	f10d 0307 	add.w	r3, sp, #7
 800c30a:	461d      	mov	r5, r3
 800c30c:	270a      	movs	r7, #10
 800c30e:	461a      	mov	r2, r3
 800c310:	fbb1 f6f7 	udiv	r6, r1, r7
 800c314:	fb07 1416 	mls	r4, r7, r6, r1
 800c318:	3430      	adds	r4, #48	@ 0x30
 800c31a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c31e:	460c      	mov	r4, r1
 800c320:	2c63      	cmp	r4, #99	@ 0x63
 800c322:	f103 33ff 	add.w	r3, r3, #4294967295
 800c326:	4631      	mov	r1, r6
 800c328:	dcf1      	bgt.n	800c30e <__exponent+0x1c>
 800c32a:	3130      	adds	r1, #48	@ 0x30
 800c32c:	1e94      	subs	r4, r2, #2
 800c32e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c332:	1c41      	adds	r1, r0, #1
 800c334:	4623      	mov	r3, r4
 800c336:	42ab      	cmp	r3, r5
 800c338:	d30a      	bcc.n	800c350 <__exponent+0x5e>
 800c33a:	f10d 0309 	add.w	r3, sp, #9
 800c33e:	1a9b      	subs	r3, r3, r2
 800c340:	42ac      	cmp	r4, r5
 800c342:	bf88      	it	hi
 800c344:	2300      	movhi	r3, #0
 800c346:	3302      	adds	r3, #2
 800c348:	4403      	add	r3, r0
 800c34a:	1a18      	subs	r0, r3, r0
 800c34c:	b003      	add	sp, #12
 800c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c350:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c354:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c358:	e7ed      	b.n	800c336 <__exponent+0x44>
 800c35a:	2330      	movs	r3, #48	@ 0x30
 800c35c:	3130      	adds	r1, #48	@ 0x30
 800c35e:	7083      	strb	r3, [r0, #2]
 800c360:	70c1      	strb	r1, [r0, #3]
 800c362:	1d03      	adds	r3, r0, #4
 800c364:	e7f1      	b.n	800c34a <__exponent+0x58>
	...

0800c368 <_printf_float>:
 800c368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36c:	b08d      	sub	sp, #52	@ 0x34
 800c36e:	460c      	mov	r4, r1
 800c370:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c374:	4616      	mov	r6, r2
 800c376:	461f      	mov	r7, r3
 800c378:	4605      	mov	r5, r0
 800c37a:	f000 fd53 	bl	800ce24 <_localeconv_r>
 800c37e:	6803      	ldr	r3, [r0, #0]
 800c380:	9304      	str	r3, [sp, #16]
 800c382:	4618      	mov	r0, r3
 800c384:	f7f3 ff74 	bl	8000270 <strlen>
 800c388:	2300      	movs	r3, #0
 800c38a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c38c:	f8d8 3000 	ldr.w	r3, [r8]
 800c390:	9005      	str	r0, [sp, #20]
 800c392:	3307      	adds	r3, #7
 800c394:	f023 0307 	bic.w	r3, r3, #7
 800c398:	f103 0208 	add.w	r2, r3, #8
 800c39c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3a0:	f8d4 b000 	ldr.w	fp, [r4]
 800c3a4:	f8c8 2000 	str.w	r2, [r8]
 800c3a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c3ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3be:	4b9c      	ldr	r3, [pc, #624]	@ (800c630 <_printf_float+0x2c8>)
 800c3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3c4:	f7f4 fbb2 	bl	8000b2c <__aeabi_dcmpun>
 800c3c8:	bb70      	cbnz	r0, 800c428 <_printf_float+0xc0>
 800c3ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ce:	4b98      	ldr	r3, [pc, #608]	@ (800c630 <_printf_float+0x2c8>)
 800c3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d4:	f7f4 fb8c 	bl	8000af0 <__aeabi_dcmple>
 800c3d8:	bb30      	cbnz	r0, 800c428 <_printf_float+0xc0>
 800c3da:	2200      	movs	r2, #0
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4640      	mov	r0, r8
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	f7f4 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800c3e6:	b110      	cbz	r0, 800c3ee <_printf_float+0x86>
 800c3e8:	232d      	movs	r3, #45	@ 0x2d
 800c3ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3ee:	4a91      	ldr	r2, [pc, #580]	@ (800c634 <_printf_float+0x2cc>)
 800c3f0:	4b91      	ldr	r3, [pc, #580]	@ (800c638 <_printf_float+0x2d0>)
 800c3f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3f6:	bf8c      	ite	hi
 800c3f8:	4690      	movhi	r8, r2
 800c3fa:	4698      	movls	r8, r3
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	f02b 0304 	bic.w	r3, fp, #4
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	f04f 0900 	mov.w	r9, #0
 800c40a:	9700      	str	r7, [sp, #0]
 800c40c:	4633      	mov	r3, r6
 800c40e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c410:	4621      	mov	r1, r4
 800c412:	4628      	mov	r0, r5
 800c414:	f000 f9d2 	bl	800c7bc <_printf_common>
 800c418:	3001      	adds	r0, #1
 800c41a:	f040 808d 	bne.w	800c538 <_printf_float+0x1d0>
 800c41e:	f04f 30ff 	mov.w	r0, #4294967295
 800c422:	b00d      	add	sp, #52	@ 0x34
 800c424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c428:	4642      	mov	r2, r8
 800c42a:	464b      	mov	r3, r9
 800c42c:	4640      	mov	r0, r8
 800c42e:	4649      	mov	r1, r9
 800c430:	f7f4 fb7c 	bl	8000b2c <__aeabi_dcmpun>
 800c434:	b140      	cbz	r0, 800c448 <_printf_float+0xe0>
 800c436:	464b      	mov	r3, r9
 800c438:	2b00      	cmp	r3, #0
 800c43a:	bfbc      	itt	lt
 800c43c:	232d      	movlt	r3, #45	@ 0x2d
 800c43e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c442:	4a7e      	ldr	r2, [pc, #504]	@ (800c63c <_printf_float+0x2d4>)
 800c444:	4b7e      	ldr	r3, [pc, #504]	@ (800c640 <_printf_float+0x2d8>)
 800c446:	e7d4      	b.n	800c3f2 <_printf_float+0x8a>
 800c448:	6863      	ldr	r3, [r4, #4]
 800c44a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c44e:	9206      	str	r2, [sp, #24]
 800c450:	1c5a      	adds	r2, r3, #1
 800c452:	d13b      	bne.n	800c4cc <_printf_float+0x164>
 800c454:	2306      	movs	r3, #6
 800c456:	6063      	str	r3, [r4, #4]
 800c458:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c45c:	2300      	movs	r3, #0
 800c45e:	6022      	str	r2, [r4, #0]
 800c460:	9303      	str	r3, [sp, #12]
 800c462:	ab0a      	add	r3, sp, #40	@ 0x28
 800c464:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c468:	ab09      	add	r3, sp, #36	@ 0x24
 800c46a:	9300      	str	r3, [sp, #0]
 800c46c:	6861      	ldr	r1, [r4, #4]
 800c46e:	ec49 8b10 	vmov	d0, r8, r9
 800c472:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c476:	4628      	mov	r0, r5
 800c478:	f7ff fed6 	bl	800c228 <__cvt>
 800c47c:	9b06      	ldr	r3, [sp, #24]
 800c47e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c480:	2b47      	cmp	r3, #71	@ 0x47
 800c482:	4680      	mov	r8, r0
 800c484:	d129      	bne.n	800c4da <_printf_float+0x172>
 800c486:	1cc8      	adds	r0, r1, #3
 800c488:	db02      	blt.n	800c490 <_printf_float+0x128>
 800c48a:	6863      	ldr	r3, [r4, #4]
 800c48c:	4299      	cmp	r1, r3
 800c48e:	dd41      	ble.n	800c514 <_printf_float+0x1ac>
 800c490:	f1aa 0a02 	sub.w	sl, sl, #2
 800c494:	fa5f fa8a 	uxtb.w	sl, sl
 800c498:	3901      	subs	r1, #1
 800c49a:	4652      	mov	r2, sl
 800c49c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4a2:	f7ff ff26 	bl	800c2f2 <__exponent>
 800c4a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4a8:	1813      	adds	r3, r2, r0
 800c4aa:	2a01      	cmp	r2, #1
 800c4ac:	4681      	mov	r9, r0
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	dc02      	bgt.n	800c4b8 <_printf_float+0x150>
 800c4b2:	6822      	ldr	r2, [r4, #0]
 800c4b4:	07d2      	lsls	r2, r2, #31
 800c4b6:	d501      	bpl.n	800c4bc <_printf_float+0x154>
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	6123      	str	r3, [r4, #16]
 800c4bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d0a2      	beq.n	800c40a <_printf_float+0xa2>
 800c4c4:	232d      	movs	r3, #45	@ 0x2d
 800c4c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4ca:	e79e      	b.n	800c40a <_printf_float+0xa2>
 800c4cc:	9a06      	ldr	r2, [sp, #24]
 800c4ce:	2a47      	cmp	r2, #71	@ 0x47
 800c4d0:	d1c2      	bne.n	800c458 <_printf_float+0xf0>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1c0      	bne.n	800c458 <_printf_float+0xf0>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e7bd      	b.n	800c456 <_printf_float+0xee>
 800c4da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4de:	d9db      	bls.n	800c498 <_printf_float+0x130>
 800c4e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4e4:	d118      	bne.n	800c518 <_printf_float+0x1b0>
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	6863      	ldr	r3, [r4, #4]
 800c4ea:	dd0b      	ble.n	800c504 <_printf_float+0x19c>
 800c4ec:	6121      	str	r1, [r4, #16]
 800c4ee:	b913      	cbnz	r3, 800c4f6 <_printf_float+0x18e>
 800c4f0:	6822      	ldr	r2, [r4, #0]
 800c4f2:	07d0      	lsls	r0, r2, #31
 800c4f4:	d502      	bpl.n	800c4fc <_printf_float+0x194>
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	440b      	add	r3, r1
 800c4fa:	6123      	str	r3, [r4, #16]
 800c4fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4fe:	f04f 0900 	mov.w	r9, #0
 800c502:	e7db      	b.n	800c4bc <_printf_float+0x154>
 800c504:	b913      	cbnz	r3, 800c50c <_printf_float+0x1a4>
 800c506:	6822      	ldr	r2, [r4, #0]
 800c508:	07d2      	lsls	r2, r2, #31
 800c50a:	d501      	bpl.n	800c510 <_printf_float+0x1a8>
 800c50c:	3302      	adds	r3, #2
 800c50e:	e7f4      	b.n	800c4fa <_printf_float+0x192>
 800c510:	2301      	movs	r3, #1
 800c512:	e7f2      	b.n	800c4fa <_printf_float+0x192>
 800c514:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c51a:	4299      	cmp	r1, r3
 800c51c:	db05      	blt.n	800c52a <_printf_float+0x1c2>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	6121      	str	r1, [r4, #16]
 800c522:	07d8      	lsls	r0, r3, #31
 800c524:	d5ea      	bpl.n	800c4fc <_printf_float+0x194>
 800c526:	1c4b      	adds	r3, r1, #1
 800c528:	e7e7      	b.n	800c4fa <_printf_float+0x192>
 800c52a:	2900      	cmp	r1, #0
 800c52c:	bfd4      	ite	le
 800c52e:	f1c1 0202 	rsble	r2, r1, #2
 800c532:	2201      	movgt	r2, #1
 800c534:	4413      	add	r3, r2
 800c536:	e7e0      	b.n	800c4fa <_printf_float+0x192>
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	055a      	lsls	r2, r3, #21
 800c53c:	d407      	bmi.n	800c54e <_printf_float+0x1e6>
 800c53e:	6923      	ldr	r3, [r4, #16]
 800c540:	4642      	mov	r2, r8
 800c542:	4631      	mov	r1, r6
 800c544:	4628      	mov	r0, r5
 800c546:	47b8      	blx	r7
 800c548:	3001      	adds	r0, #1
 800c54a:	d12b      	bne.n	800c5a4 <_printf_float+0x23c>
 800c54c:	e767      	b.n	800c41e <_printf_float+0xb6>
 800c54e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c552:	f240 80dd 	bls.w	800c710 <_printf_float+0x3a8>
 800c556:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c55a:	2200      	movs	r2, #0
 800c55c:	2300      	movs	r3, #0
 800c55e:	f7f4 fab3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c562:	2800      	cmp	r0, #0
 800c564:	d033      	beq.n	800c5ce <_printf_float+0x266>
 800c566:	4a37      	ldr	r2, [pc, #220]	@ (800c644 <_printf_float+0x2dc>)
 800c568:	2301      	movs	r3, #1
 800c56a:	4631      	mov	r1, r6
 800c56c:	4628      	mov	r0, r5
 800c56e:	47b8      	blx	r7
 800c570:	3001      	adds	r0, #1
 800c572:	f43f af54 	beq.w	800c41e <_printf_float+0xb6>
 800c576:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c57a:	4543      	cmp	r3, r8
 800c57c:	db02      	blt.n	800c584 <_printf_float+0x21c>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	07d8      	lsls	r0, r3, #31
 800c582:	d50f      	bpl.n	800c5a4 <_printf_float+0x23c>
 800c584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	f43f af45 	beq.w	800c41e <_printf_float+0xb6>
 800c594:	f04f 0900 	mov.w	r9, #0
 800c598:	f108 38ff 	add.w	r8, r8, #4294967295
 800c59c:	f104 0a1a 	add.w	sl, r4, #26
 800c5a0:	45c8      	cmp	r8, r9
 800c5a2:	dc09      	bgt.n	800c5b8 <_printf_float+0x250>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	079b      	lsls	r3, r3, #30
 800c5a8:	f100 8103 	bmi.w	800c7b2 <_printf_float+0x44a>
 800c5ac:	68e0      	ldr	r0, [r4, #12]
 800c5ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5b0:	4298      	cmp	r0, r3
 800c5b2:	bfb8      	it	lt
 800c5b4:	4618      	movlt	r0, r3
 800c5b6:	e734      	b.n	800c422 <_printf_float+0xba>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	4652      	mov	r2, sl
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4628      	mov	r0, r5
 800c5c0:	47b8      	blx	r7
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	f43f af2b 	beq.w	800c41e <_printf_float+0xb6>
 800c5c8:	f109 0901 	add.w	r9, r9, #1
 800c5cc:	e7e8      	b.n	800c5a0 <_printf_float+0x238>
 800c5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dc39      	bgt.n	800c648 <_printf_float+0x2e0>
 800c5d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c644 <_printf_float+0x2dc>)
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f af1d 	beq.w	800c41e <_printf_float+0xb6>
 800c5e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5e8:	ea59 0303 	orrs.w	r3, r9, r3
 800c5ec:	d102      	bne.n	800c5f4 <_printf_float+0x28c>
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	07d9      	lsls	r1, r3, #31
 800c5f2:	d5d7      	bpl.n	800c5a4 <_printf_float+0x23c>
 800c5f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af0d 	beq.w	800c41e <_printf_float+0xb6>
 800c604:	f04f 0a00 	mov.w	sl, #0
 800c608:	f104 0b1a 	add.w	fp, r4, #26
 800c60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60e:	425b      	negs	r3, r3
 800c610:	4553      	cmp	r3, sl
 800c612:	dc01      	bgt.n	800c618 <_printf_float+0x2b0>
 800c614:	464b      	mov	r3, r9
 800c616:	e793      	b.n	800c540 <_printf_float+0x1d8>
 800c618:	2301      	movs	r3, #1
 800c61a:	465a      	mov	r2, fp
 800c61c:	4631      	mov	r1, r6
 800c61e:	4628      	mov	r0, r5
 800c620:	47b8      	blx	r7
 800c622:	3001      	adds	r0, #1
 800c624:	f43f aefb 	beq.w	800c41e <_printf_float+0xb6>
 800c628:	f10a 0a01 	add.w	sl, sl, #1
 800c62c:	e7ee      	b.n	800c60c <_printf_float+0x2a4>
 800c62e:	bf00      	nop
 800c630:	7fefffff 	.word	0x7fefffff
 800c634:	0800fad6 	.word	0x0800fad6
 800c638:	0800fad2 	.word	0x0800fad2
 800c63c:	0800fade 	.word	0x0800fade
 800c640:	0800fada 	.word	0x0800fada
 800c644:	0800fae2 	.word	0x0800fae2
 800c648:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c64a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c64e:	4553      	cmp	r3, sl
 800c650:	bfa8      	it	ge
 800c652:	4653      	movge	r3, sl
 800c654:	2b00      	cmp	r3, #0
 800c656:	4699      	mov	r9, r3
 800c658:	dc36      	bgt.n	800c6c8 <_printf_float+0x360>
 800c65a:	f04f 0b00 	mov.w	fp, #0
 800c65e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c662:	f104 021a 	add.w	r2, r4, #26
 800c666:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c668:	9306      	str	r3, [sp, #24]
 800c66a:	eba3 0309 	sub.w	r3, r3, r9
 800c66e:	455b      	cmp	r3, fp
 800c670:	dc31      	bgt.n	800c6d6 <_printf_float+0x36e>
 800c672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c674:	459a      	cmp	sl, r3
 800c676:	dc3a      	bgt.n	800c6ee <_printf_float+0x386>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	07da      	lsls	r2, r3, #31
 800c67c:	d437      	bmi.n	800c6ee <_printf_float+0x386>
 800c67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c680:	ebaa 0903 	sub.w	r9, sl, r3
 800c684:	9b06      	ldr	r3, [sp, #24]
 800c686:	ebaa 0303 	sub.w	r3, sl, r3
 800c68a:	4599      	cmp	r9, r3
 800c68c:	bfa8      	it	ge
 800c68e:	4699      	movge	r9, r3
 800c690:	f1b9 0f00 	cmp.w	r9, #0
 800c694:	dc33      	bgt.n	800c6fe <_printf_float+0x396>
 800c696:	f04f 0800 	mov.w	r8, #0
 800c69a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c69e:	f104 0b1a 	add.w	fp, r4, #26
 800c6a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6a4:	ebaa 0303 	sub.w	r3, sl, r3
 800c6a8:	eba3 0309 	sub.w	r3, r3, r9
 800c6ac:	4543      	cmp	r3, r8
 800c6ae:	f77f af79 	ble.w	800c5a4 <_printf_float+0x23c>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	465a      	mov	r2, fp
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	f43f aeae 	beq.w	800c41e <_printf_float+0xb6>
 800c6c2:	f108 0801 	add.w	r8, r8, #1
 800c6c6:	e7ec      	b.n	800c6a2 <_printf_float+0x33a>
 800c6c8:	4642      	mov	r2, r8
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4628      	mov	r0, r5
 800c6ce:	47b8      	blx	r7
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	d1c2      	bne.n	800c65a <_printf_float+0x2f2>
 800c6d4:	e6a3      	b.n	800c41e <_printf_float+0xb6>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4631      	mov	r1, r6
 800c6da:	4628      	mov	r0, r5
 800c6dc:	9206      	str	r2, [sp, #24]
 800c6de:	47b8      	blx	r7
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	f43f ae9c 	beq.w	800c41e <_printf_float+0xb6>
 800c6e6:	9a06      	ldr	r2, [sp, #24]
 800c6e8:	f10b 0b01 	add.w	fp, fp, #1
 800c6ec:	e7bb      	b.n	800c666 <_printf_float+0x2fe>
 800c6ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d1c0      	bne.n	800c67e <_printf_float+0x316>
 800c6fc:	e68f      	b.n	800c41e <_printf_float+0xb6>
 800c6fe:	9a06      	ldr	r2, [sp, #24]
 800c700:	464b      	mov	r3, r9
 800c702:	4442      	add	r2, r8
 800c704:	4631      	mov	r1, r6
 800c706:	4628      	mov	r0, r5
 800c708:	47b8      	blx	r7
 800c70a:	3001      	adds	r0, #1
 800c70c:	d1c3      	bne.n	800c696 <_printf_float+0x32e>
 800c70e:	e686      	b.n	800c41e <_printf_float+0xb6>
 800c710:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c714:	f1ba 0f01 	cmp.w	sl, #1
 800c718:	dc01      	bgt.n	800c71e <_printf_float+0x3b6>
 800c71a:	07db      	lsls	r3, r3, #31
 800c71c:	d536      	bpl.n	800c78c <_printf_float+0x424>
 800c71e:	2301      	movs	r3, #1
 800c720:	4642      	mov	r2, r8
 800c722:	4631      	mov	r1, r6
 800c724:	4628      	mov	r0, r5
 800c726:	47b8      	blx	r7
 800c728:	3001      	adds	r0, #1
 800c72a:	f43f ae78 	beq.w	800c41e <_printf_float+0xb6>
 800c72e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	47b8      	blx	r7
 800c738:	3001      	adds	r0, #1
 800c73a:	f43f ae70 	beq.w	800c41e <_printf_float+0xb6>
 800c73e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c742:	2200      	movs	r2, #0
 800c744:	2300      	movs	r3, #0
 800c746:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c74a:	f7f4 f9bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c74e:	b9c0      	cbnz	r0, 800c782 <_printf_float+0x41a>
 800c750:	4653      	mov	r3, sl
 800c752:	f108 0201 	add.w	r2, r8, #1
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	d10c      	bne.n	800c77a <_printf_float+0x412>
 800c760:	e65d      	b.n	800c41e <_printf_float+0xb6>
 800c762:	2301      	movs	r3, #1
 800c764:	465a      	mov	r2, fp
 800c766:	4631      	mov	r1, r6
 800c768:	4628      	mov	r0, r5
 800c76a:	47b8      	blx	r7
 800c76c:	3001      	adds	r0, #1
 800c76e:	f43f ae56 	beq.w	800c41e <_printf_float+0xb6>
 800c772:	f108 0801 	add.w	r8, r8, #1
 800c776:	45d0      	cmp	r8, sl
 800c778:	dbf3      	blt.n	800c762 <_printf_float+0x3fa>
 800c77a:	464b      	mov	r3, r9
 800c77c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c780:	e6df      	b.n	800c542 <_printf_float+0x1da>
 800c782:	f04f 0800 	mov.w	r8, #0
 800c786:	f104 0b1a 	add.w	fp, r4, #26
 800c78a:	e7f4      	b.n	800c776 <_printf_float+0x40e>
 800c78c:	2301      	movs	r3, #1
 800c78e:	4642      	mov	r2, r8
 800c790:	e7e1      	b.n	800c756 <_printf_float+0x3ee>
 800c792:	2301      	movs	r3, #1
 800c794:	464a      	mov	r2, r9
 800c796:	4631      	mov	r1, r6
 800c798:	4628      	mov	r0, r5
 800c79a:	47b8      	blx	r7
 800c79c:	3001      	adds	r0, #1
 800c79e:	f43f ae3e 	beq.w	800c41e <_printf_float+0xb6>
 800c7a2:	f108 0801 	add.w	r8, r8, #1
 800c7a6:	68e3      	ldr	r3, [r4, #12]
 800c7a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7aa:	1a5b      	subs	r3, r3, r1
 800c7ac:	4543      	cmp	r3, r8
 800c7ae:	dcf0      	bgt.n	800c792 <_printf_float+0x42a>
 800c7b0:	e6fc      	b.n	800c5ac <_printf_float+0x244>
 800c7b2:	f04f 0800 	mov.w	r8, #0
 800c7b6:	f104 0919 	add.w	r9, r4, #25
 800c7ba:	e7f4      	b.n	800c7a6 <_printf_float+0x43e>

0800c7bc <_printf_common>:
 800c7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c0:	4616      	mov	r6, r2
 800c7c2:	4698      	mov	r8, r3
 800c7c4:	688a      	ldr	r2, [r1, #8]
 800c7c6:	690b      	ldr	r3, [r1, #16]
 800c7c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	bfb8      	it	lt
 800c7d0:	4613      	movlt	r3, r2
 800c7d2:	6033      	str	r3, [r6, #0]
 800c7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7d8:	4607      	mov	r7, r0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	b10a      	cbz	r2, 800c7e2 <_printf_common+0x26>
 800c7de:	3301      	adds	r3, #1
 800c7e0:	6033      	str	r3, [r6, #0]
 800c7e2:	6823      	ldr	r3, [r4, #0]
 800c7e4:	0699      	lsls	r1, r3, #26
 800c7e6:	bf42      	ittt	mi
 800c7e8:	6833      	ldrmi	r3, [r6, #0]
 800c7ea:	3302      	addmi	r3, #2
 800c7ec:	6033      	strmi	r3, [r6, #0]
 800c7ee:	6825      	ldr	r5, [r4, #0]
 800c7f0:	f015 0506 	ands.w	r5, r5, #6
 800c7f4:	d106      	bne.n	800c804 <_printf_common+0x48>
 800c7f6:	f104 0a19 	add.w	sl, r4, #25
 800c7fa:	68e3      	ldr	r3, [r4, #12]
 800c7fc:	6832      	ldr	r2, [r6, #0]
 800c7fe:	1a9b      	subs	r3, r3, r2
 800c800:	42ab      	cmp	r3, r5
 800c802:	dc26      	bgt.n	800c852 <_printf_common+0x96>
 800c804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c808:	6822      	ldr	r2, [r4, #0]
 800c80a:	3b00      	subs	r3, #0
 800c80c:	bf18      	it	ne
 800c80e:	2301      	movne	r3, #1
 800c810:	0692      	lsls	r2, r2, #26
 800c812:	d42b      	bmi.n	800c86c <_printf_common+0xb0>
 800c814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c818:	4641      	mov	r1, r8
 800c81a:	4638      	mov	r0, r7
 800c81c:	47c8      	blx	r9
 800c81e:	3001      	adds	r0, #1
 800c820:	d01e      	beq.n	800c860 <_printf_common+0xa4>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	6922      	ldr	r2, [r4, #16]
 800c826:	f003 0306 	and.w	r3, r3, #6
 800c82a:	2b04      	cmp	r3, #4
 800c82c:	bf02      	ittt	eq
 800c82e:	68e5      	ldreq	r5, [r4, #12]
 800c830:	6833      	ldreq	r3, [r6, #0]
 800c832:	1aed      	subeq	r5, r5, r3
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	bf0c      	ite	eq
 800c838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c83c:	2500      	movne	r5, #0
 800c83e:	4293      	cmp	r3, r2
 800c840:	bfc4      	itt	gt
 800c842:	1a9b      	subgt	r3, r3, r2
 800c844:	18ed      	addgt	r5, r5, r3
 800c846:	2600      	movs	r6, #0
 800c848:	341a      	adds	r4, #26
 800c84a:	42b5      	cmp	r5, r6
 800c84c:	d11a      	bne.n	800c884 <_printf_common+0xc8>
 800c84e:	2000      	movs	r0, #0
 800c850:	e008      	b.n	800c864 <_printf_common+0xa8>
 800c852:	2301      	movs	r3, #1
 800c854:	4652      	mov	r2, sl
 800c856:	4641      	mov	r1, r8
 800c858:	4638      	mov	r0, r7
 800c85a:	47c8      	blx	r9
 800c85c:	3001      	adds	r0, #1
 800c85e:	d103      	bne.n	800c868 <_printf_common+0xac>
 800c860:	f04f 30ff 	mov.w	r0, #4294967295
 800c864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c868:	3501      	adds	r5, #1
 800c86a:	e7c6      	b.n	800c7fa <_printf_common+0x3e>
 800c86c:	18e1      	adds	r1, r4, r3
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	2030      	movs	r0, #48	@ 0x30
 800c872:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c876:	4422      	add	r2, r4
 800c878:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c87c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c880:	3302      	adds	r3, #2
 800c882:	e7c7      	b.n	800c814 <_printf_common+0x58>
 800c884:	2301      	movs	r3, #1
 800c886:	4622      	mov	r2, r4
 800c888:	4641      	mov	r1, r8
 800c88a:	4638      	mov	r0, r7
 800c88c:	47c8      	blx	r9
 800c88e:	3001      	adds	r0, #1
 800c890:	d0e6      	beq.n	800c860 <_printf_common+0xa4>
 800c892:	3601      	adds	r6, #1
 800c894:	e7d9      	b.n	800c84a <_printf_common+0x8e>
	...

0800c898 <_printf_i>:
 800c898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c89c:	7e0f      	ldrb	r7, [r1, #24]
 800c89e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c8a0:	2f78      	cmp	r7, #120	@ 0x78
 800c8a2:	4691      	mov	r9, r2
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	469a      	mov	sl, r3
 800c8aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c8ae:	d807      	bhi.n	800c8c0 <_printf_i+0x28>
 800c8b0:	2f62      	cmp	r7, #98	@ 0x62
 800c8b2:	d80a      	bhi.n	800c8ca <_printf_i+0x32>
 800c8b4:	2f00      	cmp	r7, #0
 800c8b6:	f000 80d1 	beq.w	800ca5c <_printf_i+0x1c4>
 800c8ba:	2f58      	cmp	r7, #88	@ 0x58
 800c8bc:	f000 80b8 	beq.w	800ca30 <_printf_i+0x198>
 800c8c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8c8:	e03a      	b.n	800c940 <_printf_i+0xa8>
 800c8ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8ce:	2b15      	cmp	r3, #21
 800c8d0:	d8f6      	bhi.n	800c8c0 <_printf_i+0x28>
 800c8d2:	a101      	add	r1, pc, #4	@ (adr r1, 800c8d8 <_printf_i+0x40>)
 800c8d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8d8:	0800c931 	.word	0x0800c931
 800c8dc:	0800c945 	.word	0x0800c945
 800c8e0:	0800c8c1 	.word	0x0800c8c1
 800c8e4:	0800c8c1 	.word	0x0800c8c1
 800c8e8:	0800c8c1 	.word	0x0800c8c1
 800c8ec:	0800c8c1 	.word	0x0800c8c1
 800c8f0:	0800c945 	.word	0x0800c945
 800c8f4:	0800c8c1 	.word	0x0800c8c1
 800c8f8:	0800c8c1 	.word	0x0800c8c1
 800c8fc:	0800c8c1 	.word	0x0800c8c1
 800c900:	0800c8c1 	.word	0x0800c8c1
 800c904:	0800ca43 	.word	0x0800ca43
 800c908:	0800c96f 	.word	0x0800c96f
 800c90c:	0800c9fd 	.word	0x0800c9fd
 800c910:	0800c8c1 	.word	0x0800c8c1
 800c914:	0800c8c1 	.word	0x0800c8c1
 800c918:	0800ca65 	.word	0x0800ca65
 800c91c:	0800c8c1 	.word	0x0800c8c1
 800c920:	0800c96f 	.word	0x0800c96f
 800c924:	0800c8c1 	.word	0x0800c8c1
 800c928:	0800c8c1 	.word	0x0800c8c1
 800c92c:	0800ca05 	.word	0x0800ca05
 800c930:	6833      	ldr	r3, [r6, #0]
 800c932:	1d1a      	adds	r2, r3, #4
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6032      	str	r2, [r6, #0]
 800c938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c93c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c940:	2301      	movs	r3, #1
 800c942:	e09c      	b.n	800ca7e <_printf_i+0x1e6>
 800c944:	6833      	ldr	r3, [r6, #0]
 800c946:	6820      	ldr	r0, [r4, #0]
 800c948:	1d19      	adds	r1, r3, #4
 800c94a:	6031      	str	r1, [r6, #0]
 800c94c:	0606      	lsls	r6, r0, #24
 800c94e:	d501      	bpl.n	800c954 <_printf_i+0xbc>
 800c950:	681d      	ldr	r5, [r3, #0]
 800c952:	e003      	b.n	800c95c <_printf_i+0xc4>
 800c954:	0645      	lsls	r5, r0, #25
 800c956:	d5fb      	bpl.n	800c950 <_printf_i+0xb8>
 800c958:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c95c:	2d00      	cmp	r5, #0
 800c95e:	da03      	bge.n	800c968 <_printf_i+0xd0>
 800c960:	232d      	movs	r3, #45	@ 0x2d
 800c962:	426d      	negs	r5, r5
 800c964:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c968:	4858      	ldr	r0, [pc, #352]	@ (800cacc <_printf_i+0x234>)
 800c96a:	230a      	movs	r3, #10
 800c96c:	e011      	b.n	800c992 <_printf_i+0xfa>
 800c96e:	6821      	ldr	r1, [r4, #0]
 800c970:	6833      	ldr	r3, [r6, #0]
 800c972:	0608      	lsls	r0, r1, #24
 800c974:	f853 5b04 	ldr.w	r5, [r3], #4
 800c978:	d402      	bmi.n	800c980 <_printf_i+0xe8>
 800c97a:	0649      	lsls	r1, r1, #25
 800c97c:	bf48      	it	mi
 800c97e:	b2ad      	uxthmi	r5, r5
 800c980:	2f6f      	cmp	r7, #111	@ 0x6f
 800c982:	4852      	ldr	r0, [pc, #328]	@ (800cacc <_printf_i+0x234>)
 800c984:	6033      	str	r3, [r6, #0]
 800c986:	bf14      	ite	ne
 800c988:	230a      	movne	r3, #10
 800c98a:	2308      	moveq	r3, #8
 800c98c:	2100      	movs	r1, #0
 800c98e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c992:	6866      	ldr	r6, [r4, #4]
 800c994:	60a6      	str	r6, [r4, #8]
 800c996:	2e00      	cmp	r6, #0
 800c998:	db05      	blt.n	800c9a6 <_printf_i+0x10e>
 800c99a:	6821      	ldr	r1, [r4, #0]
 800c99c:	432e      	orrs	r6, r5
 800c99e:	f021 0104 	bic.w	r1, r1, #4
 800c9a2:	6021      	str	r1, [r4, #0]
 800c9a4:	d04b      	beq.n	800ca3e <_printf_i+0x1a6>
 800c9a6:	4616      	mov	r6, r2
 800c9a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800c9ac:	fb03 5711 	mls	r7, r3, r1, r5
 800c9b0:	5dc7      	ldrb	r7, [r0, r7]
 800c9b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c9b6:	462f      	mov	r7, r5
 800c9b8:	42bb      	cmp	r3, r7
 800c9ba:	460d      	mov	r5, r1
 800c9bc:	d9f4      	bls.n	800c9a8 <_printf_i+0x110>
 800c9be:	2b08      	cmp	r3, #8
 800c9c0:	d10b      	bne.n	800c9da <_printf_i+0x142>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	07df      	lsls	r7, r3, #31
 800c9c6:	d508      	bpl.n	800c9da <_printf_i+0x142>
 800c9c8:	6923      	ldr	r3, [r4, #16]
 800c9ca:	6861      	ldr	r1, [r4, #4]
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	bfde      	ittt	le
 800c9d0:	2330      	movle	r3, #48	@ 0x30
 800c9d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9da:	1b92      	subs	r2, r2, r6
 800c9dc:	6122      	str	r2, [r4, #16]
 800c9de:	f8cd a000 	str.w	sl, [sp]
 800c9e2:	464b      	mov	r3, r9
 800c9e4:	aa03      	add	r2, sp, #12
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	f7ff fee7 	bl	800c7bc <_printf_common>
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	d14a      	bne.n	800ca88 <_printf_i+0x1f0>
 800c9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f6:	b004      	add	sp, #16
 800c9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fc:	6823      	ldr	r3, [r4, #0]
 800c9fe:	f043 0320 	orr.w	r3, r3, #32
 800ca02:	6023      	str	r3, [r4, #0]
 800ca04:	4832      	ldr	r0, [pc, #200]	@ (800cad0 <_printf_i+0x238>)
 800ca06:	2778      	movs	r7, #120	@ 0x78
 800ca08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ca0c:	6823      	ldr	r3, [r4, #0]
 800ca0e:	6831      	ldr	r1, [r6, #0]
 800ca10:	061f      	lsls	r7, r3, #24
 800ca12:	f851 5b04 	ldr.w	r5, [r1], #4
 800ca16:	d402      	bmi.n	800ca1e <_printf_i+0x186>
 800ca18:	065f      	lsls	r7, r3, #25
 800ca1a:	bf48      	it	mi
 800ca1c:	b2ad      	uxthmi	r5, r5
 800ca1e:	6031      	str	r1, [r6, #0]
 800ca20:	07d9      	lsls	r1, r3, #31
 800ca22:	bf44      	itt	mi
 800ca24:	f043 0320 	orrmi.w	r3, r3, #32
 800ca28:	6023      	strmi	r3, [r4, #0]
 800ca2a:	b11d      	cbz	r5, 800ca34 <_printf_i+0x19c>
 800ca2c:	2310      	movs	r3, #16
 800ca2e:	e7ad      	b.n	800c98c <_printf_i+0xf4>
 800ca30:	4826      	ldr	r0, [pc, #152]	@ (800cacc <_printf_i+0x234>)
 800ca32:	e7e9      	b.n	800ca08 <_printf_i+0x170>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	f023 0320 	bic.w	r3, r3, #32
 800ca3a:	6023      	str	r3, [r4, #0]
 800ca3c:	e7f6      	b.n	800ca2c <_printf_i+0x194>
 800ca3e:	4616      	mov	r6, r2
 800ca40:	e7bd      	b.n	800c9be <_printf_i+0x126>
 800ca42:	6833      	ldr	r3, [r6, #0]
 800ca44:	6825      	ldr	r5, [r4, #0]
 800ca46:	6961      	ldr	r1, [r4, #20]
 800ca48:	1d18      	adds	r0, r3, #4
 800ca4a:	6030      	str	r0, [r6, #0]
 800ca4c:	062e      	lsls	r6, r5, #24
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	d501      	bpl.n	800ca56 <_printf_i+0x1be>
 800ca52:	6019      	str	r1, [r3, #0]
 800ca54:	e002      	b.n	800ca5c <_printf_i+0x1c4>
 800ca56:	0668      	lsls	r0, r5, #25
 800ca58:	d5fb      	bpl.n	800ca52 <_printf_i+0x1ba>
 800ca5a:	8019      	strh	r1, [r3, #0]
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	6123      	str	r3, [r4, #16]
 800ca60:	4616      	mov	r6, r2
 800ca62:	e7bc      	b.n	800c9de <_printf_i+0x146>
 800ca64:	6833      	ldr	r3, [r6, #0]
 800ca66:	1d1a      	adds	r2, r3, #4
 800ca68:	6032      	str	r2, [r6, #0]
 800ca6a:	681e      	ldr	r6, [r3, #0]
 800ca6c:	6862      	ldr	r2, [r4, #4]
 800ca6e:	2100      	movs	r1, #0
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7f3 fbad 	bl	80001d0 <memchr>
 800ca76:	b108      	cbz	r0, 800ca7c <_printf_i+0x1e4>
 800ca78:	1b80      	subs	r0, r0, r6
 800ca7a:	6060      	str	r0, [r4, #4]
 800ca7c:	6863      	ldr	r3, [r4, #4]
 800ca7e:	6123      	str	r3, [r4, #16]
 800ca80:	2300      	movs	r3, #0
 800ca82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca86:	e7aa      	b.n	800c9de <_printf_i+0x146>
 800ca88:	6923      	ldr	r3, [r4, #16]
 800ca8a:	4632      	mov	r2, r6
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4640      	mov	r0, r8
 800ca90:	47d0      	blx	sl
 800ca92:	3001      	adds	r0, #1
 800ca94:	d0ad      	beq.n	800c9f2 <_printf_i+0x15a>
 800ca96:	6823      	ldr	r3, [r4, #0]
 800ca98:	079b      	lsls	r3, r3, #30
 800ca9a:	d413      	bmi.n	800cac4 <_printf_i+0x22c>
 800ca9c:	68e0      	ldr	r0, [r4, #12]
 800ca9e:	9b03      	ldr	r3, [sp, #12]
 800caa0:	4298      	cmp	r0, r3
 800caa2:	bfb8      	it	lt
 800caa4:	4618      	movlt	r0, r3
 800caa6:	e7a6      	b.n	800c9f6 <_printf_i+0x15e>
 800caa8:	2301      	movs	r3, #1
 800caaa:	4632      	mov	r2, r6
 800caac:	4649      	mov	r1, r9
 800caae:	4640      	mov	r0, r8
 800cab0:	47d0      	blx	sl
 800cab2:	3001      	adds	r0, #1
 800cab4:	d09d      	beq.n	800c9f2 <_printf_i+0x15a>
 800cab6:	3501      	adds	r5, #1
 800cab8:	68e3      	ldr	r3, [r4, #12]
 800caba:	9903      	ldr	r1, [sp, #12]
 800cabc:	1a5b      	subs	r3, r3, r1
 800cabe:	42ab      	cmp	r3, r5
 800cac0:	dcf2      	bgt.n	800caa8 <_printf_i+0x210>
 800cac2:	e7eb      	b.n	800ca9c <_printf_i+0x204>
 800cac4:	2500      	movs	r5, #0
 800cac6:	f104 0619 	add.w	r6, r4, #25
 800caca:	e7f5      	b.n	800cab8 <_printf_i+0x220>
 800cacc:	0800fae4 	.word	0x0800fae4
 800cad0:	0800faf5 	.word	0x0800faf5

0800cad4 <std>:
 800cad4:	2300      	movs	r3, #0
 800cad6:	b510      	push	{r4, lr}
 800cad8:	4604      	mov	r4, r0
 800cada:	e9c0 3300 	strd	r3, r3, [r0]
 800cade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cae2:	6083      	str	r3, [r0, #8]
 800cae4:	8181      	strh	r1, [r0, #12]
 800cae6:	6643      	str	r3, [r0, #100]	@ 0x64
 800cae8:	81c2      	strh	r2, [r0, #14]
 800caea:	6183      	str	r3, [r0, #24]
 800caec:	4619      	mov	r1, r3
 800caee:	2208      	movs	r2, #8
 800caf0:	305c      	adds	r0, #92	@ 0x5c
 800caf2:	f000 f94c 	bl	800cd8e <memset>
 800caf6:	4b0d      	ldr	r3, [pc, #52]	@ (800cb2c <std+0x58>)
 800caf8:	6263      	str	r3, [r4, #36]	@ 0x24
 800cafa:	4b0d      	ldr	r3, [pc, #52]	@ (800cb30 <std+0x5c>)
 800cafc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cafe:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <std+0x60>)
 800cb00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb02:	4b0d      	ldr	r3, [pc, #52]	@ (800cb38 <std+0x64>)
 800cb04:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb06:	4b0d      	ldr	r3, [pc, #52]	@ (800cb3c <std+0x68>)
 800cb08:	6224      	str	r4, [r4, #32]
 800cb0a:	429c      	cmp	r4, r3
 800cb0c:	d006      	beq.n	800cb1c <std+0x48>
 800cb0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cb12:	4294      	cmp	r4, r2
 800cb14:	d002      	beq.n	800cb1c <std+0x48>
 800cb16:	33d0      	adds	r3, #208	@ 0xd0
 800cb18:	429c      	cmp	r4, r3
 800cb1a:	d105      	bne.n	800cb28 <std+0x54>
 800cb1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb24:	f000 ba74 	b.w	800d010 <__retarget_lock_init_recursive>
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	bf00      	nop
 800cb2c:	0800cd09 	.word	0x0800cd09
 800cb30:	0800cd2b 	.word	0x0800cd2b
 800cb34:	0800cd63 	.word	0x0800cd63
 800cb38:	0800cd87 	.word	0x0800cd87
 800cb3c:	200051b8 	.word	0x200051b8

0800cb40 <stdio_exit_handler>:
 800cb40:	4a02      	ldr	r2, [pc, #8]	@ (800cb4c <stdio_exit_handler+0xc>)
 800cb42:	4903      	ldr	r1, [pc, #12]	@ (800cb50 <stdio_exit_handler+0x10>)
 800cb44:	4803      	ldr	r0, [pc, #12]	@ (800cb54 <stdio_exit_handler+0x14>)
 800cb46:	f000 b869 	b.w	800cc1c <_fwalk_sglue>
 800cb4a:	bf00      	nop
 800cb4c:	20000010 	.word	0x20000010
 800cb50:	0800f149 	.word	0x0800f149
 800cb54:	2000018c 	.word	0x2000018c

0800cb58 <cleanup_stdio>:
 800cb58:	6841      	ldr	r1, [r0, #4]
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb8c <cleanup_stdio+0x34>)
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	b510      	push	{r4, lr}
 800cb60:	4604      	mov	r4, r0
 800cb62:	d001      	beq.n	800cb68 <cleanup_stdio+0x10>
 800cb64:	f002 faf0 	bl	800f148 <_fflush_r>
 800cb68:	68a1      	ldr	r1, [r4, #8]
 800cb6a:	4b09      	ldr	r3, [pc, #36]	@ (800cb90 <cleanup_stdio+0x38>)
 800cb6c:	4299      	cmp	r1, r3
 800cb6e:	d002      	beq.n	800cb76 <cleanup_stdio+0x1e>
 800cb70:	4620      	mov	r0, r4
 800cb72:	f002 fae9 	bl	800f148 <_fflush_r>
 800cb76:	68e1      	ldr	r1, [r4, #12]
 800cb78:	4b06      	ldr	r3, [pc, #24]	@ (800cb94 <cleanup_stdio+0x3c>)
 800cb7a:	4299      	cmp	r1, r3
 800cb7c:	d004      	beq.n	800cb88 <cleanup_stdio+0x30>
 800cb7e:	4620      	mov	r0, r4
 800cb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb84:	f002 bae0 	b.w	800f148 <_fflush_r>
 800cb88:	bd10      	pop	{r4, pc}
 800cb8a:	bf00      	nop
 800cb8c:	200051b8 	.word	0x200051b8
 800cb90:	20005220 	.word	0x20005220
 800cb94:	20005288 	.word	0x20005288

0800cb98 <global_stdio_init.part.0>:
 800cb98:	b510      	push	{r4, lr}
 800cb9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc8 <global_stdio_init.part.0+0x30>)
 800cb9c:	4c0b      	ldr	r4, [pc, #44]	@ (800cbcc <global_stdio_init.part.0+0x34>)
 800cb9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd0 <global_stdio_init.part.0+0x38>)
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	4620      	mov	r0, r4
 800cba4:	2200      	movs	r2, #0
 800cba6:	2104      	movs	r1, #4
 800cba8:	f7ff ff94 	bl	800cad4 <std>
 800cbac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	2109      	movs	r1, #9
 800cbb4:	f7ff ff8e 	bl	800cad4 <std>
 800cbb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cbbc:	2202      	movs	r2, #2
 800cbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbc2:	2112      	movs	r1, #18
 800cbc4:	f7ff bf86 	b.w	800cad4 <std>
 800cbc8:	200052f0 	.word	0x200052f0
 800cbcc:	200051b8 	.word	0x200051b8
 800cbd0:	0800cb41 	.word	0x0800cb41

0800cbd4 <__sfp_lock_acquire>:
 800cbd4:	4801      	ldr	r0, [pc, #4]	@ (800cbdc <__sfp_lock_acquire+0x8>)
 800cbd6:	f000 ba1c 	b.w	800d012 <__retarget_lock_acquire_recursive>
 800cbda:	bf00      	nop
 800cbdc:	200052f9 	.word	0x200052f9

0800cbe0 <__sfp_lock_release>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	@ (800cbe8 <__sfp_lock_release+0x8>)
 800cbe2:	f000 ba17 	b.w	800d014 <__retarget_lock_release_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	200052f9 	.word	0x200052f9

0800cbec <__sinit>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	4604      	mov	r4, r0
 800cbf0:	f7ff fff0 	bl	800cbd4 <__sfp_lock_acquire>
 800cbf4:	6a23      	ldr	r3, [r4, #32]
 800cbf6:	b11b      	cbz	r3, 800cc00 <__sinit+0x14>
 800cbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbfc:	f7ff bff0 	b.w	800cbe0 <__sfp_lock_release>
 800cc00:	4b04      	ldr	r3, [pc, #16]	@ (800cc14 <__sinit+0x28>)
 800cc02:	6223      	str	r3, [r4, #32]
 800cc04:	4b04      	ldr	r3, [pc, #16]	@ (800cc18 <__sinit+0x2c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d1f5      	bne.n	800cbf8 <__sinit+0xc>
 800cc0c:	f7ff ffc4 	bl	800cb98 <global_stdio_init.part.0>
 800cc10:	e7f2      	b.n	800cbf8 <__sinit+0xc>
 800cc12:	bf00      	nop
 800cc14:	0800cb59 	.word	0x0800cb59
 800cc18:	200052f0 	.word	0x200052f0

0800cc1c <_fwalk_sglue>:
 800cc1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc20:	4607      	mov	r7, r0
 800cc22:	4688      	mov	r8, r1
 800cc24:	4614      	mov	r4, r2
 800cc26:	2600      	movs	r6, #0
 800cc28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc2c:	f1b9 0901 	subs.w	r9, r9, #1
 800cc30:	d505      	bpl.n	800cc3e <_fwalk_sglue+0x22>
 800cc32:	6824      	ldr	r4, [r4, #0]
 800cc34:	2c00      	cmp	r4, #0
 800cc36:	d1f7      	bne.n	800cc28 <_fwalk_sglue+0xc>
 800cc38:	4630      	mov	r0, r6
 800cc3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc3e:	89ab      	ldrh	r3, [r5, #12]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d907      	bls.n	800cc54 <_fwalk_sglue+0x38>
 800cc44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	d003      	beq.n	800cc54 <_fwalk_sglue+0x38>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	4638      	mov	r0, r7
 800cc50:	47c0      	blx	r8
 800cc52:	4306      	orrs	r6, r0
 800cc54:	3568      	adds	r5, #104	@ 0x68
 800cc56:	e7e9      	b.n	800cc2c <_fwalk_sglue+0x10>

0800cc58 <sniprintf>:
 800cc58:	b40c      	push	{r2, r3}
 800cc5a:	b530      	push	{r4, r5, lr}
 800cc5c:	4b18      	ldr	r3, [pc, #96]	@ (800ccc0 <sniprintf+0x68>)
 800cc5e:	1e0c      	subs	r4, r1, #0
 800cc60:	681d      	ldr	r5, [r3, #0]
 800cc62:	b09d      	sub	sp, #116	@ 0x74
 800cc64:	da08      	bge.n	800cc78 <sniprintf+0x20>
 800cc66:	238b      	movs	r3, #139	@ 0x8b
 800cc68:	602b      	str	r3, [r5, #0]
 800cc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6e:	b01d      	add	sp, #116	@ 0x74
 800cc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc74:	b002      	add	sp, #8
 800cc76:	4770      	bx	lr
 800cc78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cc7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cc80:	f04f 0300 	mov.w	r3, #0
 800cc84:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cc86:	bf14      	ite	ne
 800cc88:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cc8c:	4623      	moveq	r3, r4
 800cc8e:	9304      	str	r3, [sp, #16]
 800cc90:	9307      	str	r3, [sp, #28]
 800cc92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cc96:	9002      	str	r0, [sp, #8]
 800cc98:	9006      	str	r0, [sp, #24]
 800cc9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cc9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cca0:	ab21      	add	r3, sp, #132	@ 0x84
 800cca2:	a902      	add	r1, sp, #8
 800cca4:	4628      	mov	r0, r5
 800cca6:	9301      	str	r3, [sp, #4]
 800cca8:	f002 f8ce 	bl	800ee48 <_svfiprintf_r>
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	bfbc      	itt	lt
 800ccb0:	238b      	movlt	r3, #139	@ 0x8b
 800ccb2:	602b      	strlt	r3, [r5, #0]
 800ccb4:	2c00      	cmp	r4, #0
 800ccb6:	d0da      	beq.n	800cc6e <sniprintf+0x16>
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	e7d6      	b.n	800cc6e <sniprintf+0x16>
 800ccc0:	20000188 	.word	0x20000188

0800ccc4 <siprintf>:
 800ccc4:	b40e      	push	{r1, r2, r3}
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	b09d      	sub	sp, #116	@ 0x74
 800ccca:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cccc:	9002      	str	r0, [sp, #8]
 800ccce:	9006      	str	r0, [sp, #24]
 800ccd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ccd4:	480a      	ldr	r0, [pc, #40]	@ (800cd00 <siprintf+0x3c>)
 800ccd6:	9107      	str	r1, [sp, #28]
 800ccd8:	9104      	str	r1, [sp, #16]
 800ccda:	490a      	ldr	r1, [pc, #40]	@ (800cd04 <siprintf+0x40>)
 800ccdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cce0:	9105      	str	r1, [sp, #20]
 800cce2:	2400      	movs	r4, #0
 800cce4:	a902      	add	r1, sp, #8
 800cce6:	6800      	ldr	r0, [r0, #0]
 800cce8:	9301      	str	r3, [sp, #4]
 800ccea:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ccec:	f002 f8ac 	bl	800ee48 <_svfiprintf_r>
 800ccf0:	9b02      	ldr	r3, [sp, #8]
 800ccf2:	701c      	strb	r4, [r3, #0]
 800ccf4:	b01d      	add	sp, #116	@ 0x74
 800ccf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccfa:	b003      	add	sp, #12
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	20000188 	.word	0x20000188
 800cd04:	ffff0208 	.word	0xffff0208

0800cd08 <__sread>:
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	460c      	mov	r4, r1
 800cd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd10:	f000 f90c 	bl	800cf2c <_read_r>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	bfab      	itete	ge
 800cd18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cd1a:	89a3      	ldrhlt	r3, [r4, #12]
 800cd1c:	181b      	addge	r3, r3, r0
 800cd1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cd22:	bfac      	ite	ge
 800cd24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cd26:	81a3      	strhlt	r3, [r4, #12]
 800cd28:	bd10      	pop	{r4, pc}

0800cd2a <__swrite>:
 800cd2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2e:	461f      	mov	r7, r3
 800cd30:	898b      	ldrh	r3, [r1, #12]
 800cd32:	05db      	lsls	r3, r3, #23
 800cd34:	4605      	mov	r5, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	4616      	mov	r6, r2
 800cd3a:	d505      	bpl.n	800cd48 <__swrite+0x1e>
 800cd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd40:	2302      	movs	r3, #2
 800cd42:	2200      	movs	r2, #0
 800cd44:	f000 f8e0 	bl	800cf08 <_lseek_r>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cd52:	81a3      	strh	r3, [r4, #12]
 800cd54:	4632      	mov	r2, r6
 800cd56:	463b      	mov	r3, r7
 800cd58:	4628      	mov	r0, r5
 800cd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5e:	f000 b91b 	b.w	800cf98 <_write_r>

0800cd62 <__sseek>:
 800cd62:	b510      	push	{r4, lr}
 800cd64:	460c      	mov	r4, r1
 800cd66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd6a:	f000 f8cd 	bl	800cf08 <_lseek_r>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	bf15      	itete	ne
 800cd74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cd76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cd7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cd7e:	81a3      	strheq	r3, [r4, #12]
 800cd80:	bf18      	it	ne
 800cd82:	81a3      	strhne	r3, [r4, #12]
 800cd84:	bd10      	pop	{r4, pc}

0800cd86 <__sclose>:
 800cd86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd8a:	f000 b84f 	b.w	800ce2c <_close_r>

0800cd8e <memset>:
 800cd8e:	4402      	add	r2, r0
 800cd90:	4603      	mov	r3, r0
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d100      	bne.n	800cd98 <memset+0xa>
 800cd96:	4770      	bx	lr
 800cd98:	f803 1b01 	strb.w	r1, [r3], #1
 800cd9c:	e7f9      	b.n	800cd92 <memset+0x4>

0800cd9e <strncmp>:
 800cd9e:	b510      	push	{r4, lr}
 800cda0:	b16a      	cbz	r2, 800cdbe <strncmp+0x20>
 800cda2:	3901      	subs	r1, #1
 800cda4:	1884      	adds	r4, r0, r2
 800cda6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdaa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d103      	bne.n	800cdba <strncmp+0x1c>
 800cdb2:	42a0      	cmp	r0, r4
 800cdb4:	d001      	beq.n	800cdba <strncmp+0x1c>
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	d1f5      	bne.n	800cda6 <strncmp+0x8>
 800cdba:	1ad0      	subs	r0, r2, r3
 800cdbc:	bd10      	pop	{r4, pc}
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	e7fc      	b.n	800cdbc <strncmp+0x1e>

0800cdc2 <_raise_r>:
 800cdc2:	291f      	cmp	r1, #31
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	460c      	mov	r4, r1
 800cdca:	d904      	bls.n	800cdd6 <_raise_r+0x14>
 800cdcc:	2316      	movs	r3, #22
 800cdce:	6003      	str	r3, [r0, #0]
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdd8:	b112      	cbz	r2, 800cde0 <_raise_r+0x1e>
 800cdda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdde:	b94b      	cbnz	r3, 800cdf4 <_raise_r+0x32>
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 f8c7 	bl	800cf74 <_getpid_r>
 800cde6:	4622      	mov	r2, r4
 800cde8:	4601      	mov	r1, r0
 800cdea:	4628      	mov	r0, r5
 800cdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdf0:	f000 b8ae 	b.w	800cf50 <_kill_r>
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d00a      	beq.n	800ce0e <_raise_r+0x4c>
 800cdf8:	1c59      	adds	r1, r3, #1
 800cdfa:	d103      	bne.n	800ce04 <_raise_r+0x42>
 800cdfc:	2316      	movs	r3, #22
 800cdfe:	6003      	str	r3, [r0, #0]
 800ce00:	2001      	movs	r0, #1
 800ce02:	e7e7      	b.n	800cdd4 <_raise_r+0x12>
 800ce04:	2100      	movs	r1, #0
 800ce06:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4798      	blx	r3
 800ce0e:	2000      	movs	r0, #0
 800ce10:	e7e0      	b.n	800cdd4 <_raise_r+0x12>
	...

0800ce14 <raise>:
 800ce14:	4b02      	ldr	r3, [pc, #8]	@ (800ce20 <raise+0xc>)
 800ce16:	4601      	mov	r1, r0
 800ce18:	6818      	ldr	r0, [r3, #0]
 800ce1a:	f7ff bfd2 	b.w	800cdc2 <_raise_r>
 800ce1e:	bf00      	nop
 800ce20:	20000188 	.word	0x20000188

0800ce24 <_localeconv_r>:
 800ce24:	4800      	ldr	r0, [pc, #0]	@ (800ce28 <_localeconv_r+0x4>)
 800ce26:	4770      	bx	lr
 800ce28:	2000010c 	.word	0x2000010c

0800ce2c <_close_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d06      	ldr	r5, [pc, #24]	@ (800ce48 <_close_r+0x1c>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	602b      	str	r3, [r5, #0]
 800ce38:	f7f6 fa24 	bl	8003284 <_close>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_close_r+0x1a>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_close_r+0x1a>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	200052f4 	.word	0x200052f4

0800ce4c <_reclaim_reent>:
 800ce4c:	4b2d      	ldr	r3, [pc, #180]	@ (800cf04 <_reclaim_reent+0xb8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4283      	cmp	r3, r0
 800ce52:	b570      	push	{r4, r5, r6, lr}
 800ce54:	4604      	mov	r4, r0
 800ce56:	d053      	beq.n	800cf00 <_reclaim_reent+0xb4>
 800ce58:	69c3      	ldr	r3, [r0, #28]
 800ce5a:	b31b      	cbz	r3, 800cea4 <_reclaim_reent+0x58>
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	b163      	cbz	r3, 800ce7a <_reclaim_reent+0x2e>
 800ce60:	2500      	movs	r5, #0
 800ce62:	69e3      	ldr	r3, [r4, #28]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	5959      	ldr	r1, [r3, r5]
 800ce68:	b9b1      	cbnz	r1, 800ce98 <_reclaim_reent+0x4c>
 800ce6a:	3504      	adds	r5, #4
 800ce6c:	2d80      	cmp	r5, #128	@ 0x80
 800ce6e:	d1f8      	bne.n	800ce62 <_reclaim_reent+0x16>
 800ce70:	69e3      	ldr	r3, [r4, #28]
 800ce72:	4620      	mov	r0, r4
 800ce74:	68d9      	ldr	r1, [r3, #12]
 800ce76:	f000 ff3f 	bl	800dcf8 <_free_r>
 800ce7a:	69e3      	ldr	r3, [r4, #28]
 800ce7c:	6819      	ldr	r1, [r3, #0]
 800ce7e:	b111      	cbz	r1, 800ce86 <_reclaim_reent+0x3a>
 800ce80:	4620      	mov	r0, r4
 800ce82:	f000 ff39 	bl	800dcf8 <_free_r>
 800ce86:	69e3      	ldr	r3, [r4, #28]
 800ce88:	689d      	ldr	r5, [r3, #8]
 800ce8a:	b15d      	cbz	r5, 800cea4 <_reclaim_reent+0x58>
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4620      	mov	r0, r4
 800ce90:	682d      	ldr	r5, [r5, #0]
 800ce92:	f000 ff31 	bl	800dcf8 <_free_r>
 800ce96:	e7f8      	b.n	800ce8a <_reclaim_reent+0x3e>
 800ce98:	680e      	ldr	r6, [r1, #0]
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 ff2c 	bl	800dcf8 <_free_r>
 800cea0:	4631      	mov	r1, r6
 800cea2:	e7e1      	b.n	800ce68 <_reclaim_reent+0x1c>
 800cea4:	6961      	ldr	r1, [r4, #20]
 800cea6:	b111      	cbz	r1, 800ceae <_reclaim_reent+0x62>
 800cea8:	4620      	mov	r0, r4
 800ceaa:	f000 ff25 	bl	800dcf8 <_free_r>
 800ceae:	69e1      	ldr	r1, [r4, #28]
 800ceb0:	b111      	cbz	r1, 800ceb8 <_reclaim_reent+0x6c>
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f000 ff20 	bl	800dcf8 <_free_r>
 800ceb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ceba:	b111      	cbz	r1, 800cec2 <_reclaim_reent+0x76>
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 ff1b 	bl	800dcf8 <_free_r>
 800cec2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cec4:	b111      	cbz	r1, 800cecc <_reclaim_reent+0x80>
 800cec6:	4620      	mov	r0, r4
 800cec8:	f000 ff16 	bl	800dcf8 <_free_r>
 800cecc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cece:	b111      	cbz	r1, 800ced6 <_reclaim_reent+0x8a>
 800ced0:	4620      	mov	r0, r4
 800ced2:	f000 ff11 	bl	800dcf8 <_free_r>
 800ced6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ced8:	b111      	cbz	r1, 800cee0 <_reclaim_reent+0x94>
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 ff0c 	bl	800dcf8 <_free_r>
 800cee0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cee2:	b111      	cbz	r1, 800ceea <_reclaim_reent+0x9e>
 800cee4:	4620      	mov	r0, r4
 800cee6:	f000 ff07 	bl	800dcf8 <_free_r>
 800ceea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ceec:	b111      	cbz	r1, 800cef4 <_reclaim_reent+0xa8>
 800ceee:	4620      	mov	r0, r4
 800cef0:	f000 ff02 	bl	800dcf8 <_free_r>
 800cef4:	6a23      	ldr	r3, [r4, #32]
 800cef6:	b11b      	cbz	r3, 800cf00 <_reclaim_reent+0xb4>
 800cef8:	4620      	mov	r0, r4
 800cefa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cefe:	4718      	bx	r3
 800cf00:	bd70      	pop	{r4, r5, r6, pc}
 800cf02:	bf00      	nop
 800cf04:	20000188 	.word	0x20000188

0800cf08 <_lseek_r>:
 800cf08:	b538      	push	{r3, r4, r5, lr}
 800cf0a:	4d07      	ldr	r5, [pc, #28]	@ (800cf28 <_lseek_r+0x20>)
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	4608      	mov	r0, r1
 800cf10:	4611      	mov	r1, r2
 800cf12:	2200      	movs	r2, #0
 800cf14:	602a      	str	r2, [r5, #0]
 800cf16:	461a      	mov	r2, r3
 800cf18:	f7f6 f9d7 	bl	80032ca <_lseek>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_lseek_r+0x1e>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_lseek_r+0x1e>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	200052f4 	.word	0x200052f4

0800cf2c <_read_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d07      	ldr	r5, [pc, #28]	@ (800cf4c <_read_r+0x20>)
 800cf30:	4604      	mov	r4, r0
 800cf32:	4608      	mov	r0, r1
 800cf34:	4611      	mov	r1, r2
 800cf36:	2200      	movs	r2, #0
 800cf38:	602a      	str	r2, [r5, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f7f6 f9d2 	bl	80032e4 <_read>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_read_r+0x1e>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_read_r+0x1e>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	200052f4 	.word	0x200052f4

0800cf50 <_kill_r>:
 800cf50:	b538      	push	{r3, r4, r5, lr}
 800cf52:	4d07      	ldr	r5, [pc, #28]	@ (800cf70 <_kill_r+0x20>)
 800cf54:	2300      	movs	r3, #0
 800cf56:	4604      	mov	r4, r0
 800cf58:	4608      	mov	r0, r1
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	602b      	str	r3, [r5, #0]
 800cf5e:	f7f6 f9ce 	bl	80032fe <_kill>
 800cf62:	1c43      	adds	r3, r0, #1
 800cf64:	d102      	bne.n	800cf6c <_kill_r+0x1c>
 800cf66:	682b      	ldr	r3, [r5, #0]
 800cf68:	b103      	cbz	r3, 800cf6c <_kill_r+0x1c>
 800cf6a:	6023      	str	r3, [r4, #0]
 800cf6c:	bd38      	pop	{r3, r4, r5, pc}
 800cf6e:	bf00      	nop
 800cf70:	200052f4 	.word	0x200052f4

0800cf74 <_getpid_r>:
 800cf74:	f7f6 b9d0 	b.w	8003318 <_getpid>

0800cf78 <_sbrk_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d06      	ldr	r5, [pc, #24]	@ (800cf94 <_sbrk_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7f6 fc04 	bl	8003790 <_sbrk>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_sbrk_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_sbrk_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	200052f4 	.word	0x200052f4

0800cf98 <_write_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d07      	ldr	r5, [pc, #28]	@ (800cfb8 <_write_r+0x20>)
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	4608      	mov	r0, r1
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	602a      	str	r2, [r5, #0]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f7f6 f956 	bl	8003258 <_write>
 800cfac:	1c43      	adds	r3, r0, #1
 800cfae:	d102      	bne.n	800cfb6 <_write_r+0x1e>
 800cfb0:	682b      	ldr	r3, [r5, #0]
 800cfb2:	b103      	cbz	r3, 800cfb6 <_write_r+0x1e>
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	bd38      	pop	{r3, r4, r5, pc}
 800cfb8:	200052f4 	.word	0x200052f4

0800cfbc <__errno>:
 800cfbc:	4b01      	ldr	r3, [pc, #4]	@ (800cfc4 <__errno+0x8>)
 800cfbe:	6818      	ldr	r0, [r3, #0]
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	20000188 	.word	0x20000188

0800cfc8 <__libc_init_array>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	4d0d      	ldr	r5, [pc, #52]	@ (800d000 <__libc_init_array+0x38>)
 800cfcc:	4c0d      	ldr	r4, [pc, #52]	@ (800d004 <__libc_init_array+0x3c>)
 800cfce:	1b64      	subs	r4, r4, r5
 800cfd0:	10a4      	asrs	r4, r4, #2
 800cfd2:	2600      	movs	r6, #0
 800cfd4:	42a6      	cmp	r6, r4
 800cfd6:	d109      	bne.n	800cfec <__libc_init_array+0x24>
 800cfd8:	4d0b      	ldr	r5, [pc, #44]	@ (800d008 <__libc_init_array+0x40>)
 800cfda:	4c0c      	ldr	r4, [pc, #48]	@ (800d00c <__libc_init_array+0x44>)
 800cfdc:	f002 fbcc 	bl	800f778 <_init>
 800cfe0:	1b64      	subs	r4, r4, r5
 800cfe2:	10a4      	asrs	r4, r4, #2
 800cfe4:	2600      	movs	r6, #0
 800cfe6:	42a6      	cmp	r6, r4
 800cfe8:	d105      	bne.n	800cff6 <__libc_init_array+0x2e>
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	f855 3b04 	ldr.w	r3, [r5], #4
 800cff0:	4798      	blx	r3
 800cff2:	3601      	adds	r6, #1
 800cff4:	e7ee      	b.n	800cfd4 <__libc_init_array+0xc>
 800cff6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cffa:	4798      	blx	r3
 800cffc:	3601      	adds	r6, #1
 800cffe:	e7f2      	b.n	800cfe6 <__libc_init_array+0x1e>
 800d000:	0800ff04 	.word	0x0800ff04
 800d004:	0800ff04 	.word	0x0800ff04
 800d008:	0800ff04 	.word	0x0800ff04
 800d00c:	0800ff0c 	.word	0x0800ff0c

0800d010 <__retarget_lock_init_recursive>:
 800d010:	4770      	bx	lr

0800d012 <__retarget_lock_acquire_recursive>:
 800d012:	4770      	bx	lr

0800d014 <__retarget_lock_release_recursive>:
 800d014:	4770      	bx	lr

0800d016 <memcpy>:
 800d016:	440a      	add	r2, r1
 800d018:	4291      	cmp	r1, r2
 800d01a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d01e:	d100      	bne.n	800d022 <memcpy+0xc>
 800d020:	4770      	bx	lr
 800d022:	b510      	push	{r4, lr}
 800d024:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d02c:	4291      	cmp	r1, r2
 800d02e:	d1f9      	bne.n	800d024 <memcpy+0xe>
 800d030:	bd10      	pop	{r4, pc}
 800d032:	0000      	movs	r0, r0
 800d034:	0000      	movs	r0, r0
	...

0800d038 <nan>:
 800d038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d040 <nan+0x8>
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	00000000 	.word	0x00000000
 800d044:	7ff80000 	.word	0x7ff80000

0800d048 <quorem>:
 800d048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d04c:	6903      	ldr	r3, [r0, #16]
 800d04e:	690c      	ldr	r4, [r1, #16]
 800d050:	42a3      	cmp	r3, r4
 800d052:	4607      	mov	r7, r0
 800d054:	db7e      	blt.n	800d154 <quorem+0x10c>
 800d056:	3c01      	subs	r4, #1
 800d058:	f101 0814 	add.w	r8, r1, #20
 800d05c:	00a3      	lsls	r3, r4, #2
 800d05e:	f100 0514 	add.w	r5, r0, #20
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d06e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d072:	3301      	adds	r3, #1
 800d074:	429a      	cmp	r2, r3
 800d076:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d07a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d07e:	d32e      	bcc.n	800d0de <quorem+0x96>
 800d080:	f04f 0a00 	mov.w	sl, #0
 800d084:	46c4      	mov	ip, r8
 800d086:	46ae      	mov	lr, r5
 800d088:	46d3      	mov	fp, sl
 800d08a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d08e:	b298      	uxth	r0, r3
 800d090:	fb06 a000 	mla	r0, r6, r0, sl
 800d094:	0c02      	lsrs	r2, r0, #16
 800d096:	0c1b      	lsrs	r3, r3, #16
 800d098:	fb06 2303 	mla	r3, r6, r3, r2
 800d09c:	f8de 2000 	ldr.w	r2, [lr]
 800d0a0:	b280      	uxth	r0, r0
 800d0a2:	b292      	uxth	r2, r2
 800d0a4:	1a12      	subs	r2, r2, r0
 800d0a6:	445a      	add	r2, fp
 800d0a8:	f8de 0000 	ldr.w	r0, [lr]
 800d0ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d0b6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d0ba:	b292      	uxth	r2, r2
 800d0bc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d0c0:	45e1      	cmp	r9, ip
 800d0c2:	f84e 2b04 	str.w	r2, [lr], #4
 800d0c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0ca:	d2de      	bcs.n	800d08a <quorem+0x42>
 800d0cc:	9b00      	ldr	r3, [sp, #0]
 800d0ce:	58eb      	ldr	r3, [r5, r3]
 800d0d0:	b92b      	cbnz	r3, 800d0de <quorem+0x96>
 800d0d2:	9b01      	ldr	r3, [sp, #4]
 800d0d4:	3b04      	subs	r3, #4
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	d32f      	bcc.n	800d13c <quorem+0xf4>
 800d0dc:	613c      	str	r4, [r7, #16]
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f001 fc5c 	bl	800e99c <__mcmp>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	db25      	blt.n	800d134 <quorem+0xec>
 800d0e8:	4629      	mov	r1, r5
 800d0ea:	2000      	movs	r0, #0
 800d0ec:	f858 2b04 	ldr.w	r2, [r8], #4
 800d0f0:	f8d1 c000 	ldr.w	ip, [r1]
 800d0f4:	fa1f fe82 	uxth.w	lr, r2
 800d0f8:	fa1f f38c 	uxth.w	r3, ip
 800d0fc:	eba3 030e 	sub.w	r3, r3, lr
 800d100:	4403      	add	r3, r0
 800d102:	0c12      	lsrs	r2, r2, #16
 800d104:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d108:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d112:	45c1      	cmp	r9, r8
 800d114:	f841 3b04 	str.w	r3, [r1], #4
 800d118:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d11c:	d2e6      	bcs.n	800d0ec <quorem+0xa4>
 800d11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d126:	b922      	cbnz	r2, 800d132 <quorem+0xea>
 800d128:	3b04      	subs	r3, #4
 800d12a:	429d      	cmp	r5, r3
 800d12c:	461a      	mov	r2, r3
 800d12e:	d30b      	bcc.n	800d148 <quorem+0x100>
 800d130:	613c      	str	r4, [r7, #16]
 800d132:	3601      	adds	r6, #1
 800d134:	4630      	mov	r0, r6
 800d136:	b003      	add	sp, #12
 800d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13c:	6812      	ldr	r2, [r2, #0]
 800d13e:	3b04      	subs	r3, #4
 800d140:	2a00      	cmp	r2, #0
 800d142:	d1cb      	bne.n	800d0dc <quorem+0x94>
 800d144:	3c01      	subs	r4, #1
 800d146:	e7c6      	b.n	800d0d6 <quorem+0x8e>
 800d148:	6812      	ldr	r2, [r2, #0]
 800d14a:	3b04      	subs	r3, #4
 800d14c:	2a00      	cmp	r2, #0
 800d14e:	d1ef      	bne.n	800d130 <quorem+0xe8>
 800d150:	3c01      	subs	r4, #1
 800d152:	e7ea      	b.n	800d12a <quorem+0xe2>
 800d154:	2000      	movs	r0, #0
 800d156:	e7ee      	b.n	800d136 <quorem+0xee>

0800d158 <_dtoa_r>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	69c7      	ldr	r7, [r0, #28]
 800d15e:	b097      	sub	sp, #92	@ 0x5c
 800d160:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d164:	ec55 4b10 	vmov	r4, r5, d0
 800d168:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d16a:	9107      	str	r1, [sp, #28]
 800d16c:	4681      	mov	r9, r0
 800d16e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d170:	9311      	str	r3, [sp, #68]	@ 0x44
 800d172:	b97f      	cbnz	r7, 800d194 <_dtoa_r+0x3c>
 800d174:	2010      	movs	r0, #16
 800d176:	f7fe f993 	bl	800b4a0 <malloc>
 800d17a:	4602      	mov	r2, r0
 800d17c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d180:	b920      	cbnz	r0, 800d18c <_dtoa_r+0x34>
 800d182:	4ba9      	ldr	r3, [pc, #676]	@ (800d428 <_dtoa_r+0x2d0>)
 800d184:	21ef      	movs	r1, #239	@ 0xef
 800d186:	48a9      	ldr	r0, [pc, #676]	@ (800d42c <_dtoa_r+0x2d4>)
 800d188:	f002 f820 	bl	800f1cc <__assert_func>
 800d18c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d190:	6007      	str	r7, [r0, #0]
 800d192:	60c7      	str	r7, [r0, #12]
 800d194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d198:	6819      	ldr	r1, [r3, #0]
 800d19a:	b159      	cbz	r1, 800d1b4 <_dtoa_r+0x5c>
 800d19c:	685a      	ldr	r2, [r3, #4]
 800d19e:	604a      	str	r2, [r1, #4]
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	4093      	lsls	r3, r2
 800d1a4:	608b      	str	r3, [r1, #8]
 800d1a6:	4648      	mov	r0, r9
 800d1a8:	f001 f97c 	bl	800e4a4 <_Bfree>
 800d1ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	601a      	str	r2, [r3, #0]
 800d1b4:	1e2b      	subs	r3, r5, #0
 800d1b6:	bfb9      	ittee	lt
 800d1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d1bc:	9305      	strlt	r3, [sp, #20]
 800d1be:	2300      	movge	r3, #0
 800d1c0:	6033      	strge	r3, [r6, #0]
 800d1c2:	9f05      	ldr	r7, [sp, #20]
 800d1c4:	4b9a      	ldr	r3, [pc, #616]	@ (800d430 <_dtoa_r+0x2d8>)
 800d1c6:	bfbc      	itt	lt
 800d1c8:	2201      	movlt	r2, #1
 800d1ca:	6032      	strlt	r2, [r6, #0]
 800d1cc:	43bb      	bics	r3, r7
 800d1ce:	d112      	bne.n	800d1f6 <_dtoa_r+0x9e>
 800d1d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d1d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d1d6:	6013      	str	r3, [r2, #0]
 800d1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1dc:	4323      	orrs	r3, r4
 800d1de:	f000 855a 	beq.w	800dc96 <_dtoa_r+0xb3e>
 800d1e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d1e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d444 <_dtoa_r+0x2ec>
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 855c 	beq.w	800dca6 <_dtoa_r+0xb4e>
 800d1ee:	f10a 0303 	add.w	r3, sl, #3
 800d1f2:	f000 bd56 	b.w	800dca2 <_dtoa_r+0xb4a>
 800d1f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	ec51 0b17 	vmov	r0, r1, d7
 800d200:	2300      	movs	r3, #0
 800d202:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d206:	f7f3 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d20a:	4680      	mov	r8, r0
 800d20c:	b158      	cbz	r0, 800d226 <_dtoa_r+0xce>
 800d20e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d210:	2301      	movs	r3, #1
 800d212:	6013      	str	r3, [r2, #0]
 800d214:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d216:	b113      	cbz	r3, 800d21e <_dtoa_r+0xc6>
 800d218:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d21a:	4b86      	ldr	r3, [pc, #536]	@ (800d434 <_dtoa_r+0x2dc>)
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d448 <_dtoa_r+0x2f0>
 800d222:	f000 bd40 	b.w	800dca6 <_dtoa_r+0xb4e>
 800d226:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d22a:	aa14      	add	r2, sp, #80	@ 0x50
 800d22c:	a915      	add	r1, sp, #84	@ 0x54
 800d22e:	4648      	mov	r0, r9
 800d230:	f001 fcd4 	bl	800ebdc <__d2b>
 800d234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d238:	9002      	str	r0, [sp, #8]
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d078      	beq.n	800d330 <_dtoa_r+0x1d8>
 800d23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d240:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d24c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d258:	4619      	mov	r1, r3
 800d25a:	2200      	movs	r2, #0
 800d25c:	4b76      	ldr	r3, [pc, #472]	@ (800d438 <_dtoa_r+0x2e0>)
 800d25e:	f7f3 f813 	bl	8000288 <__aeabi_dsub>
 800d262:	a36b      	add	r3, pc, #428	@ (adr r3, 800d410 <_dtoa_r+0x2b8>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	f7f3 f9c6 	bl	80005f8 <__aeabi_dmul>
 800d26c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d418 <_dtoa_r+0x2c0>)
 800d26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d272:	f7f3 f80b 	bl	800028c <__adddf3>
 800d276:	4604      	mov	r4, r0
 800d278:	4630      	mov	r0, r6
 800d27a:	460d      	mov	r5, r1
 800d27c:	f7f3 f952 	bl	8000524 <__aeabi_i2d>
 800d280:	a367      	add	r3, pc, #412	@ (adr r3, 800d420 <_dtoa_r+0x2c8>)
 800d282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d286:	f7f3 f9b7 	bl	80005f8 <__aeabi_dmul>
 800d28a:	4602      	mov	r2, r0
 800d28c:	460b      	mov	r3, r1
 800d28e:	4620      	mov	r0, r4
 800d290:	4629      	mov	r1, r5
 800d292:	f7f2 fffb 	bl	800028c <__adddf3>
 800d296:	4604      	mov	r4, r0
 800d298:	460d      	mov	r5, r1
 800d29a:	f7f3 fc5d 	bl	8000b58 <__aeabi_d2iz>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	f7f3 fc18 	bl	8000adc <__aeabi_dcmplt>
 800d2ac:	b140      	cbz	r0, 800d2c0 <_dtoa_r+0x168>
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f7f3 f938 	bl	8000524 <__aeabi_i2d>
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	f7f3 fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2bc:	b900      	cbnz	r0, 800d2c0 <_dtoa_r+0x168>
 800d2be:	3f01      	subs	r7, #1
 800d2c0:	2f16      	cmp	r7, #22
 800d2c2:	d852      	bhi.n	800d36a <_dtoa_r+0x212>
 800d2c4:	4b5d      	ldr	r3, [pc, #372]	@ (800d43c <_dtoa_r+0x2e4>)
 800d2c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2d2:	f7f3 fc03 	bl	8000adc <__aeabi_dcmplt>
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d049      	beq.n	800d36e <_dtoa_r+0x216>
 800d2da:	3f01      	subs	r7, #1
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d2e2:	1b9b      	subs	r3, r3, r6
 800d2e4:	1e5a      	subs	r2, r3, #1
 800d2e6:	bf45      	ittet	mi
 800d2e8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d2ec:	9300      	strmi	r3, [sp, #0]
 800d2ee:	2300      	movpl	r3, #0
 800d2f0:	2300      	movmi	r3, #0
 800d2f2:	9206      	str	r2, [sp, #24]
 800d2f4:	bf54      	ite	pl
 800d2f6:	9300      	strpl	r3, [sp, #0]
 800d2f8:	9306      	strmi	r3, [sp, #24]
 800d2fa:	2f00      	cmp	r7, #0
 800d2fc:	db39      	blt.n	800d372 <_dtoa_r+0x21a>
 800d2fe:	9b06      	ldr	r3, [sp, #24]
 800d300:	970d      	str	r7, [sp, #52]	@ 0x34
 800d302:	443b      	add	r3, r7
 800d304:	9306      	str	r3, [sp, #24]
 800d306:	2300      	movs	r3, #0
 800d308:	9308      	str	r3, [sp, #32]
 800d30a:	9b07      	ldr	r3, [sp, #28]
 800d30c:	2b09      	cmp	r3, #9
 800d30e:	d863      	bhi.n	800d3d8 <_dtoa_r+0x280>
 800d310:	2b05      	cmp	r3, #5
 800d312:	bfc4      	itt	gt
 800d314:	3b04      	subgt	r3, #4
 800d316:	9307      	strgt	r3, [sp, #28]
 800d318:	9b07      	ldr	r3, [sp, #28]
 800d31a:	f1a3 0302 	sub.w	r3, r3, #2
 800d31e:	bfcc      	ite	gt
 800d320:	2400      	movgt	r4, #0
 800d322:	2401      	movle	r4, #1
 800d324:	2b03      	cmp	r3, #3
 800d326:	d863      	bhi.n	800d3f0 <_dtoa_r+0x298>
 800d328:	e8df f003 	tbb	[pc, r3]
 800d32c:	2b375452 	.word	0x2b375452
 800d330:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d334:	441e      	add	r6, r3
 800d336:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d33a:	2b20      	cmp	r3, #32
 800d33c:	bfc1      	itttt	gt
 800d33e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d342:	409f      	lslgt	r7, r3
 800d344:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d348:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d34c:	bfd6      	itet	le
 800d34e:	f1c3 0320 	rsble	r3, r3, #32
 800d352:	ea47 0003 	orrgt.w	r0, r7, r3
 800d356:	fa04 f003 	lslle.w	r0, r4, r3
 800d35a:	f7f3 f8d3 	bl	8000504 <__aeabi_ui2d>
 800d35e:	2201      	movs	r2, #1
 800d360:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d364:	3e01      	subs	r6, #1
 800d366:	9212      	str	r2, [sp, #72]	@ 0x48
 800d368:	e776      	b.n	800d258 <_dtoa_r+0x100>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e7b7      	b.n	800d2de <_dtoa_r+0x186>
 800d36e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d370:	e7b6      	b.n	800d2e0 <_dtoa_r+0x188>
 800d372:	9b00      	ldr	r3, [sp, #0]
 800d374:	1bdb      	subs	r3, r3, r7
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	427b      	negs	r3, r7
 800d37a:	9308      	str	r3, [sp, #32]
 800d37c:	2300      	movs	r3, #0
 800d37e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d380:	e7c3      	b.n	800d30a <_dtoa_r+0x1b2>
 800d382:	2301      	movs	r3, #1
 800d384:	9309      	str	r3, [sp, #36]	@ 0x24
 800d386:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d388:	eb07 0b03 	add.w	fp, r7, r3
 800d38c:	f10b 0301 	add.w	r3, fp, #1
 800d390:	2b01      	cmp	r3, #1
 800d392:	9303      	str	r3, [sp, #12]
 800d394:	bfb8      	it	lt
 800d396:	2301      	movlt	r3, #1
 800d398:	e006      	b.n	800d3a8 <_dtoa_r+0x250>
 800d39a:	2301      	movs	r3, #1
 800d39c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d39e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dd28      	ble.n	800d3f6 <_dtoa_r+0x29e>
 800d3a4:	469b      	mov	fp, r3
 800d3a6:	9303      	str	r3, [sp, #12]
 800d3a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	2204      	movs	r2, #4
 800d3b0:	f102 0514 	add.w	r5, r2, #20
 800d3b4:	429d      	cmp	r5, r3
 800d3b6:	d926      	bls.n	800d406 <_dtoa_r+0x2ae>
 800d3b8:	6041      	str	r1, [r0, #4]
 800d3ba:	4648      	mov	r0, r9
 800d3bc:	f001 f832 	bl	800e424 <_Balloc>
 800d3c0:	4682      	mov	sl, r0
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d142      	bne.n	800d44c <_dtoa_r+0x2f4>
 800d3c6:	4b1e      	ldr	r3, [pc, #120]	@ (800d440 <_dtoa_r+0x2e8>)
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	f240 11af 	movw	r1, #431	@ 0x1af
 800d3ce:	e6da      	b.n	800d186 <_dtoa_r+0x2e>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e7e3      	b.n	800d39c <_dtoa_r+0x244>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	e7d5      	b.n	800d384 <_dtoa_r+0x22c>
 800d3d8:	2401      	movs	r4, #1
 800d3da:	2300      	movs	r3, #0
 800d3dc:	9307      	str	r3, [sp, #28]
 800d3de:	9409      	str	r4, [sp, #36]	@ 0x24
 800d3e0:	f04f 3bff 	mov.w	fp, #4294967295
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d3ea:	2312      	movs	r3, #18
 800d3ec:	920c      	str	r2, [sp, #48]	@ 0x30
 800d3ee:	e7db      	b.n	800d3a8 <_dtoa_r+0x250>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f4:	e7f4      	b.n	800d3e0 <_dtoa_r+0x288>
 800d3f6:	f04f 0b01 	mov.w	fp, #1
 800d3fa:	f8cd b00c 	str.w	fp, [sp, #12]
 800d3fe:	465b      	mov	r3, fp
 800d400:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d404:	e7d0      	b.n	800d3a8 <_dtoa_r+0x250>
 800d406:	3101      	adds	r1, #1
 800d408:	0052      	lsls	r2, r2, #1
 800d40a:	e7d1      	b.n	800d3b0 <_dtoa_r+0x258>
 800d40c:	f3af 8000 	nop.w
 800d410:	636f4361 	.word	0x636f4361
 800d414:	3fd287a7 	.word	0x3fd287a7
 800d418:	8b60c8b3 	.word	0x8b60c8b3
 800d41c:	3fc68a28 	.word	0x3fc68a28
 800d420:	509f79fb 	.word	0x509f79fb
 800d424:	3fd34413 	.word	0x3fd34413
 800d428:	0800fb1b 	.word	0x0800fb1b
 800d42c:	0800fb32 	.word	0x0800fb32
 800d430:	7ff00000 	.word	0x7ff00000
 800d434:	0800fae3 	.word	0x0800fae3
 800d438:	3ff80000 	.word	0x3ff80000
 800d43c:	0800fd30 	.word	0x0800fd30
 800d440:	0800fb8a 	.word	0x0800fb8a
 800d444:	0800fb17 	.word	0x0800fb17
 800d448:	0800fae2 	.word	0x0800fae2
 800d44c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d450:	6018      	str	r0, [r3, #0]
 800d452:	9b03      	ldr	r3, [sp, #12]
 800d454:	2b0e      	cmp	r3, #14
 800d456:	f200 80a1 	bhi.w	800d59c <_dtoa_r+0x444>
 800d45a:	2c00      	cmp	r4, #0
 800d45c:	f000 809e 	beq.w	800d59c <_dtoa_r+0x444>
 800d460:	2f00      	cmp	r7, #0
 800d462:	dd33      	ble.n	800d4cc <_dtoa_r+0x374>
 800d464:	4b9c      	ldr	r3, [pc, #624]	@ (800d6d8 <_dtoa_r+0x580>)
 800d466:	f007 020f 	and.w	r2, r7, #15
 800d46a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d46e:	ed93 7b00 	vldr	d7, [r3]
 800d472:	05f8      	lsls	r0, r7, #23
 800d474:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d478:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d47c:	d516      	bpl.n	800d4ac <_dtoa_r+0x354>
 800d47e:	4b97      	ldr	r3, [pc, #604]	@ (800d6dc <_dtoa_r+0x584>)
 800d480:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d488:	f7f3 f9e0 	bl	800084c <__aeabi_ddiv>
 800d48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d490:	f004 040f 	and.w	r4, r4, #15
 800d494:	2603      	movs	r6, #3
 800d496:	4d91      	ldr	r5, [pc, #580]	@ (800d6dc <_dtoa_r+0x584>)
 800d498:	b954      	cbnz	r4, 800d4b0 <_dtoa_r+0x358>
 800d49a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d49e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4a2:	f7f3 f9d3 	bl	800084c <__aeabi_ddiv>
 800d4a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4aa:	e028      	b.n	800d4fe <_dtoa_r+0x3a6>
 800d4ac:	2602      	movs	r6, #2
 800d4ae:	e7f2      	b.n	800d496 <_dtoa_r+0x33e>
 800d4b0:	07e1      	lsls	r1, r4, #31
 800d4b2:	d508      	bpl.n	800d4c6 <_dtoa_r+0x36e>
 800d4b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d4b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4bc:	f7f3 f89c 	bl	80005f8 <__aeabi_dmul>
 800d4c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4c4:	3601      	adds	r6, #1
 800d4c6:	1064      	asrs	r4, r4, #1
 800d4c8:	3508      	adds	r5, #8
 800d4ca:	e7e5      	b.n	800d498 <_dtoa_r+0x340>
 800d4cc:	f000 80af 	beq.w	800d62e <_dtoa_r+0x4d6>
 800d4d0:	427c      	negs	r4, r7
 800d4d2:	4b81      	ldr	r3, [pc, #516]	@ (800d6d8 <_dtoa_r+0x580>)
 800d4d4:	4d81      	ldr	r5, [pc, #516]	@ (800d6dc <_dtoa_r+0x584>)
 800d4d6:	f004 020f 	and.w	r2, r4, #15
 800d4da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d4e6:	f7f3 f887 	bl	80005f8 <__aeabi_dmul>
 800d4ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4ee:	1124      	asrs	r4, r4, #4
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	2602      	movs	r6, #2
 800d4f4:	2c00      	cmp	r4, #0
 800d4f6:	f040 808f 	bne.w	800d618 <_dtoa_r+0x4c0>
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1d3      	bne.n	800d4a6 <_dtoa_r+0x34e>
 800d4fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d500:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 8094 	beq.w	800d632 <_dtoa_r+0x4da>
 800d50a:	4b75      	ldr	r3, [pc, #468]	@ (800d6e0 <_dtoa_r+0x588>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	4620      	mov	r0, r4
 800d510:	4629      	mov	r1, r5
 800d512:	f7f3 fae3 	bl	8000adc <__aeabi_dcmplt>
 800d516:	2800      	cmp	r0, #0
 800d518:	f000 808b 	beq.w	800d632 <_dtoa_r+0x4da>
 800d51c:	9b03      	ldr	r3, [sp, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f000 8087 	beq.w	800d632 <_dtoa_r+0x4da>
 800d524:	f1bb 0f00 	cmp.w	fp, #0
 800d528:	dd34      	ble.n	800d594 <_dtoa_r+0x43c>
 800d52a:	4620      	mov	r0, r4
 800d52c:	4b6d      	ldr	r3, [pc, #436]	@ (800d6e4 <_dtoa_r+0x58c>)
 800d52e:	2200      	movs	r2, #0
 800d530:	4629      	mov	r1, r5
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d53a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d53e:	3601      	adds	r6, #1
 800d540:	465c      	mov	r4, fp
 800d542:	4630      	mov	r0, r6
 800d544:	f7f2 ffee 	bl	8000524 <__aeabi_i2d>
 800d548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d54c:	f7f3 f854 	bl	80005f8 <__aeabi_dmul>
 800d550:	4b65      	ldr	r3, [pc, #404]	@ (800d6e8 <_dtoa_r+0x590>)
 800d552:	2200      	movs	r2, #0
 800d554:	f7f2 fe9a 	bl	800028c <__adddf3>
 800d558:	4605      	mov	r5, r0
 800d55a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d55e:	2c00      	cmp	r4, #0
 800d560:	d16a      	bne.n	800d638 <_dtoa_r+0x4e0>
 800d562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d566:	4b61      	ldr	r3, [pc, #388]	@ (800d6ec <_dtoa_r+0x594>)
 800d568:	2200      	movs	r2, #0
 800d56a:	f7f2 fe8d 	bl	8000288 <__aeabi_dsub>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d576:	462a      	mov	r2, r5
 800d578:	4633      	mov	r3, r6
 800d57a:	f7f3 facd 	bl	8000b18 <__aeabi_dcmpgt>
 800d57e:	2800      	cmp	r0, #0
 800d580:	f040 8298 	bne.w	800dab4 <_dtoa_r+0x95c>
 800d584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d588:	462a      	mov	r2, r5
 800d58a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d58e:	f7f3 faa5 	bl	8000adc <__aeabi_dcmplt>
 800d592:	bb38      	cbnz	r0, 800d5e4 <_dtoa_r+0x48c>
 800d594:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d598:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d59c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f2c0 8157 	blt.w	800d852 <_dtoa_r+0x6fa>
 800d5a4:	2f0e      	cmp	r7, #14
 800d5a6:	f300 8154 	bgt.w	800d852 <_dtoa_r+0x6fa>
 800d5aa:	4b4b      	ldr	r3, [pc, #300]	@ (800d6d8 <_dtoa_r+0x580>)
 800d5ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5b0:	ed93 7b00 	vldr	d7, [r3]
 800d5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	ed8d 7b00 	vstr	d7, [sp]
 800d5bc:	f280 80e5 	bge.w	800d78a <_dtoa_r+0x632>
 800d5c0:	9b03      	ldr	r3, [sp, #12]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	f300 80e1 	bgt.w	800d78a <_dtoa_r+0x632>
 800d5c8:	d10c      	bne.n	800d5e4 <_dtoa_r+0x48c>
 800d5ca:	4b48      	ldr	r3, [pc, #288]	@ (800d6ec <_dtoa_r+0x594>)
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	ec51 0b17 	vmov	r0, r1, d7
 800d5d2:	f7f3 f811 	bl	80005f8 <__aeabi_dmul>
 800d5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5da:	f7f3 fa93 	bl	8000b04 <__aeabi_dcmpge>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f000 8266 	beq.w	800dab0 <_dtoa_r+0x958>
 800d5e4:	2400      	movs	r4, #0
 800d5e6:	4625      	mov	r5, r4
 800d5e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d5ea:	4656      	mov	r6, sl
 800d5ec:	ea6f 0803 	mvn.w	r8, r3
 800d5f0:	2700      	movs	r7, #0
 800d5f2:	4621      	mov	r1, r4
 800d5f4:	4648      	mov	r0, r9
 800d5f6:	f000 ff55 	bl	800e4a4 <_Bfree>
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	f000 80bd 	beq.w	800d77a <_dtoa_r+0x622>
 800d600:	b12f      	cbz	r7, 800d60e <_dtoa_r+0x4b6>
 800d602:	42af      	cmp	r7, r5
 800d604:	d003      	beq.n	800d60e <_dtoa_r+0x4b6>
 800d606:	4639      	mov	r1, r7
 800d608:	4648      	mov	r0, r9
 800d60a:	f000 ff4b 	bl	800e4a4 <_Bfree>
 800d60e:	4629      	mov	r1, r5
 800d610:	4648      	mov	r0, r9
 800d612:	f000 ff47 	bl	800e4a4 <_Bfree>
 800d616:	e0b0      	b.n	800d77a <_dtoa_r+0x622>
 800d618:	07e2      	lsls	r2, r4, #31
 800d61a:	d505      	bpl.n	800d628 <_dtoa_r+0x4d0>
 800d61c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d620:	f7f2 ffea 	bl	80005f8 <__aeabi_dmul>
 800d624:	3601      	adds	r6, #1
 800d626:	2301      	movs	r3, #1
 800d628:	1064      	asrs	r4, r4, #1
 800d62a:	3508      	adds	r5, #8
 800d62c:	e762      	b.n	800d4f4 <_dtoa_r+0x39c>
 800d62e:	2602      	movs	r6, #2
 800d630:	e765      	b.n	800d4fe <_dtoa_r+0x3a6>
 800d632:	9c03      	ldr	r4, [sp, #12]
 800d634:	46b8      	mov	r8, r7
 800d636:	e784      	b.n	800d542 <_dtoa_r+0x3ea>
 800d638:	4b27      	ldr	r3, [pc, #156]	@ (800d6d8 <_dtoa_r+0x580>)
 800d63a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d63c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d640:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d644:	4454      	add	r4, sl
 800d646:	2900      	cmp	r1, #0
 800d648:	d054      	beq.n	800d6f4 <_dtoa_r+0x59c>
 800d64a:	4929      	ldr	r1, [pc, #164]	@ (800d6f0 <_dtoa_r+0x598>)
 800d64c:	2000      	movs	r0, #0
 800d64e:	f7f3 f8fd 	bl	800084c <__aeabi_ddiv>
 800d652:	4633      	mov	r3, r6
 800d654:	462a      	mov	r2, r5
 800d656:	f7f2 fe17 	bl	8000288 <__aeabi_dsub>
 800d65a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d65e:	4656      	mov	r6, sl
 800d660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d664:	f7f3 fa78 	bl	8000b58 <__aeabi_d2iz>
 800d668:	4605      	mov	r5, r0
 800d66a:	f7f2 ff5b 	bl	8000524 <__aeabi_i2d>
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d676:	f7f2 fe07 	bl	8000288 <__aeabi_dsub>
 800d67a:	3530      	adds	r5, #48	@ 0x30
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d684:	f806 5b01 	strb.w	r5, [r6], #1
 800d688:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d68c:	f7f3 fa26 	bl	8000adc <__aeabi_dcmplt>
 800d690:	2800      	cmp	r0, #0
 800d692:	d172      	bne.n	800d77a <_dtoa_r+0x622>
 800d694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d698:	4911      	ldr	r1, [pc, #68]	@ (800d6e0 <_dtoa_r+0x588>)
 800d69a:	2000      	movs	r0, #0
 800d69c:	f7f2 fdf4 	bl	8000288 <__aeabi_dsub>
 800d6a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d6a4:	f7f3 fa1a 	bl	8000adc <__aeabi_dcmplt>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f040 80b4 	bne.w	800d816 <_dtoa_r+0x6be>
 800d6ae:	42a6      	cmp	r6, r4
 800d6b0:	f43f af70 	beq.w	800d594 <_dtoa_r+0x43c>
 800d6b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d6b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e4 <_dtoa_r+0x58c>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f7f2 ff9c 	bl	80005f8 <__aeabi_dmul>
 800d6c0:	4b08      	ldr	r3, [pc, #32]	@ (800d6e4 <_dtoa_r+0x58c>)
 800d6c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6cc:	f7f2 ff94 	bl	80005f8 <__aeabi_dmul>
 800d6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6d4:	e7c4      	b.n	800d660 <_dtoa_r+0x508>
 800d6d6:	bf00      	nop
 800d6d8:	0800fd30 	.word	0x0800fd30
 800d6dc:	0800fd08 	.word	0x0800fd08
 800d6e0:	3ff00000 	.word	0x3ff00000
 800d6e4:	40240000 	.word	0x40240000
 800d6e8:	401c0000 	.word	0x401c0000
 800d6ec:	40140000 	.word	0x40140000
 800d6f0:	3fe00000 	.word	0x3fe00000
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f7f2 ff7e 	bl	80005f8 <__aeabi_dmul>
 800d6fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d700:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d702:	4656      	mov	r6, sl
 800d704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d708:	f7f3 fa26 	bl	8000b58 <__aeabi_d2iz>
 800d70c:	4605      	mov	r5, r0
 800d70e:	f7f2 ff09 	bl	8000524 <__aeabi_i2d>
 800d712:	4602      	mov	r2, r0
 800d714:	460b      	mov	r3, r1
 800d716:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d71a:	f7f2 fdb5 	bl	8000288 <__aeabi_dsub>
 800d71e:	3530      	adds	r5, #48	@ 0x30
 800d720:	f806 5b01 	strb.w	r5, [r6], #1
 800d724:	4602      	mov	r2, r0
 800d726:	460b      	mov	r3, r1
 800d728:	42a6      	cmp	r6, r4
 800d72a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d72e:	f04f 0200 	mov.w	r2, #0
 800d732:	d124      	bne.n	800d77e <_dtoa_r+0x626>
 800d734:	4baf      	ldr	r3, [pc, #700]	@ (800d9f4 <_dtoa_r+0x89c>)
 800d736:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d73a:	f7f2 fda7 	bl	800028c <__adddf3>
 800d73e:	4602      	mov	r2, r0
 800d740:	460b      	mov	r3, r1
 800d742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d746:	f7f3 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d163      	bne.n	800d816 <_dtoa_r+0x6be>
 800d74e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d752:	49a8      	ldr	r1, [pc, #672]	@ (800d9f4 <_dtoa_r+0x89c>)
 800d754:	2000      	movs	r0, #0
 800d756:	f7f2 fd97 	bl	8000288 <__aeabi_dsub>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d762:	f7f3 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800d766:	2800      	cmp	r0, #0
 800d768:	f43f af14 	beq.w	800d594 <_dtoa_r+0x43c>
 800d76c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d76e:	1e73      	subs	r3, r6, #1
 800d770:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d772:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d776:	2b30      	cmp	r3, #48	@ 0x30
 800d778:	d0f8      	beq.n	800d76c <_dtoa_r+0x614>
 800d77a:	4647      	mov	r7, r8
 800d77c:	e03b      	b.n	800d7f6 <_dtoa_r+0x69e>
 800d77e:	4b9e      	ldr	r3, [pc, #632]	@ (800d9f8 <_dtoa_r+0x8a0>)
 800d780:	f7f2 ff3a 	bl	80005f8 <__aeabi_dmul>
 800d784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d788:	e7bc      	b.n	800d704 <_dtoa_r+0x5ac>
 800d78a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d78e:	4656      	mov	r6, sl
 800d790:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d794:	4620      	mov	r0, r4
 800d796:	4629      	mov	r1, r5
 800d798:	f7f3 f858 	bl	800084c <__aeabi_ddiv>
 800d79c:	f7f3 f9dc 	bl	8000b58 <__aeabi_d2iz>
 800d7a0:	4680      	mov	r8, r0
 800d7a2:	f7f2 febf 	bl	8000524 <__aeabi_i2d>
 800d7a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7aa:	f7f2 ff25 	bl	80005f8 <__aeabi_dmul>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d7ba:	f7f2 fd65 	bl	8000288 <__aeabi_dsub>
 800d7be:	f806 4b01 	strb.w	r4, [r6], #1
 800d7c2:	9d03      	ldr	r5, [sp, #12]
 800d7c4:	eba6 040a 	sub.w	r4, r6, sl
 800d7c8:	42a5      	cmp	r5, r4
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	d133      	bne.n	800d838 <_dtoa_r+0x6e0>
 800d7d0:	f7f2 fd5c 	bl	800028c <__adddf3>
 800d7d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7d8:	4604      	mov	r4, r0
 800d7da:	460d      	mov	r5, r1
 800d7dc:	f7f3 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 800d7e0:	b9c0      	cbnz	r0, 800d814 <_dtoa_r+0x6bc>
 800d7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	4629      	mov	r1, r5
 800d7ea:	f7f3 f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ee:	b110      	cbz	r0, 800d7f6 <_dtoa_r+0x69e>
 800d7f0:	f018 0f01 	tst.w	r8, #1
 800d7f4:	d10e      	bne.n	800d814 <_dtoa_r+0x6bc>
 800d7f6:	9902      	ldr	r1, [sp, #8]
 800d7f8:	4648      	mov	r0, r9
 800d7fa:	f000 fe53 	bl	800e4a4 <_Bfree>
 800d7fe:	2300      	movs	r3, #0
 800d800:	7033      	strb	r3, [r6, #0]
 800d802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d804:	3701      	adds	r7, #1
 800d806:	601f      	str	r7, [r3, #0]
 800d808:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 824b 	beq.w	800dca6 <_dtoa_r+0xb4e>
 800d810:	601e      	str	r6, [r3, #0]
 800d812:	e248      	b.n	800dca6 <_dtoa_r+0xb4e>
 800d814:	46b8      	mov	r8, r7
 800d816:	4633      	mov	r3, r6
 800d818:	461e      	mov	r6, r3
 800d81a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d81e:	2a39      	cmp	r2, #57	@ 0x39
 800d820:	d106      	bne.n	800d830 <_dtoa_r+0x6d8>
 800d822:	459a      	cmp	sl, r3
 800d824:	d1f8      	bne.n	800d818 <_dtoa_r+0x6c0>
 800d826:	2230      	movs	r2, #48	@ 0x30
 800d828:	f108 0801 	add.w	r8, r8, #1
 800d82c:	f88a 2000 	strb.w	r2, [sl]
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	3201      	adds	r2, #1
 800d834:	701a      	strb	r2, [r3, #0]
 800d836:	e7a0      	b.n	800d77a <_dtoa_r+0x622>
 800d838:	4b6f      	ldr	r3, [pc, #444]	@ (800d9f8 <_dtoa_r+0x8a0>)
 800d83a:	2200      	movs	r2, #0
 800d83c:	f7f2 fedc 	bl	80005f8 <__aeabi_dmul>
 800d840:	2200      	movs	r2, #0
 800d842:	2300      	movs	r3, #0
 800d844:	4604      	mov	r4, r0
 800d846:	460d      	mov	r5, r1
 800d848:	f7f3 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d09f      	beq.n	800d790 <_dtoa_r+0x638>
 800d850:	e7d1      	b.n	800d7f6 <_dtoa_r+0x69e>
 800d852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d854:	2a00      	cmp	r2, #0
 800d856:	f000 80ea 	beq.w	800da2e <_dtoa_r+0x8d6>
 800d85a:	9a07      	ldr	r2, [sp, #28]
 800d85c:	2a01      	cmp	r2, #1
 800d85e:	f300 80cd 	bgt.w	800d9fc <_dtoa_r+0x8a4>
 800d862:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d864:	2a00      	cmp	r2, #0
 800d866:	f000 80c1 	beq.w	800d9ec <_dtoa_r+0x894>
 800d86a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d86e:	9c08      	ldr	r4, [sp, #32]
 800d870:	9e00      	ldr	r6, [sp, #0]
 800d872:	9a00      	ldr	r2, [sp, #0]
 800d874:	441a      	add	r2, r3
 800d876:	9200      	str	r2, [sp, #0]
 800d878:	9a06      	ldr	r2, [sp, #24]
 800d87a:	2101      	movs	r1, #1
 800d87c:	441a      	add	r2, r3
 800d87e:	4648      	mov	r0, r9
 800d880:	9206      	str	r2, [sp, #24]
 800d882:	f000 ff0d 	bl	800e6a0 <__i2b>
 800d886:	4605      	mov	r5, r0
 800d888:	b166      	cbz	r6, 800d8a4 <_dtoa_r+0x74c>
 800d88a:	9b06      	ldr	r3, [sp, #24]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	dd09      	ble.n	800d8a4 <_dtoa_r+0x74c>
 800d890:	42b3      	cmp	r3, r6
 800d892:	9a00      	ldr	r2, [sp, #0]
 800d894:	bfa8      	it	ge
 800d896:	4633      	movge	r3, r6
 800d898:	1ad2      	subs	r2, r2, r3
 800d89a:	9200      	str	r2, [sp, #0]
 800d89c:	9a06      	ldr	r2, [sp, #24]
 800d89e:	1af6      	subs	r6, r6, r3
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	9306      	str	r3, [sp, #24]
 800d8a4:	9b08      	ldr	r3, [sp, #32]
 800d8a6:	b30b      	cbz	r3, 800d8ec <_dtoa_r+0x794>
 800d8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 80c6 	beq.w	800da3c <_dtoa_r+0x8e4>
 800d8b0:	2c00      	cmp	r4, #0
 800d8b2:	f000 80c0 	beq.w	800da36 <_dtoa_r+0x8de>
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	4622      	mov	r2, r4
 800d8ba:	4648      	mov	r0, r9
 800d8bc:	f000 ffa8 	bl	800e810 <__pow5mult>
 800d8c0:	9a02      	ldr	r2, [sp, #8]
 800d8c2:	4601      	mov	r1, r0
 800d8c4:	4605      	mov	r5, r0
 800d8c6:	4648      	mov	r0, r9
 800d8c8:	f000 ff00 	bl	800e6cc <__multiply>
 800d8cc:	9902      	ldr	r1, [sp, #8]
 800d8ce:	4680      	mov	r8, r0
 800d8d0:	4648      	mov	r0, r9
 800d8d2:	f000 fde7 	bl	800e4a4 <_Bfree>
 800d8d6:	9b08      	ldr	r3, [sp, #32]
 800d8d8:	1b1b      	subs	r3, r3, r4
 800d8da:	9308      	str	r3, [sp, #32]
 800d8dc:	f000 80b1 	beq.w	800da42 <_dtoa_r+0x8ea>
 800d8e0:	9a08      	ldr	r2, [sp, #32]
 800d8e2:	4641      	mov	r1, r8
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	f000 ff93 	bl	800e810 <__pow5mult>
 800d8ea:	9002      	str	r0, [sp, #8]
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	4648      	mov	r0, r9
 800d8f0:	f000 fed6 	bl	800e6a0 <__i2b>
 800d8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 81d8 	beq.w	800dcae <_dtoa_r+0xb56>
 800d8fe:	461a      	mov	r2, r3
 800d900:	4601      	mov	r1, r0
 800d902:	4648      	mov	r0, r9
 800d904:	f000 ff84 	bl	800e810 <__pow5mult>
 800d908:	9b07      	ldr	r3, [sp, #28]
 800d90a:	2b01      	cmp	r3, #1
 800d90c:	4604      	mov	r4, r0
 800d90e:	f300 809f 	bgt.w	800da50 <_dtoa_r+0x8f8>
 800d912:	9b04      	ldr	r3, [sp, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	f040 8097 	bne.w	800da48 <_dtoa_r+0x8f0>
 800d91a:	9b05      	ldr	r3, [sp, #20]
 800d91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d920:	2b00      	cmp	r3, #0
 800d922:	f040 8093 	bne.w	800da4c <_dtoa_r+0x8f4>
 800d926:	9b05      	ldr	r3, [sp, #20]
 800d928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d92c:	0d1b      	lsrs	r3, r3, #20
 800d92e:	051b      	lsls	r3, r3, #20
 800d930:	b133      	cbz	r3, 800d940 <_dtoa_r+0x7e8>
 800d932:	9b00      	ldr	r3, [sp, #0]
 800d934:	3301      	adds	r3, #1
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	9b06      	ldr	r3, [sp, #24]
 800d93a:	3301      	adds	r3, #1
 800d93c:	9306      	str	r3, [sp, #24]
 800d93e:	2301      	movs	r3, #1
 800d940:	9308      	str	r3, [sp, #32]
 800d942:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 81b8 	beq.w	800dcba <_dtoa_r+0xb62>
 800d94a:	6923      	ldr	r3, [r4, #16]
 800d94c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d950:	6918      	ldr	r0, [r3, #16]
 800d952:	f000 fe59 	bl	800e608 <__hi0bits>
 800d956:	f1c0 0020 	rsb	r0, r0, #32
 800d95a:	9b06      	ldr	r3, [sp, #24]
 800d95c:	4418      	add	r0, r3
 800d95e:	f010 001f 	ands.w	r0, r0, #31
 800d962:	f000 8082 	beq.w	800da6a <_dtoa_r+0x912>
 800d966:	f1c0 0320 	rsb	r3, r0, #32
 800d96a:	2b04      	cmp	r3, #4
 800d96c:	dd73      	ble.n	800da56 <_dtoa_r+0x8fe>
 800d96e:	9b00      	ldr	r3, [sp, #0]
 800d970:	f1c0 001c 	rsb	r0, r0, #28
 800d974:	4403      	add	r3, r0
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	9b06      	ldr	r3, [sp, #24]
 800d97a:	4403      	add	r3, r0
 800d97c:	4406      	add	r6, r0
 800d97e:	9306      	str	r3, [sp, #24]
 800d980:	9b00      	ldr	r3, [sp, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	dd05      	ble.n	800d992 <_dtoa_r+0x83a>
 800d986:	9902      	ldr	r1, [sp, #8]
 800d988:	461a      	mov	r2, r3
 800d98a:	4648      	mov	r0, r9
 800d98c:	f000 ff9a 	bl	800e8c4 <__lshift>
 800d990:	9002      	str	r0, [sp, #8]
 800d992:	9b06      	ldr	r3, [sp, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	dd05      	ble.n	800d9a4 <_dtoa_r+0x84c>
 800d998:	4621      	mov	r1, r4
 800d99a:	461a      	mov	r2, r3
 800d99c:	4648      	mov	r0, r9
 800d99e:	f000 ff91 	bl	800e8c4 <__lshift>
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d061      	beq.n	800da6e <_dtoa_r+0x916>
 800d9aa:	9802      	ldr	r0, [sp, #8]
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	f000 fff5 	bl	800e99c <__mcmp>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	da5b      	bge.n	800da6e <_dtoa_r+0x916>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	9902      	ldr	r1, [sp, #8]
 800d9ba:	220a      	movs	r2, #10
 800d9bc:	4648      	mov	r0, r9
 800d9be:	f000 fd93 	bl	800e4e8 <__multadd>
 800d9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9c4:	9002      	str	r0, [sp, #8]
 800d9c6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f000 8177 	beq.w	800dcbe <_dtoa_r+0xb66>
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	220a      	movs	r2, #10
 800d9d6:	4648      	mov	r0, r9
 800d9d8:	f000 fd86 	bl	800e4e8 <__multadd>
 800d9dc:	f1bb 0f00 	cmp.w	fp, #0
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	dc6f      	bgt.n	800dac4 <_dtoa_r+0x96c>
 800d9e4:	9b07      	ldr	r3, [sp, #28]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	dc49      	bgt.n	800da7e <_dtoa_r+0x926>
 800d9ea:	e06b      	b.n	800dac4 <_dtoa_r+0x96c>
 800d9ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d9ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d9f2:	e73c      	b.n	800d86e <_dtoa_r+0x716>
 800d9f4:	3fe00000 	.word	0x3fe00000
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	9b03      	ldr	r3, [sp, #12]
 800d9fe:	1e5c      	subs	r4, r3, #1
 800da00:	9b08      	ldr	r3, [sp, #32]
 800da02:	42a3      	cmp	r3, r4
 800da04:	db09      	blt.n	800da1a <_dtoa_r+0x8c2>
 800da06:	1b1c      	subs	r4, r3, r4
 800da08:	9b03      	ldr	r3, [sp, #12]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f6bf af30 	bge.w	800d870 <_dtoa_r+0x718>
 800da10:	9b00      	ldr	r3, [sp, #0]
 800da12:	9a03      	ldr	r2, [sp, #12]
 800da14:	1a9e      	subs	r6, r3, r2
 800da16:	2300      	movs	r3, #0
 800da18:	e72b      	b.n	800d872 <_dtoa_r+0x71a>
 800da1a:	9b08      	ldr	r3, [sp, #32]
 800da1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da1e:	9408      	str	r4, [sp, #32]
 800da20:	1ae3      	subs	r3, r4, r3
 800da22:	441a      	add	r2, r3
 800da24:	9e00      	ldr	r6, [sp, #0]
 800da26:	9b03      	ldr	r3, [sp, #12]
 800da28:	920d      	str	r2, [sp, #52]	@ 0x34
 800da2a:	2400      	movs	r4, #0
 800da2c:	e721      	b.n	800d872 <_dtoa_r+0x71a>
 800da2e:	9c08      	ldr	r4, [sp, #32]
 800da30:	9e00      	ldr	r6, [sp, #0]
 800da32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800da34:	e728      	b.n	800d888 <_dtoa_r+0x730>
 800da36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800da3a:	e751      	b.n	800d8e0 <_dtoa_r+0x788>
 800da3c:	9a08      	ldr	r2, [sp, #32]
 800da3e:	9902      	ldr	r1, [sp, #8]
 800da40:	e750      	b.n	800d8e4 <_dtoa_r+0x78c>
 800da42:	f8cd 8008 	str.w	r8, [sp, #8]
 800da46:	e751      	b.n	800d8ec <_dtoa_r+0x794>
 800da48:	2300      	movs	r3, #0
 800da4a:	e779      	b.n	800d940 <_dtoa_r+0x7e8>
 800da4c:	9b04      	ldr	r3, [sp, #16]
 800da4e:	e777      	b.n	800d940 <_dtoa_r+0x7e8>
 800da50:	2300      	movs	r3, #0
 800da52:	9308      	str	r3, [sp, #32]
 800da54:	e779      	b.n	800d94a <_dtoa_r+0x7f2>
 800da56:	d093      	beq.n	800d980 <_dtoa_r+0x828>
 800da58:	9a00      	ldr	r2, [sp, #0]
 800da5a:	331c      	adds	r3, #28
 800da5c:	441a      	add	r2, r3
 800da5e:	9200      	str	r2, [sp, #0]
 800da60:	9a06      	ldr	r2, [sp, #24]
 800da62:	441a      	add	r2, r3
 800da64:	441e      	add	r6, r3
 800da66:	9206      	str	r2, [sp, #24]
 800da68:	e78a      	b.n	800d980 <_dtoa_r+0x828>
 800da6a:	4603      	mov	r3, r0
 800da6c:	e7f4      	b.n	800da58 <_dtoa_r+0x900>
 800da6e:	9b03      	ldr	r3, [sp, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	46b8      	mov	r8, r7
 800da74:	dc20      	bgt.n	800dab8 <_dtoa_r+0x960>
 800da76:	469b      	mov	fp, r3
 800da78:	9b07      	ldr	r3, [sp, #28]
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	dd1e      	ble.n	800dabc <_dtoa_r+0x964>
 800da7e:	f1bb 0f00 	cmp.w	fp, #0
 800da82:	f47f adb1 	bne.w	800d5e8 <_dtoa_r+0x490>
 800da86:	4621      	mov	r1, r4
 800da88:	465b      	mov	r3, fp
 800da8a:	2205      	movs	r2, #5
 800da8c:	4648      	mov	r0, r9
 800da8e:	f000 fd2b 	bl	800e4e8 <__multadd>
 800da92:	4601      	mov	r1, r0
 800da94:	4604      	mov	r4, r0
 800da96:	9802      	ldr	r0, [sp, #8]
 800da98:	f000 ff80 	bl	800e99c <__mcmp>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	f77f ada3 	ble.w	800d5e8 <_dtoa_r+0x490>
 800daa2:	4656      	mov	r6, sl
 800daa4:	2331      	movs	r3, #49	@ 0x31
 800daa6:	f806 3b01 	strb.w	r3, [r6], #1
 800daaa:	f108 0801 	add.w	r8, r8, #1
 800daae:	e59f      	b.n	800d5f0 <_dtoa_r+0x498>
 800dab0:	9c03      	ldr	r4, [sp, #12]
 800dab2:	46b8      	mov	r8, r7
 800dab4:	4625      	mov	r5, r4
 800dab6:	e7f4      	b.n	800daa2 <_dtoa_r+0x94a>
 800dab8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f000 8101 	beq.w	800dcc6 <_dtoa_r+0xb6e>
 800dac4:	2e00      	cmp	r6, #0
 800dac6:	dd05      	ble.n	800dad4 <_dtoa_r+0x97c>
 800dac8:	4629      	mov	r1, r5
 800daca:	4632      	mov	r2, r6
 800dacc:	4648      	mov	r0, r9
 800dace:	f000 fef9 	bl	800e8c4 <__lshift>
 800dad2:	4605      	mov	r5, r0
 800dad4:	9b08      	ldr	r3, [sp, #32]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d05c      	beq.n	800db94 <_dtoa_r+0xa3c>
 800dada:	6869      	ldr	r1, [r5, #4]
 800dadc:	4648      	mov	r0, r9
 800dade:	f000 fca1 	bl	800e424 <_Balloc>
 800dae2:	4606      	mov	r6, r0
 800dae4:	b928      	cbnz	r0, 800daf2 <_dtoa_r+0x99a>
 800dae6:	4b82      	ldr	r3, [pc, #520]	@ (800dcf0 <_dtoa_r+0xb98>)
 800dae8:	4602      	mov	r2, r0
 800daea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800daee:	f7ff bb4a 	b.w	800d186 <_dtoa_r+0x2e>
 800daf2:	692a      	ldr	r2, [r5, #16]
 800daf4:	3202      	adds	r2, #2
 800daf6:	0092      	lsls	r2, r2, #2
 800daf8:	f105 010c 	add.w	r1, r5, #12
 800dafc:	300c      	adds	r0, #12
 800dafe:	f7ff fa8a 	bl	800d016 <memcpy>
 800db02:	2201      	movs	r2, #1
 800db04:	4631      	mov	r1, r6
 800db06:	4648      	mov	r0, r9
 800db08:	f000 fedc 	bl	800e8c4 <__lshift>
 800db0c:	f10a 0301 	add.w	r3, sl, #1
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	eb0a 030b 	add.w	r3, sl, fp
 800db16:	9308      	str	r3, [sp, #32]
 800db18:	9b04      	ldr	r3, [sp, #16]
 800db1a:	f003 0301 	and.w	r3, r3, #1
 800db1e:	462f      	mov	r7, r5
 800db20:	9306      	str	r3, [sp, #24]
 800db22:	4605      	mov	r5, r0
 800db24:	9b00      	ldr	r3, [sp, #0]
 800db26:	9802      	ldr	r0, [sp, #8]
 800db28:	4621      	mov	r1, r4
 800db2a:	f103 3bff 	add.w	fp, r3, #4294967295
 800db2e:	f7ff fa8b 	bl	800d048 <quorem>
 800db32:	4603      	mov	r3, r0
 800db34:	3330      	adds	r3, #48	@ 0x30
 800db36:	9003      	str	r0, [sp, #12]
 800db38:	4639      	mov	r1, r7
 800db3a:	9802      	ldr	r0, [sp, #8]
 800db3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db3e:	f000 ff2d 	bl	800e99c <__mcmp>
 800db42:	462a      	mov	r2, r5
 800db44:	9004      	str	r0, [sp, #16]
 800db46:	4621      	mov	r1, r4
 800db48:	4648      	mov	r0, r9
 800db4a:	f000 ff43 	bl	800e9d4 <__mdiff>
 800db4e:	68c2      	ldr	r2, [r0, #12]
 800db50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db52:	4606      	mov	r6, r0
 800db54:	bb02      	cbnz	r2, 800db98 <_dtoa_r+0xa40>
 800db56:	4601      	mov	r1, r0
 800db58:	9802      	ldr	r0, [sp, #8]
 800db5a:	f000 ff1f 	bl	800e99c <__mcmp>
 800db5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db60:	4602      	mov	r2, r0
 800db62:	4631      	mov	r1, r6
 800db64:	4648      	mov	r0, r9
 800db66:	920c      	str	r2, [sp, #48]	@ 0x30
 800db68:	9309      	str	r3, [sp, #36]	@ 0x24
 800db6a:	f000 fc9b 	bl	800e4a4 <_Bfree>
 800db6e:	9b07      	ldr	r3, [sp, #28]
 800db70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800db72:	9e00      	ldr	r6, [sp, #0]
 800db74:	ea42 0103 	orr.w	r1, r2, r3
 800db78:	9b06      	ldr	r3, [sp, #24]
 800db7a:	4319      	orrs	r1, r3
 800db7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db7e:	d10d      	bne.n	800db9c <_dtoa_r+0xa44>
 800db80:	2b39      	cmp	r3, #57	@ 0x39
 800db82:	d027      	beq.n	800dbd4 <_dtoa_r+0xa7c>
 800db84:	9a04      	ldr	r2, [sp, #16]
 800db86:	2a00      	cmp	r2, #0
 800db88:	dd01      	ble.n	800db8e <_dtoa_r+0xa36>
 800db8a:	9b03      	ldr	r3, [sp, #12]
 800db8c:	3331      	adds	r3, #49	@ 0x31
 800db8e:	f88b 3000 	strb.w	r3, [fp]
 800db92:	e52e      	b.n	800d5f2 <_dtoa_r+0x49a>
 800db94:	4628      	mov	r0, r5
 800db96:	e7b9      	b.n	800db0c <_dtoa_r+0x9b4>
 800db98:	2201      	movs	r2, #1
 800db9a:	e7e2      	b.n	800db62 <_dtoa_r+0xa0a>
 800db9c:	9904      	ldr	r1, [sp, #16]
 800db9e:	2900      	cmp	r1, #0
 800dba0:	db04      	blt.n	800dbac <_dtoa_r+0xa54>
 800dba2:	9807      	ldr	r0, [sp, #28]
 800dba4:	4301      	orrs	r1, r0
 800dba6:	9806      	ldr	r0, [sp, #24]
 800dba8:	4301      	orrs	r1, r0
 800dbaa:	d120      	bne.n	800dbee <_dtoa_r+0xa96>
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	ddee      	ble.n	800db8e <_dtoa_r+0xa36>
 800dbb0:	9902      	ldr	r1, [sp, #8]
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	4648      	mov	r0, r9
 800dbb8:	f000 fe84 	bl	800e8c4 <__lshift>
 800dbbc:	4621      	mov	r1, r4
 800dbbe:	9002      	str	r0, [sp, #8]
 800dbc0:	f000 feec 	bl	800e99c <__mcmp>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	9b00      	ldr	r3, [sp, #0]
 800dbc8:	dc02      	bgt.n	800dbd0 <_dtoa_r+0xa78>
 800dbca:	d1e0      	bne.n	800db8e <_dtoa_r+0xa36>
 800dbcc:	07da      	lsls	r2, r3, #31
 800dbce:	d5de      	bpl.n	800db8e <_dtoa_r+0xa36>
 800dbd0:	2b39      	cmp	r3, #57	@ 0x39
 800dbd2:	d1da      	bne.n	800db8a <_dtoa_r+0xa32>
 800dbd4:	2339      	movs	r3, #57	@ 0x39
 800dbd6:	f88b 3000 	strb.w	r3, [fp]
 800dbda:	4633      	mov	r3, r6
 800dbdc:	461e      	mov	r6, r3
 800dbde:	3b01      	subs	r3, #1
 800dbe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dbe4:	2a39      	cmp	r2, #57	@ 0x39
 800dbe6:	d04e      	beq.n	800dc86 <_dtoa_r+0xb2e>
 800dbe8:	3201      	adds	r2, #1
 800dbea:	701a      	strb	r2, [r3, #0]
 800dbec:	e501      	b.n	800d5f2 <_dtoa_r+0x49a>
 800dbee:	2a00      	cmp	r2, #0
 800dbf0:	dd03      	ble.n	800dbfa <_dtoa_r+0xaa2>
 800dbf2:	2b39      	cmp	r3, #57	@ 0x39
 800dbf4:	d0ee      	beq.n	800dbd4 <_dtoa_r+0xa7c>
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	e7c9      	b.n	800db8e <_dtoa_r+0xa36>
 800dbfa:	9a00      	ldr	r2, [sp, #0]
 800dbfc:	9908      	ldr	r1, [sp, #32]
 800dbfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dc02:	428a      	cmp	r2, r1
 800dc04:	d028      	beq.n	800dc58 <_dtoa_r+0xb00>
 800dc06:	9902      	ldr	r1, [sp, #8]
 800dc08:	2300      	movs	r3, #0
 800dc0a:	220a      	movs	r2, #10
 800dc0c:	4648      	mov	r0, r9
 800dc0e:	f000 fc6b 	bl	800e4e8 <__multadd>
 800dc12:	42af      	cmp	r7, r5
 800dc14:	9002      	str	r0, [sp, #8]
 800dc16:	f04f 0300 	mov.w	r3, #0
 800dc1a:	f04f 020a 	mov.w	r2, #10
 800dc1e:	4639      	mov	r1, r7
 800dc20:	4648      	mov	r0, r9
 800dc22:	d107      	bne.n	800dc34 <_dtoa_r+0xadc>
 800dc24:	f000 fc60 	bl	800e4e8 <__multadd>
 800dc28:	4607      	mov	r7, r0
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	9b00      	ldr	r3, [sp, #0]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	9300      	str	r3, [sp, #0]
 800dc32:	e777      	b.n	800db24 <_dtoa_r+0x9cc>
 800dc34:	f000 fc58 	bl	800e4e8 <__multadd>
 800dc38:	4629      	mov	r1, r5
 800dc3a:	4607      	mov	r7, r0
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	220a      	movs	r2, #10
 800dc40:	4648      	mov	r0, r9
 800dc42:	f000 fc51 	bl	800e4e8 <__multadd>
 800dc46:	4605      	mov	r5, r0
 800dc48:	e7f0      	b.n	800dc2c <_dtoa_r+0xad4>
 800dc4a:	f1bb 0f00 	cmp.w	fp, #0
 800dc4e:	bfcc      	ite	gt
 800dc50:	465e      	movgt	r6, fp
 800dc52:	2601      	movle	r6, #1
 800dc54:	4456      	add	r6, sl
 800dc56:	2700      	movs	r7, #0
 800dc58:	9902      	ldr	r1, [sp, #8]
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	4648      	mov	r0, r9
 800dc60:	f000 fe30 	bl	800e8c4 <__lshift>
 800dc64:	4621      	mov	r1, r4
 800dc66:	9002      	str	r0, [sp, #8]
 800dc68:	f000 fe98 	bl	800e99c <__mcmp>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	dcb4      	bgt.n	800dbda <_dtoa_r+0xa82>
 800dc70:	d102      	bne.n	800dc78 <_dtoa_r+0xb20>
 800dc72:	9b00      	ldr	r3, [sp, #0]
 800dc74:	07db      	lsls	r3, r3, #31
 800dc76:	d4b0      	bmi.n	800dbda <_dtoa_r+0xa82>
 800dc78:	4633      	mov	r3, r6
 800dc7a:	461e      	mov	r6, r3
 800dc7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc80:	2a30      	cmp	r2, #48	@ 0x30
 800dc82:	d0fa      	beq.n	800dc7a <_dtoa_r+0xb22>
 800dc84:	e4b5      	b.n	800d5f2 <_dtoa_r+0x49a>
 800dc86:	459a      	cmp	sl, r3
 800dc88:	d1a8      	bne.n	800dbdc <_dtoa_r+0xa84>
 800dc8a:	2331      	movs	r3, #49	@ 0x31
 800dc8c:	f108 0801 	add.w	r8, r8, #1
 800dc90:	f88a 3000 	strb.w	r3, [sl]
 800dc94:	e4ad      	b.n	800d5f2 <_dtoa_r+0x49a>
 800dc96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc98:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dcf4 <_dtoa_r+0xb9c>
 800dc9c:	b11b      	cbz	r3, 800dca6 <_dtoa_r+0xb4e>
 800dc9e:	f10a 0308 	add.w	r3, sl, #8
 800dca2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	4650      	mov	r0, sl
 800dca8:	b017      	add	sp, #92	@ 0x5c
 800dcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcae:	9b07      	ldr	r3, [sp, #28]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	f77f ae2e 	ble.w	800d912 <_dtoa_r+0x7ba>
 800dcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcb8:	9308      	str	r3, [sp, #32]
 800dcba:	2001      	movs	r0, #1
 800dcbc:	e64d      	b.n	800d95a <_dtoa_r+0x802>
 800dcbe:	f1bb 0f00 	cmp.w	fp, #0
 800dcc2:	f77f aed9 	ble.w	800da78 <_dtoa_r+0x920>
 800dcc6:	4656      	mov	r6, sl
 800dcc8:	9802      	ldr	r0, [sp, #8]
 800dcca:	4621      	mov	r1, r4
 800dccc:	f7ff f9bc 	bl	800d048 <quorem>
 800dcd0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dcd4:	f806 3b01 	strb.w	r3, [r6], #1
 800dcd8:	eba6 020a 	sub.w	r2, r6, sl
 800dcdc:	4593      	cmp	fp, r2
 800dcde:	ddb4      	ble.n	800dc4a <_dtoa_r+0xaf2>
 800dce0:	9902      	ldr	r1, [sp, #8]
 800dce2:	2300      	movs	r3, #0
 800dce4:	220a      	movs	r2, #10
 800dce6:	4648      	mov	r0, r9
 800dce8:	f000 fbfe 	bl	800e4e8 <__multadd>
 800dcec:	9002      	str	r0, [sp, #8]
 800dcee:	e7eb      	b.n	800dcc8 <_dtoa_r+0xb70>
 800dcf0:	0800fb8a 	.word	0x0800fb8a
 800dcf4:	0800fb0e 	.word	0x0800fb0e

0800dcf8 <_free_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	d041      	beq.n	800dd84 <_free_r+0x8c>
 800dd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd04:	1f0c      	subs	r4, r1, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfb8      	it	lt
 800dd0a:	18e4      	addlt	r4, r4, r3
 800dd0c:	f7fd fc72 	bl	800b5f4 <__malloc_lock>
 800dd10:	4a1d      	ldr	r2, [pc, #116]	@ (800dd88 <_free_r+0x90>)
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	b933      	cbnz	r3, 800dd24 <_free_r+0x2c>
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	6014      	str	r4, [r2, #0]
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd20:	f7fd bc6e 	b.w	800b600 <__malloc_unlock>
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d908      	bls.n	800dd3a <_free_r+0x42>
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	1821      	adds	r1, r4, r0
 800dd2c:	428b      	cmp	r3, r1
 800dd2e:	bf01      	itttt	eq
 800dd30:	6819      	ldreq	r1, [r3, #0]
 800dd32:	685b      	ldreq	r3, [r3, #4]
 800dd34:	1809      	addeq	r1, r1, r0
 800dd36:	6021      	streq	r1, [r4, #0]
 800dd38:	e7ed      	b.n	800dd16 <_free_r+0x1e>
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	b10b      	cbz	r3, 800dd44 <_free_r+0x4c>
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	d9fa      	bls.n	800dd3a <_free_r+0x42>
 800dd44:	6811      	ldr	r1, [r2, #0]
 800dd46:	1850      	adds	r0, r2, r1
 800dd48:	42a0      	cmp	r0, r4
 800dd4a:	d10b      	bne.n	800dd64 <_free_r+0x6c>
 800dd4c:	6820      	ldr	r0, [r4, #0]
 800dd4e:	4401      	add	r1, r0
 800dd50:	1850      	adds	r0, r2, r1
 800dd52:	4283      	cmp	r3, r0
 800dd54:	6011      	str	r1, [r2, #0]
 800dd56:	d1e0      	bne.n	800dd1a <_free_r+0x22>
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	6053      	str	r3, [r2, #4]
 800dd5e:	4408      	add	r0, r1
 800dd60:	6010      	str	r0, [r2, #0]
 800dd62:	e7da      	b.n	800dd1a <_free_r+0x22>
 800dd64:	d902      	bls.n	800dd6c <_free_r+0x74>
 800dd66:	230c      	movs	r3, #12
 800dd68:	602b      	str	r3, [r5, #0]
 800dd6a:	e7d6      	b.n	800dd1a <_free_r+0x22>
 800dd6c:	6820      	ldr	r0, [r4, #0]
 800dd6e:	1821      	adds	r1, r4, r0
 800dd70:	428b      	cmp	r3, r1
 800dd72:	bf04      	itt	eq
 800dd74:	6819      	ldreq	r1, [r3, #0]
 800dd76:	685b      	ldreq	r3, [r3, #4]
 800dd78:	6063      	str	r3, [r4, #4]
 800dd7a:	bf04      	itt	eq
 800dd7c:	1809      	addeq	r1, r1, r0
 800dd7e:	6021      	streq	r1, [r4, #0]
 800dd80:	6054      	str	r4, [r2, #4]
 800dd82:	e7ca      	b.n	800dd1a <_free_r+0x22>
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop
 800dd88:	200051b4 	.word	0x200051b4

0800dd8c <rshift>:
 800dd8c:	6903      	ldr	r3, [r0, #16]
 800dd8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd9a:	f100 0414 	add.w	r4, r0, #20
 800dd9e:	dd45      	ble.n	800de2c <rshift+0xa0>
 800dda0:	f011 011f 	ands.w	r1, r1, #31
 800dda4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dda8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ddac:	d10c      	bne.n	800ddc8 <rshift+0x3c>
 800ddae:	f100 0710 	add.w	r7, r0, #16
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	42b1      	cmp	r1, r6
 800ddb6:	d334      	bcc.n	800de22 <rshift+0x96>
 800ddb8:	1a9b      	subs	r3, r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	1eea      	subs	r2, r5, #3
 800ddbe:	4296      	cmp	r6, r2
 800ddc0:	bf38      	it	cc
 800ddc2:	2300      	movcc	r3, #0
 800ddc4:	4423      	add	r3, r4
 800ddc6:	e015      	b.n	800ddf4 <rshift+0x68>
 800ddc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ddcc:	f1c1 0820 	rsb	r8, r1, #32
 800ddd0:	40cf      	lsrs	r7, r1
 800ddd2:	f105 0e04 	add.w	lr, r5, #4
 800ddd6:	46a1      	mov	r9, r4
 800ddd8:	4576      	cmp	r6, lr
 800ddda:	46f4      	mov	ip, lr
 800dddc:	d815      	bhi.n	800de0a <rshift+0x7e>
 800ddde:	1a9a      	subs	r2, r3, r2
 800dde0:	0092      	lsls	r2, r2, #2
 800dde2:	3a04      	subs	r2, #4
 800dde4:	3501      	adds	r5, #1
 800dde6:	42ae      	cmp	r6, r5
 800dde8:	bf38      	it	cc
 800ddea:	2200      	movcc	r2, #0
 800ddec:	18a3      	adds	r3, r4, r2
 800ddee:	50a7      	str	r7, [r4, r2]
 800ddf0:	b107      	cbz	r7, 800ddf4 <rshift+0x68>
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	1b1a      	subs	r2, r3, r4
 800ddf6:	42a3      	cmp	r3, r4
 800ddf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddfc:	bf08      	it	eq
 800ddfe:	2300      	moveq	r3, #0
 800de00:	6102      	str	r2, [r0, #16]
 800de02:	bf08      	it	eq
 800de04:	6143      	streq	r3, [r0, #20]
 800de06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de0a:	f8dc c000 	ldr.w	ip, [ip]
 800de0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800de12:	ea4c 0707 	orr.w	r7, ip, r7
 800de16:	f849 7b04 	str.w	r7, [r9], #4
 800de1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de1e:	40cf      	lsrs	r7, r1
 800de20:	e7da      	b.n	800ddd8 <rshift+0x4c>
 800de22:	f851 cb04 	ldr.w	ip, [r1], #4
 800de26:	f847 cf04 	str.w	ip, [r7, #4]!
 800de2a:	e7c3      	b.n	800ddb4 <rshift+0x28>
 800de2c:	4623      	mov	r3, r4
 800de2e:	e7e1      	b.n	800ddf4 <rshift+0x68>

0800de30 <__hexdig_fun>:
 800de30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de34:	2b09      	cmp	r3, #9
 800de36:	d802      	bhi.n	800de3e <__hexdig_fun+0xe>
 800de38:	3820      	subs	r0, #32
 800de3a:	b2c0      	uxtb	r0, r0
 800de3c:	4770      	bx	lr
 800de3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de42:	2b05      	cmp	r3, #5
 800de44:	d801      	bhi.n	800de4a <__hexdig_fun+0x1a>
 800de46:	3847      	subs	r0, #71	@ 0x47
 800de48:	e7f7      	b.n	800de3a <__hexdig_fun+0xa>
 800de4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de4e:	2b05      	cmp	r3, #5
 800de50:	d801      	bhi.n	800de56 <__hexdig_fun+0x26>
 800de52:	3827      	subs	r0, #39	@ 0x27
 800de54:	e7f1      	b.n	800de3a <__hexdig_fun+0xa>
 800de56:	2000      	movs	r0, #0
 800de58:	4770      	bx	lr
	...

0800de5c <__gethex>:
 800de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de60:	b085      	sub	sp, #20
 800de62:	468a      	mov	sl, r1
 800de64:	9302      	str	r3, [sp, #8]
 800de66:	680b      	ldr	r3, [r1, #0]
 800de68:	9001      	str	r0, [sp, #4]
 800de6a:	4690      	mov	r8, r2
 800de6c:	1c9c      	adds	r4, r3, #2
 800de6e:	46a1      	mov	r9, r4
 800de70:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de74:	2830      	cmp	r0, #48	@ 0x30
 800de76:	d0fa      	beq.n	800de6e <__gethex+0x12>
 800de78:	eba9 0303 	sub.w	r3, r9, r3
 800de7c:	f1a3 0b02 	sub.w	fp, r3, #2
 800de80:	f7ff ffd6 	bl	800de30 <__hexdig_fun>
 800de84:	4605      	mov	r5, r0
 800de86:	2800      	cmp	r0, #0
 800de88:	d168      	bne.n	800df5c <__gethex+0x100>
 800de8a:	49a0      	ldr	r1, [pc, #640]	@ (800e10c <__gethex+0x2b0>)
 800de8c:	2201      	movs	r2, #1
 800de8e:	4648      	mov	r0, r9
 800de90:	f7fe ff85 	bl	800cd9e <strncmp>
 800de94:	4607      	mov	r7, r0
 800de96:	2800      	cmp	r0, #0
 800de98:	d167      	bne.n	800df6a <__gethex+0x10e>
 800de9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de9e:	4626      	mov	r6, r4
 800dea0:	f7ff ffc6 	bl	800de30 <__hexdig_fun>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d062      	beq.n	800df6e <__gethex+0x112>
 800dea8:	4623      	mov	r3, r4
 800deaa:	7818      	ldrb	r0, [r3, #0]
 800deac:	2830      	cmp	r0, #48	@ 0x30
 800deae:	4699      	mov	r9, r3
 800deb0:	f103 0301 	add.w	r3, r3, #1
 800deb4:	d0f9      	beq.n	800deaa <__gethex+0x4e>
 800deb6:	f7ff ffbb 	bl	800de30 <__hexdig_fun>
 800deba:	fab0 f580 	clz	r5, r0
 800debe:	096d      	lsrs	r5, r5, #5
 800dec0:	f04f 0b01 	mov.w	fp, #1
 800dec4:	464a      	mov	r2, r9
 800dec6:	4616      	mov	r6, r2
 800dec8:	3201      	adds	r2, #1
 800deca:	7830      	ldrb	r0, [r6, #0]
 800decc:	f7ff ffb0 	bl	800de30 <__hexdig_fun>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d1f8      	bne.n	800dec6 <__gethex+0x6a>
 800ded4:	498d      	ldr	r1, [pc, #564]	@ (800e10c <__gethex+0x2b0>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	4630      	mov	r0, r6
 800deda:	f7fe ff60 	bl	800cd9e <strncmp>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d13f      	bne.n	800df62 <__gethex+0x106>
 800dee2:	b944      	cbnz	r4, 800def6 <__gethex+0x9a>
 800dee4:	1c74      	adds	r4, r6, #1
 800dee6:	4622      	mov	r2, r4
 800dee8:	4616      	mov	r6, r2
 800deea:	3201      	adds	r2, #1
 800deec:	7830      	ldrb	r0, [r6, #0]
 800deee:	f7ff ff9f 	bl	800de30 <__hexdig_fun>
 800def2:	2800      	cmp	r0, #0
 800def4:	d1f8      	bne.n	800dee8 <__gethex+0x8c>
 800def6:	1ba4      	subs	r4, r4, r6
 800def8:	00a7      	lsls	r7, r4, #2
 800defa:	7833      	ldrb	r3, [r6, #0]
 800defc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800df00:	2b50      	cmp	r3, #80	@ 0x50
 800df02:	d13e      	bne.n	800df82 <__gethex+0x126>
 800df04:	7873      	ldrb	r3, [r6, #1]
 800df06:	2b2b      	cmp	r3, #43	@ 0x2b
 800df08:	d033      	beq.n	800df72 <__gethex+0x116>
 800df0a:	2b2d      	cmp	r3, #45	@ 0x2d
 800df0c:	d034      	beq.n	800df78 <__gethex+0x11c>
 800df0e:	1c71      	adds	r1, r6, #1
 800df10:	2400      	movs	r4, #0
 800df12:	7808      	ldrb	r0, [r1, #0]
 800df14:	f7ff ff8c 	bl	800de30 <__hexdig_fun>
 800df18:	1e43      	subs	r3, r0, #1
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b18      	cmp	r3, #24
 800df1e:	d830      	bhi.n	800df82 <__gethex+0x126>
 800df20:	f1a0 0210 	sub.w	r2, r0, #16
 800df24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df28:	f7ff ff82 	bl	800de30 <__hexdig_fun>
 800df2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800df30:	fa5f fc8c 	uxtb.w	ip, ip
 800df34:	f1bc 0f18 	cmp.w	ip, #24
 800df38:	f04f 030a 	mov.w	r3, #10
 800df3c:	d91e      	bls.n	800df7c <__gethex+0x120>
 800df3e:	b104      	cbz	r4, 800df42 <__gethex+0xe6>
 800df40:	4252      	negs	r2, r2
 800df42:	4417      	add	r7, r2
 800df44:	f8ca 1000 	str.w	r1, [sl]
 800df48:	b1ed      	cbz	r5, 800df86 <__gethex+0x12a>
 800df4a:	f1bb 0f00 	cmp.w	fp, #0
 800df4e:	bf0c      	ite	eq
 800df50:	2506      	moveq	r5, #6
 800df52:	2500      	movne	r5, #0
 800df54:	4628      	mov	r0, r5
 800df56:	b005      	add	sp, #20
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5c:	2500      	movs	r5, #0
 800df5e:	462c      	mov	r4, r5
 800df60:	e7b0      	b.n	800dec4 <__gethex+0x68>
 800df62:	2c00      	cmp	r4, #0
 800df64:	d1c7      	bne.n	800def6 <__gethex+0x9a>
 800df66:	4627      	mov	r7, r4
 800df68:	e7c7      	b.n	800defa <__gethex+0x9e>
 800df6a:	464e      	mov	r6, r9
 800df6c:	462f      	mov	r7, r5
 800df6e:	2501      	movs	r5, #1
 800df70:	e7c3      	b.n	800defa <__gethex+0x9e>
 800df72:	2400      	movs	r4, #0
 800df74:	1cb1      	adds	r1, r6, #2
 800df76:	e7cc      	b.n	800df12 <__gethex+0xb6>
 800df78:	2401      	movs	r4, #1
 800df7a:	e7fb      	b.n	800df74 <__gethex+0x118>
 800df7c:	fb03 0002 	mla	r0, r3, r2, r0
 800df80:	e7ce      	b.n	800df20 <__gethex+0xc4>
 800df82:	4631      	mov	r1, r6
 800df84:	e7de      	b.n	800df44 <__gethex+0xe8>
 800df86:	eba6 0309 	sub.w	r3, r6, r9
 800df8a:	3b01      	subs	r3, #1
 800df8c:	4629      	mov	r1, r5
 800df8e:	2b07      	cmp	r3, #7
 800df90:	dc0a      	bgt.n	800dfa8 <__gethex+0x14c>
 800df92:	9801      	ldr	r0, [sp, #4]
 800df94:	f000 fa46 	bl	800e424 <_Balloc>
 800df98:	4604      	mov	r4, r0
 800df9a:	b940      	cbnz	r0, 800dfae <__gethex+0x152>
 800df9c:	4b5c      	ldr	r3, [pc, #368]	@ (800e110 <__gethex+0x2b4>)
 800df9e:	4602      	mov	r2, r0
 800dfa0:	21e4      	movs	r1, #228	@ 0xe4
 800dfa2:	485c      	ldr	r0, [pc, #368]	@ (800e114 <__gethex+0x2b8>)
 800dfa4:	f001 f912 	bl	800f1cc <__assert_func>
 800dfa8:	3101      	adds	r1, #1
 800dfaa:	105b      	asrs	r3, r3, #1
 800dfac:	e7ef      	b.n	800df8e <__gethex+0x132>
 800dfae:	f100 0a14 	add.w	sl, r0, #20
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	4655      	mov	r5, sl
 800dfb6:	469b      	mov	fp, r3
 800dfb8:	45b1      	cmp	r9, r6
 800dfba:	d337      	bcc.n	800e02c <__gethex+0x1d0>
 800dfbc:	f845 bb04 	str.w	fp, [r5], #4
 800dfc0:	eba5 050a 	sub.w	r5, r5, sl
 800dfc4:	10ad      	asrs	r5, r5, #2
 800dfc6:	6125      	str	r5, [r4, #16]
 800dfc8:	4658      	mov	r0, fp
 800dfca:	f000 fb1d 	bl	800e608 <__hi0bits>
 800dfce:	016d      	lsls	r5, r5, #5
 800dfd0:	f8d8 6000 	ldr.w	r6, [r8]
 800dfd4:	1a2d      	subs	r5, r5, r0
 800dfd6:	42b5      	cmp	r5, r6
 800dfd8:	dd54      	ble.n	800e084 <__gethex+0x228>
 800dfda:	1bad      	subs	r5, r5, r6
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 fea9 	bl	800ed36 <__any_on>
 800dfe4:	4681      	mov	r9, r0
 800dfe6:	b178      	cbz	r0, 800e008 <__gethex+0x1ac>
 800dfe8:	1e6b      	subs	r3, r5, #1
 800dfea:	1159      	asrs	r1, r3, #5
 800dfec:	f003 021f 	and.w	r2, r3, #31
 800dff0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dff4:	f04f 0901 	mov.w	r9, #1
 800dff8:	fa09 f202 	lsl.w	r2, r9, r2
 800dffc:	420a      	tst	r2, r1
 800dffe:	d003      	beq.n	800e008 <__gethex+0x1ac>
 800e000:	454b      	cmp	r3, r9
 800e002:	dc36      	bgt.n	800e072 <__gethex+0x216>
 800e004:	f04f 0902 	mov.w	r9, #2
 800e008:	4629      	mov	r1, r5
 800e00a:	4620      	mov	r0, r4
 800e00c:	f7ff febe 	bl	800dd8c <rshift>
 800e010:	442f      	add	r7, r5
 800e012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e016:	42bb      	cmp	r3, r7
 800e018:	da42      	bge.n	800e0a0 <__gethex+0x244>
 800e01a:	9801      	ldr	r0, [sp, #4]
 800e01c:	4621      	mov	r1, r4
 800e01e:	f000 fa41 	bl	800e4a4 <_Bfree>
 800e022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e024:	2300      	movs	r3, #0
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	25a3      	movs	r5, #163	@ 0xa3
 800e02a:	e793      	b.n	800df54 <__gethex+0xf8>
 800e02c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e030:	2a2e      	cmp	r2, #46	@ 0x2e
 800e032:	d012      	beq.n	800e05a <__gethex+0x1fe>
 800e034:	2b20      	cmp	r3, #32
 800e036:	d104      	bne.n	800e042 <__gethex+0x1e6>
 800e038:	f845 bb04 	str.w	fp, [r5], #4
 800e03c:	f04f 0b00 	mov.w	fp, #0
 800e040:	465b      	mov	r3, fp
 800e042:	7830      	ldrb	r0, [r6, #0]
 800e044:	9303      	str	r3, [sp, #12]
 800e046:	f7ff fef3 	bl	800de30 <__hexdig_fun>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	f000 000f 	and.w	r0, r0, #15
 800e050:	4098      	lsls	r0, r3
 800e052:	ea4b 0b00 	orr.w	fp, fp, r0
 800e056:	3304      	adds	r3, #4
 800e058:	e7ae      	b.n	800dfb8 <__gethex+0x15c>
 800e05a:	45b1      	cmp	r9, r6
 800e05c:	d8ea      	bhi.n	800e034 <__gethex+0x1d8>
 800e05e:	492b      	ldr	r1, [pc, #172]	@ (800e10c <__gethex+0x2b0>)
 800e060:	9303      	str	r3, [sp, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	4630      	mov	r0, r6
 800e066:	f7fe fe9a 	bl	800cd9e <strncmp>
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d1e1      	bne.n	800e034 <__gethex+0x1d8>
 800e070:	e7a2      	b.n	800dfb8 <__gethex+0x15c>
 800e072:	1ea9      	subs	r1, r5, #2
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fe5e 	bl	800ed36 <__any_on>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d0c2      	beq.n	800e004 <__gethex+0x1a8>
 800e07e:	f04f 0903 	mov.w	r9, #3
 800e082:	e7c1      	b.n	800e008 <__gethex+0x1ac>
 800e084:	da09      	bge.n	800e09a <__gethex+0x23e>
 800e086:	1b75      	subs	r5, r6, r5
 800e088:	4621      	mov	r1, r4
 800e08a:	9801      	ldr	r0, [sp, #4]
 800e08c:	462a      	mov	r2, r5
 800e08e:	f000 fc19 	bl	800e8c4 <__lshift>
 800e092:	1b7f      	subs	r7, r7, r5
 800e094:	4604      	mov	r4, r0
 800e096:	f100 0a14 	add.w	sl, r0, #20
 800e09a:	f04f 0900 	mov.w	r9, #0
 800e09e:	e7b8      	b.n	800e012 <__gethex+0x1b6>
 800e0a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0a4:	42bd      	cmp	r5, r7
 800e0a6:	dd6f      	ble.n	800e188 <__gethex+0x32c>
 800e0a8:	1bed      	subs	r5, r5, r7
 800e0aa:	42ae      	cmp	r6, r5
 800e0ac:	dc34      	bgt.n	800e118 <__gethex+0x2bc>
 800e0ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d022      	beq.n	800e0fc <__gethex+0x2a0>
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d024      	beq.n	800e104 <__gethex+0x2a8>
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d115      	bne.n	800e0ea <__gethex+0x28e>
 800e0be:	42ae      	cmp	r6, r5
 800e0c0:	d113      	bne.n	800e0ea <__gethex+0x28e>
 800e0c2:	2e01      	cmp	r6, #1
 800e0c4:	d10b      	bne.n	800e0de <__gethex+0x282>
 800e0c6:	9a02      	ldr	r2, [sp, #8]
 800e0c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0cc:	6013      	str	r3, [r2, #0]
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	6123      	str	r3, [r4, #16]
 800e0d2:	f8ca 3000 	str.w	r3, [sl]
 800e0d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0d8:	2562      	movs	r5, #98	@ 0x62
 800e0da:	601c      	str	r4, [r3, #0]
 800e0dc:	e73a      	b.n	800df54 <__gethex+0xf8>
 800e0de:	1e71      	subs	r1, r6, #1
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 fe28 	bl	800ed36 <__any_on>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d1ed      	bne.n	800e0c6 <__gethex+0x26a>
 800e0ea:	9801      	ldr	r0, [sp, #4]
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	f000 f9d9 	bl	800e4a4 <_Bfree>
 800e0f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	2550      	movs	r5, #80	@ 0x50
 800e0fa:	e72b      	b.n	800df54 <__gethex+0xf8>
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1f3      	bne.n	800e0ea <__gethex+0x28e>
 800e102:	e7e0      	b.n	800e0c6 <__gethex+0x26a>
 800e104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1dd      	bne.n	800e0c6 <__gethex+0x26a>
 800e10a:	e7ee      	b.n	800e0ea <__gethex+0x28e>
 800e10c:	0800fad0 	.word	0x0800fad0
 800e110:	0800fb8a 	.word	0x0800fb8a
 800e114:	0800fb9b 	.word	0x0800fb9b
 800e118:	1e6f      	subs	r7, r5, #1
 800e11a:	f1b9 0f00 	cmp.w	r9, #0
 800e11e:	d130      	bne.n	800e182 <__gethex+0x326>
 800e120:	b127      	cbz	r7, 800e12c <__gethex+0x2d0>
 800e122:	4639      	mov	r1, r7
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fe06 	bl	800ed36 <__any_on>
 800e12a:	4681      	mov	r9, r0
 800e12c:	117a      	asrs	r2, r7, #5
 800e12e:	2301      	movs	r3, #1
 800e130:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e134:	f007 071f 	and.w	r7, r7, #31
 800e138:	40bb      	lsls	r3, r7
 800e13a:	4213      	tst	r3, r2
 800e13c:	4629      	mov	r1, r5
 800e13e:	4620      	mov	r0, r4
 800e140:	bf18      	it	ne
 800e142:	f049 0902 	orrne.w	r9, r9, #2
 800e146:	f7ff fe21 	bl	800dd8c <rshift>
 800e14a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e14e:	1b76      	subs	r6, r6, r5
 800e150:	2502      	movs	r5, #2
 800e152:	f1b9 0f00 	cmp.w	r9, #0
 800e156:	d047      	beq.n	800e1e8 <__gethex+0x38c>
 800e158:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d015      	beq.n	800e18c <__gethex+0x330>
 800e160:	2b03      	cmp	r3, #3
 800e162:	d017      	beq.n	800e194 <__gethex+0x338>
 800e164:	2b01      	cmp	r3, #1
 800e166:	d109      	bne.n	800e17c <__gethex+0x320>
 800e168:	f019 0f02 	tst.w	r9, #2
 800e16c:	d006      	beq.n	800e17c <__gethex+0x320>
 800e16e:	f8da 3000 	ldr.w	r3, [sl]
 800e172:	ea49 0903 	orr.w	r9, r9, r3
 800e176:	f019 0f01 	tst.w	r9, #1
 800e17a:	d10e      	bne.n	800e19a <__gethex+0x33e>
 800e17c:	f045 0510 	orr.w	r5, r5, #16
 800e180:	e032      	b.n	800e1e8 <__gethex+0x38c>
 800e182:	f04f 0901 	mov.w	r9, #1
 800e186:	e7d1      	b.n	800e12c <__gethex+0x2d0>
 800e188:	2501      	movs	r5, #1
 800e18a:	e7e2      	b.n	800e152 <__gethex+0x2f6>
 800e18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e18e:	f1c3 0301 	rsb	r3, r3, #1
 800e192:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0f0      	beq.n	800e17c <__gethex+0x320>
 800e19a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e19e:	f104 0314 	add.w	r3, r4, #20
 800e1a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1aa:	f04f 0c00 	mov.w	ip, #0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1b8:	d01b      	beq.n	800e1f2 <__gethex+0x396>
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	6002      	str	r2, [r0, #0]
 800e1be:	2d02      	cmp	r5, #2
 800e1c0:	f104 0314 	add.w	r3, r4, #20
 800e1c4:	d13c      	bne.n	800e240 <__gethex+0x3e4>
 800e1c6:	f8d8 2000 	ldr.w	r2, [r8]
 800e1ca:	3a01      	subs	r2, #1
 800e1cc:	42b2      	cmp	r2, r6
 800e1ce:	d109      	bne.n	800e1e4 <__gethex+0x388>
 800e1d0:	1171      	asrs	r1, r6, #5
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1d8:	f006 061f 	and.w	r6, r6, #31
 800e1dc:	fa02 f606 	lsl.w	r6, r2, r6
 800e1e0:	421e      	tst	r6, r3
 800e1e2:	d13a      	bne.n	800e25a <__gethex+0x3fe>
 800e1e4:	f045 0520 	orr.w	r5, r5, #32
 800e1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ea:	601c      	str	r4, [r3, #0]
 800e1ec:	9b02      	ldr	r3, [sp, #8]
 800e1ee:	601f      	str	r7, [r3, #0]
 800e1f0:	e6b0      	b.n	800df54 <__gethex+0xf8>
 800e1f2:	4299      	cmp	r1, r3
 800e1f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1f8:	d8d9      	bhi.n	800e1ae <__gethex+0x352>
 800e1fa:	68a3      	ldr	r3, [r4, #8]
 800e1fc:	459b      	cmp	fp, r3
 800e1fe:	db17      	blt.n	800e230 <__gethex+0x3d4>
 800e200:	6861      	ldr	r1, [r4, #4]
 800e202:	9801      	ldr	r0, [sp, #4]
 800e204:	3101      	adds	r1, #1
 800e206:	f000 f90d 	bl	800e424 <_Balloc>
 800e20a:	4681      	mov	r9, r0
 800e20c:	b918      	cbnz	r0, 800e216 <__gethex+0x3ba>
 800e20e:	4b1a      	ldr	r3, [pc, #104]	@ (800e278 <__gethex+0x41c>)
 800e210:	4602      	mov	r2, r0
 800e212:	2184      	movs	r1, #132	@ 0x84
 800e214:	e6c5      	b.n	800dfa2 <__gethex+0x146>
 800e216:	6922      	ldr	r2, [r4, #16]
 800e218:	3202      	adds	r2, #2
 800e21a:	f104 010c 	add.w	r1, r4, #12
 800e21e:	0092      	lsls	r2, r2, #2
 800e220:	300c      	adds	r0, #12
 800e222:	f7fe fef8 	bl	800d016 <memcpy>
 800e226:	4621      	mov	r1, r4
 800e228:	9801      	ldr	r0, [sp, #4]
 800e22a:	f000 f93b 	bl	800e4a4 <_Bfree>
 800e22e:	464c      	mov	r4, r9
 800e230:	6923      	ldr	r3, [r4, #16]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e238:	6122      	str	r2, [r4, #16]
 800e23a:	2201      	movs	r2, #1
 800e23c:	615a      	str	r2, [r3, #20]
 800e23e:	e7be      	b.n	800e1be <__gethex+0x362>
 800e240:	6922      	ldr	r2, [r4, #16]
 800e242:	455a      	cmp	r2, fp
 800e244:	dd0b      	ble.n	800e25e <__gethex+0x402>
 800e246:	2101      	movs	r1, #1
 800e248:	4620      	mov	r0, r4
 800e24a:	f7ff fd9f 	bl	800dd8c <rshift>
 800e24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e252:	3701      	adds	r7, #1
 800e254:	42bb      	cmp	r3, r7
 800e256:	f6ff aee0 	blt.w	800e01a <__gethex+0x1be>
 800e25a:	2501      	movs	r5, #1
 800e25c:	e7c2      	b.n	800e1e4 <__gethex+0x388>
 800e25e:	f016 061f 	ands.w	r6, r6, #31
 800e262:	d0fa      	beq.n	800e25a <__gethex+0x3fe>
 800e264:	4453      	add	r3, sl
 800e266:	f1c6 0620 	rsb	r6, r6, #32
 800e26a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e26e:	f000 f9cb 	bl	800e608 <__hi0bits>
 800e272:	42b0      	cmp	r0, r6
 800e274:	dbe7      	blt.n	800e246 <__gethex+0x3ea>
 800e276:	e7f0      	b.n	800e25a <__gethex+0x3fe>
 800e278:	0800fb8a 	.word	0x0800fb8a

0800e27c <L_shift>:
 800e27c:	f1c2 0208 	rsb	r2, r2, #8
 800e280:	0092      	lsls	r2, r2, #2
 800e282:	b570      	push	{r4, r5, r6, lr}
 800e284:	f1c2 0620 	rsb	r6, r2, #32
 800e288:	6843      	ldr	r3, [r0, #4]
 800e28a:	6804      	ldr	r4, [r0, #0]
 800e28c:	fa03 f506 	lsl.w	r5, r3, r6
 800e290:	432c      	orrs	r4, r5
 800e292:	40d3      	lsrs	r3, r2
 800e294:	6004      	str	r4, [r0, #0]
 800e296:	f840 3f04 	str.w	r3, [r0, #4]!
 800e29a:	4288      	cmp	r0, r1
 800e29c:	d3f4      	bcc.n	800e288 <L_shift+0xc>
 800e29e:	bd70      	pop	{r4, r5, r6, pc}

0800e2a0 <__match>:
 800e2a0:	b530      	push	{r4, r5, lr}
 800e2a2:	6803      	ldr	r3, [r0, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2aa:	b914      	cbnz	r4, 800e2b2 <__match+0x12>
 800e2ac:	6003      	str	r3, [r0, #0]
 800e2ae:	2001      	movs	r0, #1
 800e2b0:	bd30      	pop	{r4, r5, pc}
 800e2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e2ba:	2d19      	cmp	r5, #25
 800e2bc:	bf98      	it	ls
 800e2be:	3220      	addls	r2, #32
 800e2c0:	42a2      	cmp	r2, r4
 800e2c2:	d0f0      	beq.n	800e2a6 <__match+0x6>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	e7f3      	b.n	800e2b0 <__match+0x10>

0800e2c8 <__hexnan>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	680b      	ldr	r3, [r1, #0]
 800e2ce:	6801      	ldr	r1, [r0, #0]
 800e2d0:	115e      	asrs	r6, r3, #5
 800e2d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2d6:	f013 031f 	ands.w	r3, r3, #31
 800e2da:	b087      	sub	sp, #28
 800e2dc:	bf18      	it	ne
 800e2de:	3604      	addne	r6, #4
 800e2e0:	2500      	movs	r5, #0
 800e2e2:	1f37      	subs	r7, r6, #4
 800e2e4:	4682      	mov	sl, r0
 800e2e6:	4690      	mov	r8, r2
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2ee:	46b9      	mov	r9, r7
 800e2f0:	463c      	mov	r4, r7
 800e2f2:	9502      	str	r5, [sp, #8]
 800e2f4:	46ab      	mov	fp, r5
 800e2f6:	784a      	ldrb	r2, [r1, #1]
 800e2f8:	1c4b      	adds	r3, r1, #1
 800e2fa:	9303      	str	r3, [sp, #12]
 800e2fc:	b342      	cbz	r2, 800e350 <__hexnan+0x88>
 800e2fe:	4610      	mov	r0, r2
 800e300:	9105      	str	r1, [sp, #20]
 800e302:	9204      	str	r2, [sp, #16]
 800e304:	f7ff fd94 	bl	800de30 <__hexdig_fun>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d151      	bne.n	800e3b0 <__hexnan+0xe8>
 800e30c:	9a04      	ldr	r2, [sp, #16]
 800e30e:	9905      	ldr	r1, [sp, #20]
 800e310:	2a20      	cmp	r2, #32
 800e312:	d818      	bhi.n	800e346 <__hexnan+0x7e>
 800e314:	9b02      	ldr	r3, [sp, #8]
 800e316:	459b      	cmp	fp, r3
 800e318:	dd13      	ble.n	800e342 <__hexnan+0x7a>
 800e31a:	454c      	cmp	r4, r9
 800e31c:	d206      	bcs.n	800e32c <__hexnan+0x64>
 800e31e:	2d07      	cmp	r5, #7
 800e320:	dc04      	bgt.n	800e32c <__hexnan+0x64>
 800e322:	462a      	mov	r2, r5
 800e324:	4649      	mov	r1, r9
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff ffa8 	bl	800e27c <L_shift>
 800e32c:	4544      	cmp	r4, r8
 800e32e:	d952      	bls.n	800e3d6 <__hexnan+0x10e>
 800e330:	2300      	movs	r3, #0
 800e332:	f1a4 0904 	sub.w	r9, r4, #4
 800e336:	f844 3c04 	str.w	r3, [r4, #-4]
 800e33a:	f8cd b008 	str.w	fp, [sp, #8]
 800e33e:	464c      	mov	r4, r9
 800e340:	461d      	mov	r5, r3
 800e342:	9903      	ldr	r1, [sp, #12]
 800e344:	e7d7      	b.n	800e2f6 <__hexnan+0x2e>
 800e346:	2a29      	cmp	r2, #41	@ 0x29
 800e348:	d157      	bne.n	800e3fa <__hexnan+0x132>
 800e34a:	3102      	adds	r1, #2
 800e34c:	f8ca 1000 	str.w	r1, [sl]
 800e350:	f1bb 0f00 	cmp.w	fp, #0
 800e354:	d051      	beq.n	800e3fa <__hexnan+0x132>
 800e356:	454c      	cmp	r4, r9
 800e358:	d206      	bcs.n	800e368 <__hexnan+0xa0>
 800e35a:	2d07      	cmp	r5, #7
 800e35c:	dc04      	bgt.n	800e368 <__hexnan+0xa0>
 800e35e:	462a      	mov	r2, r5
 800e360:	4649      	mov	r1, r9
 800e362:	4620      	mov	r0, r4
 800e364:	f7ff ff8a 	bl	800e27c <L_shift>
 800e368:	4544      	cmp	r4, r8
 800e36a:	d936      	bls.n	800e3da <__hexnan+0x112>
 800e36c:	f1a8 0204 	sub.w	r2, r8, #4
 800e370:	4623      	mov	r3, r4
 800e372:	f853 1b04 	ldr.w	r1, [r3], #4
 800e376:	f842 1f04 	str.w	r1, [r2, #4]!
 800e37a:	429f      	cmp	r7, r3
 800e37c:	d2f9      	bcs.n	800e372 <__hexnan+0xaa>
 800e37e:	1b3b      	subs	r3, r7, r4
 800e380:	f023 0303 	bic.w	r3, r3, #3
 800e384:	3304      	adds	r3, #4
 800e386:	3401      	adds	r4, #1
 800e388:	3e03      	subs	r6, #3
 800e38a:	42b4      	cmp	r4, r6
 800e38c:	bf88      	it	hi
 800e38e:	2304      	movhi	r3, #4
 800e390:	4443      	add	r3, r8
 800e392:	2200      	movs	r2, #0
 800e394:	f843 2b04 	str.w	r2, [r3], #4
 800e398:	429f      	cmp	r7, r3
 800e39a:	d2fb      	bcs.n	800e394 <__hexnan+0xcc>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	b91b      	cbnz	r3, 800e3a8 <__hexnan+0xe0>
 800e3a0:	4547      	cmp	r7, r8
 800e3a2:	d128      	bne.n	800e3f6 <__hexnan+0x12e>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	2005      	movs	r0, #5
 800e3aa:	b007      	add	sp, #28
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b0:	3501      	adds	r5, #1
 800e3b2:	2d08      	cmp	r5, #8
 800e3b4:	f10b 0b01 	add.w	fp, fp, #1
 800e3b8:	dd06      	ble.n	800e3c8 <__hexnan+0x100>
 800e3ba:	4544      	cmp	r4, r8
 800e3bc:	d9c1      	bls.n	800e342 <__hexnan+0x7a>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3c4:	2501      	movs	r5, #1
 800e3c6:	3c04      	subs	r4, #4
 800e3c8:	6822      	ldr	r2, [r4, #0]
 800e3ca:	f000 000f 	and.w	r0, r0, #15
 800e3ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3d2:	6020      	str	r0, [r4, #0]
 800e3d4:	e7b5      	b.n	800e342 <__hexnan+0x7a>
 800e3d6:	2508      	movs	r5, #8
 800e3d8:	e7b3      	b.n	800e342 <__hexnan+0x7a>
 800e3da:	9b01      	ldr	r3, [sp, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0dd      	beq.n	800e39c <__hexnan+0xd4>
 800e3e0:	f1c3 0320 	rsb	r3, r3, #32
 800e3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e8:	40da      	lsrs	r2, r3
 800e3ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3f4:	e7d2      	b.n	800e39c <__hexnan+0xd4>
 800e3f6:	3f04      	subs	r7, #4
 800e3f8:	e7d0      	b.n	800e39c <__hexnan+0xd4>
 800e3fa:	2004      	movs	r0, #4
 800e3fc:	e7d5      	b.n	800e3aa <__hexnan+0xe2>

0800e3fe <__ascii_mbtowc>:
 800e3fe:	b082      	sub	sp, #8
 800e400:	b901      	cbnz	r1, 800e404 <__ascii_mbtowc+0x6>
 800e402:	a901      	add	r1, sp, #4
 800e404:	b142      	cbz	r2, 800e418 <__ascii_mbtowc+0x1a>
 800e406:	b14b      	cbz	r3, 800e41c <__ascii_mbtowc+0x1e>
 800e408:	7813      	ldrb	r3, [r2, #0]
 800e40a:	600b      	str	r3, [r1, #0]
 800e40c:	7812      	ldrb	r2, [r2, #0]
 800e40e:	1e10      	subs	r0, r2, #0
 800e410:	bf18      	it	ne
 800e412:	2001      	movne	r0, #1
 800e414:	b002      	add	sp, #8
 800e416:	4770      	bx	lr
 800e418:	4610      	mov	r0, r2
 800e41a:	e7fb      	b.n	800e414 <__ascii_mbtowc+0x16>
 800e41c:	f06f 0001 	mvn.w	r0, #1
 800e420:	e7f8      	b.n	800e414 <__ascii_mbtowc+0x16>
	...

0800e424 <_Balloc>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	69c6      	ldr	r6, [r0, #28]
 800e428:	4604      	mov	r4, r0
 800e42a:	460d      	mov	r5, r1
 800e42c:	b976      	cbnz	r6, 800e44c <_Balloc+0x28>
 800e42e:	2010      	movs	r0, #16
 800e430:	f7fd f836 	bl	800b4a0 <malloc>
 800e434:	4602      	mov	r2, r0
 800e436:	61e0      	str	r0, [r4, #28]
 800e438:	b920      	cbnz	r0, 800e444 <_Balloc+0x20>
 800e43a:	4b18      	ldr	r3, [pc, #96]	@ (800e49c <_Balloc+0x78>)
 800e43c:	4818      	ldr	r0, [pc, #96]	@ (800e4a0 <_Balloc+0x7c>)
 800e43e:	216b      	movs	r1, #107	@ 0x6b
 800e440:	f000 fec4 	bl	800f1cc <__assert_func>
 800e444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e448:	6006      	str	r6, [r0, #0]
 800e44a:	60c6      	str	r6, [r0, #12]
 800e44c:	69e6      	ldr	r6, [r4, #28]
 800e44e:	68f3      	ldr	r3, [r6, #12]
 800e450:	b183      	cbz	r3, 800e474 <_Balloc+0x50>
 800e452:	69e3      	ldr	r3, [r4, #28]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e45a:	b9b8      	cbnz	r0, 800e48c <_Balloc+0x68>
 800e45c:	2101      	movs	r1, #1
 800e45e:	fa01 f605 	lsl.w	r6, r1, r5
 800e462:	1d72      	adds	r2, r6, #5
 800e464:	0092      	lsls	r2, r2, #2
 800e466:	4620      	mov	r0, r4
 800e468:	f000 fece 	bl	800f208 <_calloc_r>
 800e46c:	b160      	cbz	r0, 800e488 <_Balloc+0x64>
 800e46e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e472:	e00e      	b.n	800e492 <_Balloc+0x6e>
 800e474:	2221      	movs	r2, #33	@ 0x21
 800e476:	2104      	movs	r1, #4
 800e478:	4620      	mov	r0, r4
 800e47a:	f000 fec5 	bl	800f208 <_calloc_r>
 800e47e:	69e3      	ldr	r3, [r4, #28]
 800e480:	60f0      	str	r0, [r6, #12]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1e4      	bne.n	800e452 <_Balloc+0x2e>
 800e488:	2000      	movs	r0, #0
 800e48a:	bd70      	pop	{r4, r5, r6, pc}
 800e48c:	6802      	ldr	r2, [r0, #0]
 800e48e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e492:	2300      	movs	r3, #0
 800e494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e498:	e7f7      	b.n	800e48a <_Balloc+0x66>
 800e49a:	bf00      	nop
 800e49c:	0800fb1b 	.word	0x0800fb1b
 800e4a0:	0800fbfb 	.word	0x0800fbfb

0800e4a4 <_Bfree>:
 800e4a4:	b570      	push	{r4, r5, r6, lr}
 800e4a6:	69c6      	ldr	r6, [r0, #28]
 800e4a8:	4605      	mov	r5, r0
 800e4aa:	460c      	mov	r4, r1
 800e4ac:	b976      	cbnz	r6, 800e4cc <_Bfree+0x28>
 800e4ae:	2010      	movs	r0, #16
 800e4b0:	f7fc fff6 	bl	800b4a0 <malloc>
 800e4b4:	4602      	mov	r2, r0
 800e4b6:	61e8      	str	r0, [r5, #28]
 800e4b8:	b920      	cbnz	r0, 800e4c4 <_Bfree+0x20>
 800e4ba:	4b09      	ldr	r3, [pc, #36]	@ (800e4e0 <_Bfree+0x3c>)
 800e4bc:	4809      	ldr	r0, [pc, #36]	@ (800e4e4 <_Bfree+0x40>)
 800e4be:	218f      	movs	r1, #143	@ 0x8f
 800e4c0:	f000 fe84 	bl	800f1cc <__assert_func>
 800e4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4c8:	6006      	str	r6, [r0, #0]
 800e4ca:	60c6      	str	r6, [r0, #12]
 800e4cc:	b13c      	cbz	r4, 800e4de <_Bfree+0x3a>
 800e4ce:	69eb      	ldr	r3, [r5, #28]
 800e4d0:	6862      	ldr	r2, [r4, #4]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4d8:	6021      	str	r1, [r4, #0]
 800e4da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e4de:	bd70      	pop	{r4, r5, r6, pc}
 800e4e0:	0800fb1b 	.word	0x0800fb1b
 800e4e4:	0800fbfb 	.word	0x0800fbfb

0800e4e8 <__multadd>:
 800e4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ec:	690d      	ldr	r5, [r1, #16]
 800e4ee:	4607      	mov	r7, r0
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	461e      	mov	r6, r3
 800e4f4:	f101 0c14 	add.w	ip, r1, #20
 800e4f8:	2000      	movs	r0, #0
 800e4fa:	f8dc 3000 	ldr.w	r3, [ip]
 800e4fe:	b299      	uxth	r1, r3
 800e500:	fb02 6101 	mla	r1, r2, r1, r6
 800e504:	0c1e      	lsrs	r6, r3, #16
 800e506:	0c0b      	lsrs	r3, r1, #16
 800e508:	fb02 3306 	mla	r3, r2, r6, r3
 800e50c:	b289      	uxth	r1, r1
 800e50e:	3001      	adds	r0, #1
 800e510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e514:	4285      	cmp	r5, r0
 800e516:	f84c 1b04 	str.w	r1, [ip], #4
 800e51a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e51e:	dcec      	bgt.n	800e4fa <__multadd+0x12>
 800e520:	b30e      	cbz	r6, 800e566 <__multadd+0x7e>
 800e522:	68a3      	ldr	r3, [r4, #8]
 800e524:	42ab      	cmp	r3, r5
 800e526:	dc19      	bgt.n	800e55c <__multadd+0x74>
 800e528:	6861      	ldr	r1, [r4, #4]
 800e52a:	4638      	mov	r0, r7
 800e52c:	3101      	adds	r1, #1
 800e52e:	f7ff ff79 	bl	800e424 <_Balloc>
 800e532:	4680      	mov	r8, r0
 800e534:	b928      	cbnz	r0, 800e542 <__multadd+0x5a>
 800e536:	4602      	mov	r2, r0
 800e538:	4b0c      	ldr	r3, [pc, #48]	@ (800e56c <__multadd+0x84>)
 800e53a:	480d      	ldr	r0, [pc, #52]	@ (800e570 <__multadd+0x88>)
 800e53c:	21ba      	movs	r1, #186	@ 0xba
 800e53e:	f000 fe45 	bl	800f1cc <__assert_func>
 800e542:	6922      	ldr	r2, [r4, #16]
 800e544:	3202      	adds	r2, #2
 800e546:	f104 010c 	add.w	r1, r4, #12
 800e54a:	0092      	lsls	r2, r2, #2
 800e54c:	300c      	adds	r0, #12
 800e54e:	f7fe fd62 	bl	800d016 <memcpy>
 800e552:	4621      	mov	r1, r4
 800e554:	4638      	mov	r0, r7
 800e556:	f7ff ffa5 	bl	800e4a4 <_Bfree>
 800e55a:	4644      	mov	r4, r8
 800e55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e560:	3501      	adds	r5, #1
 800e562:	615e      	str	r6, [r3, #20]
 800e564:	6125      	str	r5, [r4, #16]
 800e566:	4620      	mov	r0, r4
 800e568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e56c:	0800fb8a 	.word	0x0800fb8a
 800e570:	0800fbfb 	.word	0x0800fbfb

0800e574 <__s2b>:
 800e574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e578:	460c      	mov	r4, r1
 800e57a:	4615      	mov	r5, r2
 800e57c:	461f      	mov	r7, r3
 800e57e:	2209      	movs	r2, #9
 800e580:	3308      	adds	r3, #8
 800e582:	4606      	mov	r6, r0
 800e584:	fb93 f3f2 	sdiv	r3, r3, r2
 800e588:	2100      	movs	r1, #0
 800e58a:	2201      	movs	r2, #1
 800e58c:	429a      	cmp	r2, r3
 800e58e:	db09      	blt.n	800e5a4 <__s2b+0x30>
 800e590:	4630      	mov	r0, r6
 800e592:	f7ff ff47 	bl	800e424 <_Balloc>
 800e596:	b940      	cbnz	r0, 800e5aa <__s2b+0x36>
 800e598:	4602      	mov	r2, r0
 800e59a:	4b19      	ldr	r3, [pc, #100]	@ (800e600 <__s2b+0x8c>)
 800e59c:	4819      	ldr	r0, [pc, #100]	@ (800e604 <__s2b+0x90>)
 800e59e:	21d3      	movs	r1, #211	@ 0xd3
 800e5a0:	f000 fe14 	bl	800f1cc <__assert_func>
 800e5a4:	0052      	lsls	r2, r2, #1
 800e5a6:	3101      	adds	r1, #1
 800e5a8:	e7f0      	b.n	800e58c <__s2b+0x18>
 800e5aa:	9b08      	ldr	r3, [sp, #32]
 800e5ac:	6143      	str	r3, [r0, #20]
 800e5ae:	2d09      	cmp	r5, #9
 800e5b0:	f04f 0301 	mov.w	r3, #1
 800e5b4:	6103      	str	r3, [r0, #16]
 800e5b6:	dd16      	ble.n	800e5e6 <__s2b+0x72>
 800e5b8:	f104 0909 	add.w	r9, r4, #9
 800e5bc:	46c8      	mov	r8, r9
 800e5be:	442c      	add	r4, r5
 800e5c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e5c4:	4601      	mov	r1, r0
 800e5c6:	3b30      	subs	r3, #48	@ 0x30
 800e5c8:	220a      	movs	r2, #10
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	f7ff ff8c 	bl	800e4e8 <__multadd>
 800e5d0:	45a0      	cmp	r8, r4
 800e5d2:	d1f5      	bne.n	800e5c0 <__s2b+0x4c>
 800e5d4:	f1a5 0408 	sub.w	r4, r5, #8
 800e5d8:	444c      	add	r4, r9
 800e5da:	1b2d      	subs	r5, r5, r4
 800e5dc:	1963      	adds	r3, r4, r5
 800e5de:	42bb      	cmp	r3, r7
 800e5e0:	db04      	blt.n	800e5ec <__s2b+0x78>
 800e5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	340a      	adds	r4, #10
 800e5e8:	2509      	movs	r5, #9
 800e5ea:	e7f6      	b.n	800e5da <__s2b+0x66>
 800e5ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5f0:	4601      	mov	r1, r0
 800e5f2:	3b30      	subs	r3, #48	@ 0x30
 800e5f4:	220a      	movs	r2, #10
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f7ff ff76 	bl	800e4e8 <__multadd>
 800e5fc:	e7ee      	b.n	800e5dc <__s2b+0x68>
 800e5fe:	bf00      	nop
 800e600:	0800fb8a 	.word	0x0800fb8a
 800e604:	0800fbfb 	.word	0x0800fbfb

0800e608 <__hi0bits>:
 800e608:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e60c:	4603      	mov	r3, r0
 800e60e:	bf36      	itet	cc
 800e610:	0403      	lslcc	r3, r0, #16
 800e612:	2000      	movcs	r0, #0
 800e614:	2010      	movcc	r0, #16
 800e616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e61a:	bf3c      	itt	cc
 800e61c:	021b      	lslcc	r3, r3, #8
 800e61e:	3008      	addcc	r0, #8
 800e620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e624:	bf3c      	itt	cc
 800e626:	011b      	lslcc	r3, r3, #4
 800e628:	3004      	addcc	r0, #4
 800e62a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e62e:	bf3c      	itt	cc
 800e630:	009b      	lslcc	r3, r3, #2
 800e632:	3002      	addcc	r0, #2
 800e634:	2b00      	cmp	r3, #0
 800e636:	db05      	blt.n	800e644 <__hi0bits+0x3c>
 800e638:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e63c:	f100 0001 	add.w	r0, r0, #1
 800e640:	bf08      	it	eq
 800e642:	2020      	moveq	r0, #32
 800e644:	4770      	bx	lr

0800e646 <__lo0bits>:
 800e646:	6803      	ldr	r3, [r0, #0]
 800e648:	4602      	mov	r2, r0
 800e64a:	f013 0007 	ands.w	r0, r3, #7
 800e64e:	d00b      	beq.n	800e668 <__lo0bits+0x22>
 800e650:	07d9      	lsls	r1, r3, #31
 800e652:	d421      	bmi.n	800e698 <__lo0bits+0x52>
 800e654:	0798      	lsls	r0, r3, #30
 800e656:	bf49      	itett	mi
 800e658:	085b      	lsrmi	r3, r3, #1
 800e65a:	089b      	lsrpl	r3, r3, #2
 800e65c:	2001      	movmi	r0, #1
 800e65e:	6013      	strmi	r3, [r2, #0]
 800e660:	bf5c      	itt	pl
 800e662:	6013      	strpl	r3, [r2, #0]
 800e664:	2002      	movpl	r0, #2
 800e666:	4770      	bx	lr
 800e668:	b299      	uxth	r1, r3
 800e66a:	b909      	cbnz	r1, 800e670 <__lo0bits+0x2a>
 800e66c:	0c1b      	lsrs	r3, r3, #16
 800e66e:	2010      	movs	r0, #16
 800e670:	b2d9      	uxtb	r1, r3
 800e672:	b909      	cbnz	r1, 800e678 <__lo0bits+0x32>
 800e674:	3008      	adds	r0, #8
 800e676:	0a1b      	lsrs	r3, r3, #8
 800e678:	0719      	lsls	r1, r3, #28
 800e67a:	bf04      	itt	eq
 800e67c:	091b      	lsreq	r3, r3, #4
 800e67e:	3004      	addeq	r0, #4
 800e680:	0799      	lsls	r1, r3, #30
 800e682:	bf04      	itt	eq
 800e684:	089b      	lsreq	r3, r3, #2
 800e686:	3002      	addeq	r0, #2
 800e688:	07d9      	lsls	r1, r3, #31
 800e68a:	d403      	bmi.n	800e694 <__lo0bits+0x4e>
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	f100 0001 	add.w	r0, r0, #1
 800e692:	d003      	beq.n	800e69c <__lo0bits+0x56>
 800e694:	6013      	str	r3, [r2, #0]
 800e696:	4770      	bx	lr
 800e698:	2000      	movs	r0, #0
 800e69a:	4770      	bx	lr
 800e69c:	2020      	movs	r0, #32
 800e69e:	4770      	bx	lr

0800e6a0 <__i2b>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	2101      	movs	r1, #1
 800e6a6:	f7ff febd 	bl	800e424 <_Balloc>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	b928      	cbnz	r0, 800e6ba <__i2b+0x1a>
 800e6ae:	4b05      	ldr	r3, [pc, #20]	@ (800e6c4 <__i2b+0x24>)
 800e6b0:	4805      	ldr	r0, [pc, #20]	@ (800e6c8 <__i2b+0x28>)
 800e6b2:	f240 1145 	movw	r1, #325	@ 0x145
 800e6b6:	f000 fd89 	bl	800f1cc <__assert_func>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	6144      	str	r4, [r0, #20]
 800e6be:	6103      	str	r3, [r0, #16]
 800e6c0:	bd10      	pop	{r4, pc}
 800e6c2:	bf00      	nop
 800e6c4:	0800fb8a 	.word	0x0800fb8a
 800e6c8:	0800fbfb 	.word	0x0800fbfb

0800e6cc <__multiply>:
 800e6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d0:	4617      	mov	r7, r2
 800e6d2:	690a      	ldr	r2, [r1, #16]
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	bfa8      	it	ge
 800e6da:	463b      	movge	r3, r7
 800e6dc:	4689      	mov	r9, r1
 800e6de:	bfa4      	itt	ge
 800e6e0:	460f      	movge	r7, r1
 800e6e2:	4699      	movge	r9, r3
 800e6e4:	693d      	ldr	r5, [r7, #16]
 800e6e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	6879      	ldr	r1, [r7, #4]
 800e6ee:	eb05 060a 	add.w	r6, r5, sl
 800e6f2:	42b3      	cmp	r3, r6
 800e6f4:	b085      	sub	sp, #20
 800e6f6:	bfb8      	it	lt
 800e6f8:	3101      	addlt	r1, #1
 800e6fa:	f7ff fe93 	bl	800e424 <_Balloc>
 800e6fe:	b930      	cbnz	r0, 800e70e <__multiply+0x42>
 800e700:	4602      	mov	r2, r0
 800e702:	4b41      	ldr	r3, [pc, #260]	@ (800e808 <__multiply+0x13c>)
 800e704:	4841      	ldr	r0, [pc, #260]	@ (800e80c <__multiply+0x140>)
 800e706:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e70a:	f000 fd5f 	bl	800f1cc <__assert_func>
 800e70e:	f100 0414 	add.w	r4, r0, #20
 800e712:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e716:	4623      	mov	r3, r4
 800e718:	2200      	movs	r2, #0
 800e71a:	4573      	cmp	r3, lr
 800e71c:	d320      	bcc.n	800e760 <__multiply+0x94>
 800e71e:	f107 0814 	add.w	r8, r7, #20
 800e722:	f109 0114 	add.w	r1, r9, #20
 800e726:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e72a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	1beb      	subs	r3, r5, r7
 800e732:	3b15      	subs	r3, #21
 800e734:	f023 0303 	bic.w	r3, r3, #3
 800e738:	3304      	adds	r3, #4
 800e73a:	3715      	adds	r7, #21
 800e73c:	42bd      	cmp	r5, r7
 800e73e:	bf38      	it	cc
 800e740:	2304      	movcc	r3, #4
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	9b02      	ldr	r3, [sp, #8]
 800e746:	9103      	str	r1, [sp, #12]
 800e748:	428b      	cmp	r3, r1
 800e74a:	d80c      	bhi.n	800e766 <__multiply+0x9a>
 800e74c:	2e00      	cmp	r6, #0
 800e74e:	dd03      	ble.n	800e758 <__multiply+0x8c>
 800e750:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e754:	2b00      	cmp	r3, #0
 800e756:	d055      	beq.n	800e804 <__multiply+0x138>
 800e758:	6106      	str	r6, [r0, #16]
 800e75a:	b005      	add	sp, #20
 800e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e760:	f843 2b04 	str.w	r2, [r3], #4
 800e764:	e7d9      	b.n	800e71a <__multiply+0x4e>
 800e766:	f8b1 a000 	ldrh.w	sl, [r1]
 800e76a:	f1ba 0f00 	cmp.w	sl, #0
 800e76e:	d01f      	beq.n	800e7b0 <__multiply+0xe4>
 800e770:	46c4      	mov	ip, r8
 800e772:	46a1      	mov	r9, r4
 800e774:	2700      	movs	r7, #0
 800e776:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e77a:	f8d9 3000 	ldr.w	r3, [r9]
 800e77e:	fa1f fb82 	uxth.w	fp, r2
 800e782:	b29b      	uxth	r3, r3
 800e784:	fb0a 330b 	mla	r3, sl, fp, r3
 800e788:	443b      	add	r3, r7
 800e78a:	f8d9 7000 	ldr.w	r7, [r9]
 800e78e:	0c12      	lsrs	r2, r2, #16
 800e790:	0c3f      	lsrs	r7, r7, #16
 800e792:	fb0a 7202 	mla	r2, sl, r2, r7
 800e796:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7a0:	4565      	cmp	r5, ip
 800e7a2:	f849 3b04 	str.w	r3, [r9], #4
 800e7a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e7aa:	d8e4      	bhi.n	800e776 <__multiply+0xaa>
 800e7ac:	9b01      	ldr	r3, [sp, #4]
 800e7ae:	50e7      	str	r7, [r4, r3]
 800e7b0:	9b03      	ldr	r3, [sp, #12]
 800e7b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e7b6:	3104      	adds	r1, #4
 800e7b8:	f1b9 0f00 	cmp.w	r9, #0
 800e7bc:	d020      	beq.n	800e800 <__multiply+0x134>
 800e7be:	6823      	ldr	r3, [r4, #0]
 800e7c0:	4647      	mov	r7, r8
 800e7c2:	46a4      	mov	ip, r4
 800e7c4:	f04f 0a00 	mov.w	sl, #0
 800e7c8:	f8b7 b000 	ldrh.w	fp, [r7]
 800e7cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e7d0:	fb09 220b 	mla	r2, r9, fp, r2
 800e7d4:	4452      	add	r2, sl
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7dc:	f84c 3b04 	str.w	r3, [ip], #4
 800e7e0:	f857 3b04 	ldr.w	r3, [r7], #4
 800e7e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7e8:	f8bc 3000 	ldrh.w	r3, [ip]
 800e7ec:	fb09 330a 	mla	r3, r9, sl, r3
 800e7f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e7f4:	42bd      	cmp	r5, r7
 800e7f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e7fa:	d8e5      	bhi.n	800e7c8 <__multiply+0xfc>
 800e7fc:	9a01      	ldr	r2, [sp, #4]
 800e7fe:	50a3      	str	r3, [r4, r2]
 800e800:	3404      	adds	r4, #4
 800e802:	e79f      	b.n	800e744 <__multiply+0x78>
 800e804:	3e01      	subs	r6, #1
 800e806:	e7a1      	b.n	800e74c <__multiply+0x80>
 800e808:	0800fb8a 	.word	0x0800fb8a
 800e80c:	0800fbfb 	.word	0x0800fbfb

0800e810 <__pow5mult>:
 800e810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e814:	4615      	mov	r5, r2
 800e816:	f012 0203 	ands.w	r2, r2, #3
 800e81a:	4607      	mov	r7, r0
 800e81c:	460e      	mov	r6, r1
 800e81e:	d007      	beq.n	800e830 <__pow5mult+0x20>
 800e820:	4c25      	ldr	r4, [pc, #148]	@ (800e8b8 <__pow5mult+0xa8>)
 800e822:	3a01      	subs	r2, #1
 800e824:	2300      	movs	r3, #0
 800e826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e82a:	f7ff fe5d 	bl	800e4e8 <__multadd>
 800e82e:	4606      	mov	r6, r0
 800e830:	10ad      	asrs	r5, r5, #2
 800e832:	d03d      	beq.n	800e8b0 <__pow5mult+0xa0>
 800e834:	69fc      	ldr	r4, [r7, #28]
 800e836:	b97c      	cbnz	r4, 800e858 <__pow5mult+0x48>
 800e838:	2010      	movs	r0, #16
 800e83a:	f7fc fe31 	bl	800b4a0 <malloc>
 800e83e:	4602      	mov	r2, r0
 800e840:	61f8      	str	r0, [r7, #28]
 800e842:	b928      	cbnz	r0, 800e850 <__pow5mult+0x40>
 800e844:	4b1d      	ldr	r3, [pc, #116]	@ (800e8bc <__pow5mult+0xac>)
 800e846:	481e      	ldr	r0, [pc, #120]	@ (800e8c0 <__pow5mult+0xb0>)
 800e848:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e84c:	f000 fcbe 	bl	800f1cc <__assert_func>
 800e850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e854:	6004      	str	r4, [r0, #0]
 800e856:	60c4      	str	r4, [r0, #12]
 800e858:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e85c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e860:	b94c      	cbnz	r4, 800e876 <__pow5mult+0x66>
 800e862:	f240 2171 	movw	r1, #625	@ 0x271
 800e866:	4638      	mov	r0, r7
 800e868:	f7ff ff1a 	bl	800e6a0 <__i2b>
 800e86c:	2300      	movs	r3, #0
 800e86e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e872:	4604      	mov	r4, r0
 800e874:	6003      	str	r3, [r0, #0]
 800e876:	f04f 0900 	mov.w	r9, #0
 800e87a:	07eb      	lsls	r3, r5, #31
 800e87c:	d50a      	bpl.n	800e894 <__pow5mult+0x84>
 800e87e:	4631      	mov	r1, r6
 800e880:	4622      	mov	r2, r4
 800e882:	4638      	mov	r0, r7
 800e884:	f7ff ff22 	bl	800e6cc <__multiply>
 800e888:	4631      	mov	r1, r6
 800e88a:	4680      	mov	r8, r0
 800e88c:	4638      	mov	r0, r7
 800e88e:	f7ff fe09 	bl	800e4a4 <_Bfree>
 800e892:	4646      	mov	r6, r8
 800e894:	106d      	asrs	r5, r5, #1
 800e896:	d00b      	beq.n	800e8b0 <__pow5mult+0xa0>
 800e898:	6820      	ldr	r0, [r4, #0]
 800e89a:	b938      	cbnz	r0, 800e8ac <__pow5mult+0x9c>
 800e89c:	4622      	mov	r2, r4
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4638      	mov	r0, r7
 800e8a2:	f7ff ff13 	bl	800e6cc <__multiply>
 800e8a6:	6020      	str	r0, [r4, #0]
 800e8a8:	f8c0 9000 	str.w	r9, [r0]
 800e8ac:	4604      	mov	r4, r0
 800e8ae:	e7e4      	b.n	800e87a <__pow5mult+0x6a>
 800e8b0:	4630      	mov	r0, r6
 800e8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b6:	bf00      	nop
 800e8b8:	0800fcf8 	.word	0x0800fcf8
 800e8bc:	0800fb1b 	.word	0x0800fb1b
 800e8c0:	0800fbfb 	.word	0x0800fbfb

0800e8c4 <__lshift>:
 800e8c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c8:	460c      	mov	r4, r1
 800e8ca:	6849      	ldr	r1, [r1, #4]
 800e8cc:	6923      	ldr	r3, [r4, #16]
 800e8ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8d2:	68a3      	ldr	r3, [r4, #8]
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	4691      	mov	r9, r2
 800e8d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8dc:	f108 0601 	add.w	r6, r8, #1
 800e8e0:	42b3      	cmp	r3, r6
 800e8e2:	db0b      	blt.n	800e8fc <__lshift+0x38>
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	f7ff fd9d 	bl	800e424 <_Balloc>
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	b948      	cbnz	r0, 800e902 <__lshift+0x3e>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	4b28      	ldr	r3, [pc, #160]	@ (800e994 <__lshift+0xd0>)
 800e8f2:	4829      	ldr	r0, [pc, #164]	@ (800e998 <__lshift+0xd4>)
 800e8f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e8f8:	f000 fc68 	bl	800f1cc <__assert_func>
 800e8fc:	3101      	adds	r1, #1
 800e8fe:	005b      	lsls	r3, r3, #1
 800e900:	e7ee      	b.n	800e8e0 <__lshift+0x1c>
 800e902:	2300      	movs	r3, #0
 800e904:	f100 0114 	add.w	r1, r0, #20
 800e908:	f100 0210 	add.w	r2, r0, #16
 800e90c:	4618      	mov	r0, r3
 800e90e:	4553      	cmp	r3, sl
 800e910:	db33      	blt.n	800e97a <__lshift+0xb6>
 800e912:	6920      	ldr	r0, [r4, #16]
 800e914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e918:	f104 0314 	add.w	r3, r4, #20
 800e91c:	f019 091f 	ands.w	r9, r9, #31
 800e920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e928:	d02b      	beq.n	800e982 <__lshift+0xbe>
 800e92a:	f1c9 0e20 	rsb	lr, r9, #32
 800e92e:	468a      	mov	sl, r1
 800e930:	2200      	movs	r2, #0
 800e932:	6818      	ldr	r0, [r3, #0]
 800e934:	fa00 f009 	lsl.w	r0, r0, r9
 800e938:	4310      	orrs	r0, r2
 800e93a:	f84a 0b04 	str.w	r0, [sl], #4
 800e93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e942:	459c      	cmp	ip, r3
 800e944:	fa22 f20e 	lsr.w	r2, r2, lr
 800e948:	d8f3      	bhi.n	800e932 <__lshift+0x6e>
 800e94a:	ebac 0304 	sub.w	r3, ip, r4
 800e94e:	3b15      	subs	r3, #21
 800e950:	f023 0303 	bic.w	r3, r3, #3
 800e954:	3304      	adds	r3, #4
 800e956:	f104 0015 	add.w	r0, r4, #21
 800e95a:	4560      	cmp	r0, ip
 800e95c:	bf88      	it	hi
 800e95e:	2304      	movhi	r3, #4
 800e960:	50ca      	str	r2, [r1, r3]
 800e962:	b10a      	cbz	r2, 800e968 <__lshift+0xa4>
 800e964:	f108 0602 	add.w	r6, r8, #2
 800e968:	3e01      	subs	r6, #1
 800e96a:	4638      	mov	r0, r7
 800e96c:	612e      	str	r6, [r5, #16]
 800e96e:	4621      	mov	r1, r4
 800e970:	f7ff fd98 	bl	800e4a4 <_Bfree>
 800e974:	4628      	mov	r0, r5
 800e976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e97a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e97e:	3301      	adds	r3, #1
 800e980:	e7c5      	b.n	800e90e <__lshift+0x4a>
 800e982:	3904      	subs	r1, #4
 800e984:	f853 2b04 	ldr.w	r2, [r3], #4
 800e988:	f841 2f04 	str.w	r2, [r1, #4]!
 800e98c:	459c      	cmp	ip, r3
 800e98e:	d8f9      	bhi.n	800e984 <__lshift+0xc0>
 800e990:	e7ea      	b.n	800e968 <__lshift+0xa4>
 800e992:	bf00      	nop
 800e994:	0800fb8a 	.word	0x0800fb8a
 800e998:	0800fbfb 	.word	0x0800fbfb

0800e99c <__mcmp>:
 800e99c:	690a      	ldr	r2, [r1, #16]
 800e99e:	4603      	mov	r3, r0
 800e9a0:	6900      	ldr	r0, [r0, #16]
 800e9a2:	1a80      	subs	r0, r0, r2
 800e9a4:	b530      	push	{r4, r5, lr}
 800e9a6:	d10e      	bne.n	800e9c6 <__mcmp+0x2a>
 800e9a8:	3314      	adds	r3, #20
 800e9aa:	3114      	adds	r1, #20
 800e9ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e9b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e9b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e9b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e9bc:	4295      	cmp	r5, r2
 800e9be:	d003      	beq.n	800e9c8 <__mcmp+0x2c>
 800e9c0:	d205      	bcs.n	800e9ce <__mcmp+0x32>
 800e9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c6:	bd30      	pop	{r4, r5, pc}
 800e9c8:	42a3      	cmp	r3, r4
 800e9ca:	d3f3      	bcc.n	800e9b4 <__mcmp+0x18>
 800e9cc:	e7fb      	b.n	800e9c6 <__mcmp+0x2a>
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	e7f9      	b.n	800e9c6 <__mcmp+0x2a>
	...

0800e9d4 <__mdiff>:
 800e9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d8:	4689      	mov	r9, r1
 800e9da:	4606      	mov	r6, r0
 800e9dc:	4611      	mov	r1, r2
 800e9de:	4648      	mov	r0, r9
 800e9e0:	4614      	mov	r4, r2
 800e9e2:	f7ff ffdb 	bl	800e99c <__mcmp>
 800e9e6:	1e05      	subs	r5, r0, #0
 800e9e8:	d112      	bne.n	800ea10 <__mdiff+0x3c>
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f7ff fd19 	bl	800e424 <_Balloc>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	b928      	cbnz	r0, 800ea02 <__mdiff+0x2e>
 800e9f6:	4b3f      	ldr	r3, [pc, #252]	@ (800eaf4 <__mdiff+0x120>)
 800e9f8:	f240 2137 	movw	r1, #567	@ 0x237
 800e9fc:	483e      	ldr	r0, [pc, #248]	@ (800eaf8 <__mdiff+0x124>)
 800e9fe:	f000 fbe5 	bl	800f1cc <__assert_func>
 800ea02:	2301      	movs	r3, #1
 800ea04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea08:	4610      	mov	r0, r2
 800ea0a:	b003      	add	sp, #12
 800ea0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea10:	bfbc      	itt	lt
 800ea12:	464b      	movlt	r3, r9
 800ea14:	46a1      	movlt	r9, r4
 800ea16:	4630      	mov	r0, r6
 800ea18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ea1c:	bfba      	itte	lt
 800ea1e:	461c      	movlt	r4, r3
 800ea20:	2501      	movlt	r5, #1
 800ea22:	2500      	movge	r5, #0
 800ea24:	f7ff fcfe 	bl	800e424 <_Balloc>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	b918      	cbnz	r0, 800ea34 <__mdiff+0x60>
 800ea2c:	4b31      	ldr	r3, [pc, #196]	@ (800eaf4 <__mdiff+0x120>)
 800ea2e:	f240 2145 	movw	r1, #581	@ 0x245
 800ea32:	e7e3      	b.n	800e9fc <__mdiff+0x28>
 800ea34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ea38:	6926      	ldr	r6, [r4, #16]
 800ea3a:	60c5      	str	r5, [r0, #12]
 800ea3c:	f109 0310 	add.w	r3, r9, #16
 800ea40:	f109 0514 	add.w	r5, r9, #20
 800ea44:	f104 0e14 	add.w	lr, r4, #20
 800ea48:	f100 0b14 	add.w	fp, r0, #20
 800ea4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ea50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ea54:	9301      	str	r3, [sp, #4]
 800ea56:	46d9      	mov	r9, fp
 800ea58:	f04f 0c00 	mov.w	ip, #0
 800ea5c:	9b01      	ldr	r3, [sp, #4]
 800ea5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ea62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ea66:	9301      	str	r3, [sp, #4]
 800ea68:	fa1f f38a 	uxth.w	r3, sl
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	b283      	uxth	r3, r0
 800ea70:	1acb      	subs	r3, r1, r3
 800ea72:	0c00      	lsrs	r0, r0, #16
 800ea74:	4463      	add	r3, ip
 800ea76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ea7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ea84:	4576      	cmp	r6, lr
 800ea86:	f849 3b04 	str.w	r3, [r9], #4
 800ea8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ea8e:	d8e5      	bhi.n	800ea5c <__mdiff+0x88>
 800ea90:	1b33      	subs	r3, r6, r4
 800ea92:	3b15      	subs	r3, #21
 800ea94:	f023 0303 	bic.w	r3, r3, #3
 800ea98:	3415      	adds	r4, #21
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	42a6      	cmp	r6, r4
 800ea9e:	bf38      	it	cc
 800eaa0:	2304      	movcc	r3, #4
 800eaa2:	441d      	add	r5, r3
 800eaa4:	445b      	add	r3, fp
 800eaa6:	461e      	mov	r6, r3
 800eaa8:	462c      	mov	r4, r5
 800eaaa:	4544      	cmp	r4, r8
 800eaac:	d30e      	bcc.n	800eacc <__mdiff+0xf8>
 800eaae:	f108 0103 	add.w	r1, r8, #3
 800eab2:	1b49      	subs	r1, r1, r5
 800eab4:	f021 0103 	bic.w	r1, r1, #3
 800eab8:	3d03      	subs	r5, #3
 800eaba:	45a8      	cmp	r8, r5
 800eabc:	bf38      	it	cc
 800eabe:	2100      	movcc	r1, #0
 800eac0:	440b      	add	r3, r1
 800eac2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eac6:	b191      	cbz	r1, 800eaee <__mdiff+0x11a>
 800eac8:	6117      	str	r7, [r2, #16]
 800eaca:	e79d      	b.n	800ea08 <__mdiff+0x34>
 800eacc:	f854 1b04 	ldr.w	r1, [r4], #4
 800ead0:	46e6      	mov	lr, ip
 800ead2:	0c08      	lsrs	r0, r1, #16
 800ead4:	fa1c fc81 	uxtah	ip, ip, r1
 800ead8:	4471      	add	r1, lr
 800eada:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eade:	b289      	uxth	r1, r1
 800eae0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eae4:	f846 1b04 	str.w	r1, [r6], #4
 800eae8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eaec:	e7dd      	b.n	800eaaa <__mdiff+0xd6>
 800eaee:	3f01      	subs	r7, #1
 800eaf0:	e7e7      	b.n	800eac2 <__mdiff+0xee>
 800eaf2:	bf00      	nop
 800eaf4:	0800fb8a 	.word	0x0800fb8a
 800eaf8:	0800fbfb 	.word	0x0800fbfb

0800eafc <__ulp>:
 800eafc:	b082      	sub	sp, #8
 800eafe:	ed8d 0b00 	vstr	d0, [sp]
 800eb02:	9a01      	ldr	r2, [sp, #4]
 800eb04:	4b0f      	ldr	r3, [pc, #60]	@ (800eb44 <__ulp+0x48>)
 800eb06:	4013      	ands	r3, r2
 800eb08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dc08      	bgt.n	800eb22 <__ulp+0x26>
 800eb10:	425b      	negs	r3, r3
 800eb12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eb16:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eb1a:	da04      	bge.n	800eb26 <__ulp+0x2a>
 800eb1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eb20:	4113      	asrs	r3, r2
 800eb22:	2200      	movs	r2, #0
 800eb24:	e008      	b.n	800eb38 <__ulp+0x3c>
 800eb26:	f1a2 0314 	sub.w	r3, r2, #20
 800eb2a:	2b1e      	cmp	r3, #30
 800eb2c:	bfda      	itte	le
 800eb2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eb32:	40da      	lsrle	r2, r3
 800eb34:	2201      	movgt	r2, #1
 800eb36:	2300      	movs	r3, #0
 800eb38:	4619      	mov	r1, r3
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	ec41 0b10 	vmov	d0, r0, r1
 800eb40:	b002      	add	sp, #8
 800eb42:	4770      	bx	lr
 800eb44:	7ff00000 	.word	0x7ff00000

0800eb48 <__b2d>:
 800eb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4c:	6906      	ldr	r6, [r0, #16]
 800eb4e:	f100 0814 	add.w	r8, r0, #20
 800eb52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eb56:	1f37      	subs	r7, r6, #4
 800eb58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	f7ff fd53 	bl	800e608 <__hi0bits>
 800eb62:	f1c0 0320 	rsb	r3, r0, #32
 800eb66:	280a      	cmp	r0, #10
 800eb68:	600b      	str	r3, [r1, #0]
 800eb6a:	491b      	ldr	r1, [pc, #108]	@ (800ebd8 <__b2d+0x90>)
 800eb6c:	dc15      	bgt.n	800eb9a <__b2d+0x52>
 800eb6e:	f1c0 0c0b 	rsb	ip, r0, #11
 800eb72:	fa22 f30c 	lsr.w	r3, r2, ip
 800eb76:	45b8      	cmp	r8, r7
 800eb78:	ea43 0501 	orr.w	r5, r3, r1
 800eb7c:	bf34      	ite	cc
 800eb7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eb82:	2300      	movcs	r3, #0
 800eb84:	3015      	adds	r0, #21
 800eb86:	fa02 f000 	lsl.w	r0, r2, r0
 800eb8a:	fa23 f30c 	lsr.w	r3, r3, ip
 800eb8e:	4303      	orrs	r3, r0
 800eb90:	461c      	mov	r4, r3
 800eb92:	ec45 4b10 	vmov	d0, r4, r5
 800eb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9a:	45b8      	cmp	r8, r7
 800eb9c:	bf3a      	itte	cc
 800eb9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eba2:	f1a6 0708 	subcc.w	r7, r6, #8
 800eba6:	2300      	movcs	r3, #0
 800eba8:	380b      	subs	r0, #11
 800ebaa:	d012      	beq.n	800ebd2 <__b2d+0x8a>
 800ebac:	f1c0 0120 	rsb	r1, r0, #32
 800ebb0:	fa23 f401 	lsr.w	r4, r3, r1
 800ebb4:	4082      	lsls	r2, r0
 800ebb6:	4322      	orrs	r2, r4
 800ebb8:	4547      	cmp	r7, r8
 800ebba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ebbe:	bf8c      	ite	hi
 800ebc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ebc4:	2200      	movls	r2, #0
 800ebc6:	4083      	lsls	r3, r0
 800ebc8:	40ca      	lsrs	r2, r1
 800ebca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	e7de      	b.n	800eb90 <__b2d+0x48>
 800ebd2:	ea42 0501 	orr.w	r5, r2, r1
 800ebd6:	e7db      	b.n	800eb90 <__b2d+0x48>
 800ebd8:	3ff00000 	.word	0x3ff00000

0800ebdc <__d2b>:
 800ebdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebe0:	460f      	mov	r7, r1
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	ec59 8b10 	vmov	r8, r9, d0
 800ebe8:	4616      	mov	r6, r2
 800ebea:	f7ff fc1b 	bl	800e424 <_Balloc>
 800ebee:	4604      	mov	r4, r0
 800ebf0:	b930      	cbnz	r0, 800ec00 <__d2b+0x24>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	4b23      	ldr	r3, [pc, #140]	@ (800ec84 <__d2b+0xa8>)
 800ebf6:	4824      	ldr	r0, [pc, #144]	@ (800ec88 <__d2b+0xac>)
 800ebf8:	f240 310f 	movw	r1, #783	@ 0x30f
 800ebfc:	f000 fae6 	bl	800f1cc <__assert_func>
 800ec00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec08:	b10d      	cbz	r5, 800ec0e <__d2b+0x32>
 800ec0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ec0e:	9301      	str	r3, [sp, #4]
 800ec10:	f1b8 0300 	subs.w	r3, r8, #0
 800ec14:	d023      	beq.n	800ec5e <__d2b+0x82>
 800ec16:	4668      	mov	r0, sp
 800ec18:	9300      	str	r3, [sp, #0]
 800ec1a:	f7ff fd14 	bl	800e646 <__lo0bits>
 800ec1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ec22:	b1d0      	cbz	r0, 800ec5a <__d2b+0x7e>
 800ec24:	f1c0 0320 	rsb	r3, r0, #32
 800ec28:	fa02 f303 	lsl.w	r3, r2, r3
 800ec2c:	430b      	orrs	r3, r1
 800ec2e:	40c2      	lsrs	r2, r0
 800ec30:	6163      	str	r3, [r4, #20]
 800ec32:	9201      	str	r2, [sp, #4]
 800ec34:	9b01      	ldr	r3, [sp, #4]
 800ec36:	61a3      	str	r3, [r4, #24]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	bf0c      	ite	eq
 800ec3c:	2201      	moveq	r2, #1
 800ec3e:	2202      	movne	r2, #2
 800ec40:	6122      	str	r2, [r4, #16]
 800ec42:	b1a5      	cbz	r5, 800ec6e <__d2b+0x92>
 800ec44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ec48:	4405      	add	r5, r0
 800ec4a:	603d      	str	r5, [r7, #0]
 800ec4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ec50:	6030      	str	r0, [r6, #0]
 800ec52:	4620      	mov	r0, r4
 800ec54:	b003      	add	sp, #12
 800ec56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec5a:	6161      	str	r1, [r4, #20]
 800ec5c:	e7ea      	b.n	800ec34 <__d2b+0x58>
 800ec5e:	a801      	add	r0, sp, #4
 800ec60:	f7ff fcf1 	bl	800e646 <__lo0bits>
 800ec64:	9b01      	ldr	r3, [sp, #4]
 800ec66:	6163      	str	r3, [r4, #20]
 800ec68:	3020      	adds	r0, #32
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	e7e8      	b.n	800ec40 <__d2b+0x64>
 800ec6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ec76:	6038      	str	r0, [r7, #0]
 800ec78:	6918      	ldr	r0, [r3, #16]
 800ec7a:	f7ff fcc5 	bl	800e608 <__hi0bits>
 800ec7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec82:	e7e5      	b.n	800ec50 <__d2b+0x74>
 800ec84:	0800fb8a 	.word	0x0800fb8a
 800ec88:	0800fbfb 	.word	0x0800fbfb

0800ec8c <__ratio>:
 800ec8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec90:	b085      	sub	sp, #20
 800ec92:	e9cd 1000 	strd	r1, r0, [sp]
 800ec96:	a902      	add	r1, sp, #8
 800ec98:	f7ff ff56 	bl	800eb48 <__b2d>
 800ec9c:	9800      	ldr	r0, [sp, #0]
 800ec9e:	a903      	add	r1, sp, #12
 800eca0:	ec55 4b10 	vmov	r4, r5, d0
 800eca4:	f7ff ff50 	bl	800eb48 <__b2d>
 800eca8:	9b01      	ldr	r3, [sp, #4]
 800ecaa:	6919      	ldr	r1, [r3, #16]
 800ecac:	9b00      	ldr	r3, [sp, #0]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	1ac9      	subs	r1, r1, r3
 800ecb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ecb6:	1a9b      	subs	r3, r3, r2
 800ecb8:	ec5b ab10 	vmov	sl, fp, d0
 800ecbc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	bfce      	itee	gt
 800ecc4:	462a      	movgt	r2, r5
 800ecc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecca:	465a      	movle	r2, fp
 800eccc:	462f      	mov	r7, r5
 800ecce:	46d9      	mov	r9, fp
 800ecd0:	bfcc      	ite	gt
 800ecd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ecd6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ecda:	464b      	mov	r3, r9
 800ecdc:	4652      	mov	r2, sl
 800ecde:	4620      	mov	r0, r4
 800ece0:	4639      	mov	r1, r7
 800ece2:	f7f1 fdb3 	bl	800084c <__aeabi_ddiv>
 800ece6:	ec41 0b10 	vmov	d0, r0, r1
 800ecea:	b005      	add	sp, #20
 800ecec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ecf0 <__copybits>:
 800ecf0:	3901      	subs	r1, #1
 800ecf2:	b570      	push	{r4, r5, r6, lr}
 800ecf4:	1149      	asrs	r1, r1, #5
 800ecf6:	6914      	ldr	r4, [r2, #16]
 800ecf8:	3101      	adds	r1, #1
 800ecfa:	f102 0314 	add.w	r3, r2, #20
 800ecfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed06:	1f05      	subs	r5, r0, #4
 800ed08:	42a3      	cmp	r3, r4
 800ed0a:	d30c      	bcc.n	800ed26 <__copybits+0x36>
 800ed0c:	1aa3      	subs	r3, r4, r2
 800ed0e:	3b11      	subs	r3, #17
 800ed10:	f023 0303 	bic.w	r3, r3, #3
 800ed14:	3211      	adds	r2, #17
 800ed16:	42a2      	cmp	r2, r4
 800ed18:	bf88      	it	hi
 800ed1a:	2300      	movhi	r3, #0
 800ed1c:	4418      	add	r0, r3
 800ed1e:	2300      	movs	r3, #0
 800ed20:	4288      	cmp	r0, r1
 800ed22:	d305      	bcc.n	800ed30 <__copybits+0x40>
 800ed24:	bd70      	pop	{r4, r5, r6, pc}
 800ed26:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed2a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed2e:	e7eb      	b.n	800ed08 <__copybits+0x18>
 800ed30:	f840 3b04 	str.w	r3, [r0], #4
 800ed34:	e7f4      	b.n	800ed20 <__copybits+0x30>

0800ed36 <__any_on>:
 800ed36:	f100 0214 	add.w	r2, r0, #20
 800ed3a:	6900      	ldr	r0, [r0, #16]
 800ed3c:	114b      	asrs	r3, r1, #5
 800ed3e:	4298      	cmp	r0, r3
 800ed40:	b510      	push	{r4, lr}
 800ed42:	db11      	blt.n	800ed68 <__any_on+0x32>
 800ed44:	dd0a      	ble.n	800ed5c <__any_on+0x26>
 800ed46:	f011 011f 	ands.w	r1, r1, #31
 800ed4a:	d007      	beq.n	800ed5c <__any_on+0x26>
 800ed4c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed50:	fa24 f001 	lsr.w	r0, r4, r1
 800ed54:	fa00 f101 	lsl.w	r1, r0, r1
 800ed58:	428c      	cmp	r4, r1
 800ed5a:	d10b      	bne.n	800ed74 <__any_on+0x3e>
 800ed5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d803      	bhi.n	800ed6c <__any_on+0x36>
 800ed64:	2000      	movs	r0, #0
 800ed66:	bd10      	pop	{r4, pc}
 800ed68:	4603      	mov	r3, r0
 800ed6a:	e7f7      	b.n	800ed5c <__any_on+0x26>
 800ed6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed70:	2900      	cmp	r1, #0
 800ed72:	d0f5      	beq.n	800ed60 <__any_on+0x2a>
 800ed74:	2001      	movs	r0, #1
 800ed76:	e7f6      	b.n	800ed66 <__any_on+0x30>

0800ed78 <__ascii_wctomb>:
 800ed78:	4603      	mov	r3, r0
 800ed7a:	4608      	mov	r0, r1
 800ed7c:	b141      	cbz	r1, 800ed90 <__ascii_wctomb+0x18>
 800ed7e:	2aff      	cmp	r2, #255	@ 0xff
 800ed80:	d904      	bls.n	800ed8c <__ascii_wctomb+0x14>
 800ed82:	228a      	movs	r2, #138	@ 0x8a
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	f04f 30ff 	mov.w	r0, #4294967295
 800ed8a:	4770      	bx	lr
 800ed8c:	700a      	strb	r2, [r1, #0]
 800ed8e:	2001      	movs	r0, #1
 800ed90:	4770      	bx	lr

0800ed92 <__ssputs_r>:
 800ed92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed96:	688e      	ldr	r6, [r1, #8]
 800ed98:	461f      	mov	r7, r3
 800ed9a:	42be      	cmp	r6, r7
 800ed9c:	680b      	ldr	r3, [r1, #0]
 800ed9e:	4682      	mov	sl, r0
 800eda0:	460c      	mov	r4, r1
 800eda2:	4690      	mov	r8, r2
 800eda4:	d82d      	bhi.n	800ee02 <__ssputs_r+0x70>
 800eda6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edaa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800edae:	d026      	beq.n	800edfe <__ssputs_r+0x6c>
 800edb0:	6965      	ldr	r5, [r4, #20]
 800edb2:	6909      	ldr	r1, [r1, #16]
 800edb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edb8:	eba3 0901 	sub.w	r9, r3, r1
 800edbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edc0:	1c7b      	adds	r3, r7, #1
 800edc2:	444b      	add	r3, r9
 800edc4:	106d      	asrs	r5, r5, #1
 800edc6:	429d      	cmp	r5, r3
 800edc8:	bf38      	it	cc
 800edca:	461d      	movcc	r5, r3
 800edcc:	0553      	lsls	r3, r2, #21
 800edce:	d527      	bpl.n	800ee20 <__ssputs_r+0x8e>
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7fc fb8f 	bl	800b4f4 <_malloc_r>
 800edd6:	4606      	mov	r6, r0
 800edd8:	b360      	cbz	r0, 800ee34 <__ssputs_r+0xa2>
 800edda:	6921      	ldr	r1, [r4, #16]
 800eddc:	464a      	mov	r2, r9
 800edde:	f7fe f91a 	bl	800d016 <memcpy>
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ede8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edec:	81a3      	strh	r3, [r4, #12]
 800edee:	6126      	str	r6, [r4, #16]
 800edf0:	6165      	str	r5, [r4, #20]
 800edf2:	444e      	add	r6, r9
 800edf4:	eba5 0509 	sub.w	r5, r5, r9
 800edf8:	6026      	str	r6, [r4, #0]
 800edfa:	60a5      	str	r5, [r4, #8]
 800edfc:	463e      	mov	r6, r7
 800edfe:	42be      	cmp	r6, r7
 800ee00:	d900      	bls.n	800ee04 <__ssputs_r+0x72>
 800ee02:	463e      	mov	r6, r7
 800ee04:	6820      	ldr	r0, [r4, #0]
 800ee06:	4632      	mov	r2, r6
 800ee08:	4641      	mov	r1, r8
 800ee0a:	f000 f9c5 	bl	800f198 <memmove>
 800ee0e:	68a3      	ldr	r3, [r4, #8]
 800ee10:	1b9b      	subs	r3, r3, r6
 800ee12:	60a3      	str	r3, [r4, #8]
 800ee14:	6823      	ldr	r3, [r4, #0]
 800ee16:	4433      	add	r3, r6
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee20:	462a      	mov	r2, r5
 800ee22:	f000 fa05 	bl	800f230 <_realloc_r>
 800ee26:	4606      	mov	r6, r0
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d1e0      	bne.n	800edee <__ssputs_r+0x5c>
 800ee2c:	6921      	ldr	r1, [r4, #16]
 800ee2e:	4650      	mov	r0, sl
 800ee30:	f7fe ff62 	bl	800dcf8 <_free_r>
 800ee34:	230c      	movs	r3, #12
 800ee36:	f8ca 3000 	str.w	r3, [sl]
 800ee3a:	89a3      	ldrh	r3, [r4, #12]
 800ee3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee40:	81a3      	strh	r3, [r4, #12]
 800ee42:	f04f 30ff 	mov.w	r0, #4294967295
 800ee46:	e7e9      	b.n	800ee1c <__ssputs_r+0x8a>

0800ee48 <_svfiprintf_r>:
 800ee48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee4c:	4698      	mov	r8, r3
 800ee4e:	898b      	ldrh	r3, [r1, #12]
 800ee50:	061b      	lsls	r3, r3, #24
 800ee52:	b09d      	sub	sp, #116	@ 0x74
 800ee54:	4607      	mov	r7, r0
 800ee56:	460d      	mov	r5, r1
 800ee58:	4614      	mov	r4, r2
 800ee5a:	d510      	bpl.n	800ee7e <_svfiprintf_r+0x36>
 800ee5c:	690b      	ldr	r3, [r1, #16]
 800ee5e:	b973      	cbnz	r3, 800ee7e <_svfiprintf_r+0x36>
 800ee60:	2140      	movs	r1, #64	@ 0x40
 800ee62:	f7fc fb47 	bl	800b4f4 <_malloc_r>
 800ee66:	6028      	str	r0, [r5, #0]
 800ee68:	6128      	str	r0, [r5, #16]
 800ee6a:	b930      	cbnz	r0, 800ee7a <_svfiprintf_r+0x32>
 800ee6c:	230c      	movs	r3, #12
 800ee6e:	603b      	str	r3, [r7, #0]
 800ee70:	f04f 30ff 	mov.w	r0, #4294967295
 800ee74:	b01d      	add	sp, #116	@ 0x74
 800ee76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee7a:	2340      	movs	r3, #64	@ 0x40
 800ee7c:	616b      	str	r3, [r5, #20]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee82:	2320      	movs	r3, #32
 800ee84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee88:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee8c:	2330      	movs	r3, #48	@ 0x30
 800ee8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f02c <_svfiprintf_r+0x1e4>
 800ee92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee96:	f04f 0901 	mov.w	r9, #1
 800ee9a:	4623      	mov	r3, r4
 800ee9c:	469a      	mov	sl, r3
 800ee9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea2:	b10a      	cbz	r2, 800eea8 <_svfiprintf_r+0x60>
 800eea4:	2a25      	cmp	r2, #37	@ 0x25
 800eea6:	d1f9      	bne.n	800ee9c <_svfiprintf_r+0x54>
 800eea8:	ebba 0b04 	subs.w	fp, sl, r4
 800eeac:	d00b      	beq.n	800eec6 <_svfiprintf_r+0x7e>
 800eeae:	465b      	mov	r3, fp
 800eeb0:	4622      	mov	r2, r4
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f7ff ff6c 	bl	800ed92 <__ssputs_r>
 800eeba:	3001      	adds	r0, #1
 800eebc:	f000 80a7 	beq.w	800f00e <_svfiprintf_r+0x1c6>
 800eec0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eec2:	445a      	add	r2, fp
 800eec4:	9209      	str	r2, [sp, #36]	@ 0x24
 800eec6:	f89a 3000 	ldrb.w	r3, [sl]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	f000 809f 	beq.w	800f00e <_svfiprintf_r+0x1c6>
 800eed0:	2300      	movs	r3, #0
 800eed2:	f04f 32ff 	mov.w	r2, #4294967295
 800eed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eeda:	f10a 0a01 	add.w	sl, sl, #1
 800eede:	9304      	str	r3, [sp, #16]
 800eee0:	9307      	str	r3, [sp, #28]
 800eee2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eee6:	931a      	str	r3, [sp, #104]	@ 0x68
 800eee8:	4654      	mov	r4, sl
 800eeea:	2205      	movs	r2, #5
 800eeec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef0:	484e      	ldr	r0, [pc, #312]	@ (800f02c <_svfiprintf_r+0x1e4>)
 800eef2:	f7f1 f96d 	bl	80001d0 <memchr>
 800eef6:	9a04      	ldr	r2, [sp, #16]
 800eef8:	b9d8      	cbnz	r0, 800ef32 <_svfiprintf_r+0xea>
 800eefa:	06d0      	lsls	r0, r2, #27
 800eefc:	bf44      	itt	mi
 800eefe:	2320      	movmi	r3, #32
 800ef00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef04:	0711      	lsls	r1, r2, #28
 800ef06:	bf44      	itt	mi
 800ef08:	232b      	movmi	r3, #43	@ 0x2b
 800ef0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef14:	d015      	beq.n	800ef42 <_svfiprintf_r+0xfa>
 800ef16:	9a07      	ldr	r2, [sp, #28]
 800ef18:	4654      	mov	r4, sl
 800ef1a:	2000      	movs	r0, #0
 800ef1c:	f04f 0c0a 	mov.w	ip, #10
 800ef20:	4621      	mov	r1, r4
 800ef22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef26:	3b30      	subs	r3, #48	@ 0x30
 800ef28:	2b09      	cmp	r3, #9
 800ef2a:	d94b      	bls.n	800efc4 <_svfiprintf_r+0x17c>
 800ef2c:	b1b0      	cbz	r0, 800ef5c <_svfiprintf_r+0x114>
 800ef2e:	9207      	str	r2, [sp, #28]
 800ef30:	e014      	b.n	800ef5c <_svfiprintf_r+0x114>
 800ef32:	eba0 0308 	sub.w	r3, r0, r8
 800ef36:	fa09 f303 	lsl.w	r3, r9, r3
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	9304      	str	r3, [sp, #16]
 800ef3e:	46a2      	mov	sl, r4
 800ef40:	e7d2      	b.n	800eee8 <_svfiprintf_r+0xa0>
 800ef42:	9b03      	ldr	r3, [sp, #12]
 800ef44:	1d19      	adds	r1, r3, #4
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	9103      	str	r1, [sp, #12]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	bfbb      	ittet	lt
 800ef4e:	425b      	neglt	r3, r3
 800ef50:	f042 0202 	orrlt.w	r2, r2, #2
 800ef54:	9307      	strge	r3, [sp, #28]
 800ef56:	9307      	strlt	r3, [sp, #28]
 800ef58:	bfb8      	it	lt
 800ef5a:	9204      	strlt	r2, [sp, #16]
 800ef5c:	7823      	ldrb	r3, [r4, #0]
 800ef5e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef60:	d10a      	bne.n	800ef78 <_svfiprintf_r+0x130>
 800ef62:	7863      	ldrb	r3, [r4, #1]
 800ef64:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef66:	d132      	bne.n	800efce <_svfiprintf_r+0x186>
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	1d1a      	adds	r2, r3, #4
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	9203      	str	r2, [sp, #12]
 800ef70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef74:	3402      	adds	r4, #2
 800ef76:	9305      	str	r3, [sp, #20]
 800ef78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f03c <_svfiprintf_r+0x1f4>
 800ef7c:	7821      	ldrb	r1, [r4, #0]
 800ef7e:	2203      	movs	r2, #3
 800ef80:	4650      	mov	r0, sl
 800ef82:	f7f1 f925 	bl	80001d0 <memchr>
 800ef86:	b138      	cbz	r0, 800ef98 <_svfiprintf_r+0x150>
 800ef88:	9b04      	ldr	r3, [sp, #16]
 800ef8a:	eba0 000a 	sub.w	r0, r0, sl
 800ef8e:	2240      	movs	r2, #64	@ 0x40
 800ef90:	4082      	lsls	r2, r0
 800ef92:	4313      	orrs	r3, r2
 800ef94:	3401      	adds	r4, #1
 800ef96:	9304      	str	r3, [sp, #16]
 800ef98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9c:	4824      	ldr	r0, [pc, #144]	@ (800f030 <_svfiprintf_r+0x1e8>)
 800ef9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efa2:	2206      	movs	r2, #6
 800efa4:	f7f1 f914 	bl	80001d0 <memchr>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d036      	beq.n	800f01a <_svfiprintf_r+0x1d2>
 800efac:	4b21      	ldr	r3, [pc, #132]	@ (800f034 <_svfiprintf_r+0x1ec>)
 800efae:	bb1b      	cbnz	r3, 800eff8 <_svfiprintf_r+0x1b0>
 800efb0:	9b03      	ldr	r3, [sp, #12]
 800efb2:	3307      	adds	r3, #7
 800efb4:	f023 0307 	bic.w	r3, r3, #7
 800efb8:	3308      	adds	r3, #8
 800efba:	9303      	str	r3, [sp, #12]
 800efbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efbe:	4433      	add	r3, r6
 800efc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800efc2:	e76a      	b.n	800ee9a <_svfiprintf_r+0x52>
 800efc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800efc8:	460c      	mov	r4, r1
 800efca:	2001      	movs	r0, #1
 800efcc:	e7a8      	b.n	800ef20 <_svfiprintf_r+0xd8>
 800efce:	2300      	movs	r3, #0
 800efd0:	3401      	adds	r4, #1
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	4619      	mov	r1, r3
 800efd6:	f04f 0c0a 	mov.w	ip, #10
 800efda:	4620      	mov	r0, r4
 800efdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efe0:	3a30      	subs	r2, #48	@ 0x30
 800efe2:	2a09      	cmp	r2, #9
 800efe4:	d903      	bls.n	800efee <_svfiprintf_r+0x1a6>
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d0c6      	beq.n	800ef78 <_svfiprintf_r+0x130>
 800efea:	9105      	str	r1, [sp, #20]
 800efec:	e7c4      	b.n	800ef78 <_svfiprintf_r+0x130>
 800efee:	fb0c 2101 	mla	r1, ip, r1, r2
 800eff2:	4604      	mov	r4, r0
 800eff4:	2301      	movs	r3, #1
 800eff6:	e7f0      	b.n	800efda <_svfiprintf_r+0x192>
 800eff8:	ab03      	add	r3, sp, #12
 800effa:	9300      	str	r3, [sp, #0]
 800effc:	462a      	mov	r2, r5
 800effe:	4b0e      	ldr	r3, [pc, #56]	@ (800f038 <_svfiprintf_r+0x1f0>)
 800f000:	a904      	add	r1, sp, #16
 800f002:	4638      	mov	r0, r7
 800f004:	f7fd f9b0 	bl	800c368 <_printf_float>
 800f008:	1c42      	adds	r2, r0, #1
 800f00a:	4606      	mov	r6, r0
 800f00c:	d1d6      	bne.n	800efbc <_svfiprintf_r+0x174>
 800f00e:	89ab      	ldrh	r3, [r5, #12]
 800f010:	065b      	lsls	r3, r3, #25
 800f012:	f53f af2d 	bmi.w	800ee70 <_svfiprintf_r+0x28>
 800f016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f018:	e72c      	b.n	800ee74 <_svfiprintf_r+0x2c>
 800f01a:	ab03      	add	r3, sp, #12
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	462a      	mov	r2, r5
 800f020:	4b05      	ldr	r3, [pc, #20]	@ (800f038 <_svfiprintf_r+0x1f0>)
 800f022:	a904      	add	r1, sp, #16
 800f024:	4638      	mov	r0, r7
 800f026:	f7fd fc37 	bl	800c898 <_printf_i>
 800f02a:	e7ed      	b.n	800f008 <_svfiprintf_r+0x1c0>
 800f02c:	0800fc54 	.word	0x0800fc54
 800f030:	0800fc5e 	.word	0x0800fc5e
 800f034:	0800c369 	.word	0x0800c369
 800f038:	0800ed93 	.word	0x0800ed93
 800f03c:	0800fc5a 	.word	0x0800fc5a

0800f040 <__sflush_r>:
 800f040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f048:	0716      	lsls	r6, r2, #28
 800f04a:	4605      	mov	r5, r0
 800f04c:	460c      	mov	r4, r1
 800f04e:	d454      	bmi.n	800f0fa <__sflush_r+0xba>
 800f050:	684b      	ldr	r3, [r1, #4]
 800f052:	2b00      	cmp	r3, #0
 800f054:	dc02      	bgt.n	800f05c <__sflush_r+0x1c>
 800f056:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dd48      	ble.n	800f0ee <__sflush_r+0xae>
 800f05c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f05e:	2e00      	cmp	r6, #0
 800f060:	d045      	beq.n	800f0ee <__sflush_r+0xae>
 800f062:	2300      	movs	r3, #0
 800f064:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f068:	682f      	ldr	r7, [r5, #0]
 800f06a:	6a21      	ldr	r1, [r4, #32]
 800f06c:	602b      	str	r3, [r5, #0]
 800f06e:	d030      	beq.n	800f0d2 <__sflush_r+0x92>
 800f070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	0759      	lsls	r1, r3, #29
 800f076:	d505      	bpl.n	800f084 <__sflush_r+0x44>
 800f078:	6863      	ldr	r3, [r4, #4]
 800f07a:	1ad2      	subs	r2, r2, r3
 800f07c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f07e:	b10b      	cbz	r3, 800f084 <__sflush_r+0x44>
 800f080:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f082:	1ad2      	subs	r2, r2, r3
 800f084:	2300      	movs	r3, #0
 800f086:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f088:	6a21      	ldr	r1, [r4, #32]
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b0      	blx	r6
 800f08e:	1c43      	adds	r3, r0, #1
 800f090:	89a3      	ldrh	r3, [r4, #12]
 800f092:	d106      	bne.n	800f0a2 <__sflush_r+0x62>
 800f094:	6829      	ldr	r1, [r5, #0]
 800f096:	291d      	cmp	r1, #29
 800f098:	d82b      	bhi.n	800f0f2 <__sflush_r+0xb2>
 800f09a:	4a2a      	ldr	r2, [pc, #168]	@ (800f144 <__sflush_r+0x104>)
 800f09c:	40ca      	lsrs	r2, r1
 800f09e:	07d6      	lsls	r6, r2, #31
 800f0a0:	d527      	bpl.n	800f0f2 <__sflush_r+0xb2>
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	6062      	str	r2, [r4, #4]
 800f0a6:	04d9      	lsls	r1, r3, #19
 800f0a8:	6922      	ldr	r2, [r4, #16]
 800f0aa:	6022      	str	r2, [r4, #0]
 800f0ac:	d504      	bpl.n	800f0b8 <__sflush_r+0x78>
 800f0ae:	1c42      	adds	r2, r0, #1
 800f0b0:	d101      	bne.n	800f0b6 <__sflush_r+0x76>
 800f0b2:	682b      	ldr	r3, [r5, #0]
 800f0b4:	b903      	cbnz	r3, 800f0b8 <__sflush_r+0x78>
 800f0b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f0b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f0ba:	602f      	str	r7, [r5, #0]
 800f0bc:	b1b9      	cbz	r1, 800f0ee <__sflush_r+0xae>
 800f0be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0c2:	4299      	cmp	r1, r3
 800f0c4:	d002      	beq.n	800f0cc <__sflush_r+0x8c>
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	f7fe fe16 	bl	800dcf8 <_free_r>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0d0:	e00d      	b.n	800f0ee <__sflush_r+0xae>
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	47b0      	blx	r6
 800f0d8:	4602      	mov	r2, r0
 800f0da:	1c50      	adds	r0, r2, #1
 800f0dc:	d1c9      	bne.n	800f072 <__sflush_r+0x32>
 800f0de:	682b      	ldr	r3, [r5, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0c6      	beq.n	800f072 <__sflush_r+0x32>
 800f0e4:	2b1d      	cmp	r3, #29
 800f0e6:	d001      	beq.n	800f0ec <__sflush_r+0xac>
 800f0e8:	2b16      	cmp	r3, #22
 800f0ea:	d11e      	bne.n	800f12a <__sflush_r+0xea>
 800f0ec:	602f      	str	r7, [r5, #0]
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	e022      	b.n	800f138 <__sflush_r+0xf8>
 800f0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0f6:	b21b      	sxth	r3, r3
 800f0f8:	e01b      	b.n	800f132 <__sflush_r+0xf2>
 800f0fa:	690f      	ldr	r7, [r1, #16]
 800f0fc:	2f00      	cmp	r7, #0
 800f0fe:	d0f6      	beq.n	800f0ee <__sflush_r+0xae>
 800f100:	0793      	lsls	r3, r2, #30
 800f102:	680e      	ldr	r6, [r1, #0]
 800f104:	bf08      	it	eq
 800f106:	694b      	ldreq	r3, [r1, #20]
 800f108:	600f      	str	r7, [r1, #0]
 800f10a:	bf18      	it	ne
 800f10c:	2300      	movne	r3, #0
 800f10e:	eba6 0807 	sub.w	r8, r6, r7
 800f112:	608b      	str	r3, [r1, #8]
 800f114:	f1b8 0f00 	cmp.w	r8, #0
 800f118:	dde9      	ble.n	800f0ee <__sflush_r+0xae>
 800f11a:	6a21      	ldr	r1, [r4, #32]
 800f11c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f11e:	4643      	mov	r3, r8
 800f120:	463a      	mov	r2, r7
 800f122:	4628      	mov	r0, r5
 800f124:	47b0      	blx	r6
 800f126:	2800      	cmp	r0, #0
 800f128:	dc08      	bgt.n	800f13c <__sflush_r+0xfc>
 800f12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f12e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f132:	81a3      	strh	r3, [r4, #12]
 800f134:	f04f 30ff 	mov.w	r0, #4294967295
 800f138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f13c:	4407      	add	r7, r0
 800f13e:	eba8 0800 	sub.w	r8, r8, r0
 800f142:	e7e7      	b.n	800f114 <__sflush_r+0xd4>
 800f144:	20400001 	.word	0x20400001

0800f148 <_fflush_r>:
 800f148:	b538      	push	{r3, r4, r5, lr}
 800f14a:	690b      	ldr	r3, [r1, #16]
 800f14c:	4605      	mov	r5, r0
 800f14e:	460c      	mov	r4, r1
 800f150:	b913      	cbnz	r3, 800f158 <_fflush_r+0x10>
 800f152:	2500      	movs	r5, #0
 800f154:	4628      	mov	r0, r5
 800f156:	bd38      	pop	{r3, r4, r5, pc}
 800f158:	b118      	cbz	r0, 800f162 <_fflush_r+0x1a>
 800f15a:	6a03      	ldr	r3, [r0, #32]
 800f15c:	b90b      	cbnz	r3, 800f162 <_fflush_r+0x1a>
 800f15e:	f7fd fd45 	bl	800cbec <__sinit>
 800f162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d0f3      	beq.n	800f152 <_fflush_r+0xa>
 800f16a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f16c:	07d0      	lsls	r0, r2, #31
 800f16e:	d404      	bmi.n	800f17a <_fflush_r+0x32>
 800f170:	0599      	lsls	r1, r3, #22
 800f172:	d402      	bmi.n	800f17a <_fflush_r+0x32>
 800f174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f176:	f7fd ff4c 	bl	800d012 <__retarget_lock_acquire_recursive>
 800f17a:	4628      	mov	r0, r5
 800f17c:	4621      	mov	r1, r4
 800f17e:	f7ff ff5f 	bl	800f040 <__sflush_r>
 800f182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f184:	07da      	lsls	r2, r3, #31
 800f186:	4605      	mov	r5, r0
 800f188:	d4e4      	bmi.n	800f154 <_fflush_r+0xc>
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	059b      	lsls	r3, r3, #22
 800f18e:	d4e1      	bmi.n	800f154 <_fflush_r+0xc>
 800f190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f192:	f7fd ff3f 	bl	800d014 <__retarget_lock_release_recursive>
 800f196:	e7dd      	b.n	800f154 <_fflush_r+0xc>

0800f198 <memmove>:
 800f198:	4288      	cmp	r0, r1
 800f19a:	b510      	push	{r4, lr}
 800f19c:	eb01 0402 	add.w	r4, r1, r2
 800f1a0:	d902      	bls.n	800f1a8 <memmove+0x10>
 800f1a2:	4284      	cmp	r4, r0
 800f1a4:	4623      	mov	r3, r4
 800f1a6:	d807      	bhi.n	800f1b8 <memmove+0x20>
 800f1a8:	1e43      	subs	r3, r0, #1
 800f1aa:	42a1      	cmp	r1, r4
 800f1ac:	d008      	beq.n	800f1c0 <memmove+0x28>
 800f1ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1b6:	e7f8      	b.n	800f1aa <memmove+0x12>
 800f1b8:	4402      	add	r2, r0
 800f1ba:	4601      	mov	r1, r0
 800f1bc:	428a      	cmp	r2, r1
 800f1be:	d100      	bne.n	800f1c2 <memmove+0x2a>
 800f1c0:	bd10      	pop	{r4, pc}
 800f1c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1ca:	e7f7      	b.n	800f1bc <memmove+0x24>

0800f1cc <__assert_func>:
 800f1cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1ce:	4614      	mov	r4, r2
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4b09      	ldr	r3, [pc, #36]	@ (800f1f8 <__assert_func+0x2c>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	4605      	mov	r5, r0
 800f1d8:	68d8      	ldr	r0, [r3, #12]
 800f1da:	b14c      	cbz	r4, 800f1f0 <__assert_func+0x24>
 800f1dc:	4b07      	ldr	r3, [pc, #28]	@ (800f1fc <__assert_func+0x30>)
 800f1de:	9100      	str	r1, [sp, #0]
 800f1e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1e4:	4906      	ldr	r1, [pc, #24]	@ (800f200 <__assert_func+0x34>)
 800f1e6:	462b      	mov	r3, r5
 800f1e8:	f000 f850 	bl	800f28c <fiprintf>
 800f1ec:	f7fc f94e 	bl	800b48c <abort>
 800f1f0:	4b04      	ldr	r3, [pc, #16]	@ (800f204 <__assert_func+0x38>)
 800f1f2:	461c      	mov	r4, r3
 800f1f4:	e7f3      	b.n	800f1de <__assert_func+0x12>
 800f1f6:	bf00      	nop
 800f1f8:	20000188 	.word	0x20000188
 800f1fc:	0800fc65 	.word	0x0800fc65
 800f200:	0800fc72 	.word	0x0800fc72
 800f204:	0800fca0 	.word	0x0800fca0

0800f208 <_calloc_r>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	fba1 5402 	umull	r5, r4, r1, r2
 800f20e:	b934      	cbnz	r4, 800f21e <_calloc_r+0x16>
 800f210:	4629      	mov	r1, r5
 800f212:	f7fc f96f 	bl	800b4f4 <_malloc_r>
 800f216:	4606      	mov	r6, r0
 800f218:	b928      	cbnz	r0, 800f226 <_calloc_r+0x1e>
 800f21a:	4630      	mov	r0, r6
 800f21c:	bd70      	pop	{r4, r5, r6, pc}
 800f21e:	220c      	movs	r2, #12
 800f220:	6002      	str	r2, [r0, #0]
 800f222:	2600      	movs	r6, #0
 800f224:	e7f9      	b.n	800f21a <_calloc_r+0x12>
 800f226:	462a      	mov	r2, r5
 800f228:	4621      	mov	r1, r4
 800f22a:	f7fd fdb0 	bl	800cd8e <memset>
 800f22e:	e7f4      	b.n	800f21a <_calloc_r+0x12>

0800f230 <_realloc_r>:
 800f230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f234:	4607      	mov	r7, r0
 800f236:	4614      	mov	r4, r2
 800f238:	460d      	mov	r5, r1
 800f23a:	b921      	cbnz	r1, 800f246 <_realloc_r+0x16>
 800f23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f240:	4611      	mov	r1, r2
 800f242:	f7fc b957 	b.w	800b4f4 <_malloc_r>
 800f246:	b92a      	cbnz	r2, 800f254 <_realloc_r+0x24>
 800f248:	f7fe fd56 	bl	800dcf8 <_free_r>
 800f24c:	4625      	mov	r5, r4
 800f24e:	4628      	mov	r0, r5
 800f250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f254:	f000 f82c 	bl	800f2b0 <_malloc_usable_size_r>
 800f258:	4284      	cmp	r4, r0
 800f25a:	4606      	mov	r6, r0
 800f25c:	d802      	bhi.n	800f264 <_realloc_r+0x34>
 800f25e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f262:	d8f4      	bhi.n	800f24e <_realloc_r+0x1e>
 800f264:	4621      	mov	r1, r4
 800f266:	4638      	mov	r0, r7
 800f268:	f7fc f944 	bl	800b4f4 <_malloc_r>
 800f26c:	4680      	mov	r8, r0
 800f26e:	b908      	cbnz	r0, 800f274 <_realloc_r+0x44>
 800f270:	4645      	mov	r5, r8
 800f272:	e7ec      	b.n	800f24e <_realloc_r+0x1e>
 800f274:	42b4      	cmp	r4, r6
 800f276:	4622      	mov	r2, r4
 800f278:	4629      	mov	r1, r5
 800f27a:	bf28      	it	cs
 800f27c:	4632      	movcs	r2, r6
 800f27e:	f7fd feca 	bl	800d016 <memcpy>
 800f282:	4629      	mov	r1, r5
 800f284:	4638      	mov	r0, r7
 800f286:	f7fe fd37 	bl	800dcf8 <_free_r>
 800f28a:	e7f1      	b.n	800f270 <_realloc_r+0x40>

0800f28c <fiprintf>:
 800f28c:	b40e      	push	{r1, r2, r3}
 800f28e:	b503      	push	{r0, r1, lr}
 800f290:	4601      	mov	r1, r0
 800f292:	ab03      	add	r3, sp, #12
 800f294:	4805      	ldr	r0, [pc, #20]	@ (800f2ac <fiprintf+0x20>)
 800f296:	f853 2b04 	ldr.w	r2, [r3], #4
 800f29a:	6800      	ldr	r0, [r0, #0]
 800f29c:	9301      	str	r3, [sp, #4]
 800f29e:	f000 f839 	bl	800f314 <_vfiprintf_r>
 800f2a2:	b002      	add	sp, #8
 800f2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2a8:	b003      	add	sp, #12
 800f2aa:	4770      	bx	lr
 800f2ac:	20000188 	.word	0x20000188

0800f2b0 <_malloc_usable_size_r>:
 800f2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2b4:	1f18      	subs	r0, r3, #4
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	bfbc      	itt	lt
 800f2ba:	580b      	ldrlt	r3, [r1, r0]
 800f2bc:	18c0      	addlt	r0, r0, r3
 800f2be:	4770      	bx	lr

0800f2c0 <__sfputc_r>:
 800f2c0:	6893      	ldr	r3, [r2, #8]
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	b410      	push	{r4}
 800f2c8:	6093      	str	r3, [r2, #8]
 800f2ca:	da08      	bge.n	800f2de <__sfputc_r+0x1e>
 800f2cc:	6994      	ldr	r4, [r2, #24]
 800f2ce:	42a3      	cmp	r3, r4
 800f2d0:	db01      	blt.n	800f2d6 <__sfputc_r+0x16>
 800f2d2:	290a      	cmp	r1, #10
 800f2d4:	d103      	bne.n	800f2de <__sfputc_r+0x1e>
 800f2d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2da:	f000 b933 	b.w	800f544 <__swbuf_r>
 800f2de:	6813      	ldr	r3, [r2, #0]
 800f2e0:	1c58      	adds	r0, r3, #1
 800f2e2:	6010      	str	r0, [r2, #0]
 800f2e4:	7019      	strb	r1, [r3, #0]
 800f2e6:	4608      	mov	r0, r1
 800f2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <__sfputs_r>:
 800f2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	4614      	mov	r4, r2
 800f2f6:	18d5      	adds	r5, r2, r3
 800f2f8:	42ac      	cmp	r4, r5
 800f2fa:	d101      	bne.n	800f300 <__sfputs_r+0x12>
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	e007      	b.n	800f310 <__sfputs_r+0x22>
 800f300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f304:	463a      	mov	r2, r7
 800f306:	4630      	mov	r0, r6
 800f308:	f7ff ffda 	bl	800f2c0 <__sfputc_r>
 800f30c:	1c43      	adds	r3, r0, #1
 800f30e:	d1f3      	bne.n	800f2f8 <__sfputs_r+0xa>
 800f310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f314 <_vfiprintf_r>:
 800f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f318:	460d      	mov	r5, r1
 800f31a:	b09d      	sub	sp, #116	@ 0x74
 800f31c:	4614      	mov	r4, r2
 800f31e:	4698      	mov	r8, r3
 800f320:	4606      	mov	r6, r0
 800f322:	b118      	cbz	r0, 800f32c <_vfiprintf_r+0x18>
 800f324:	6a03      	ldr	r3, [r0, #32]
 800f326:	b90b      	cbnz	r3, 800f32c <_vfiprintf_r+0x18>
 800f328:	f7fd fc60 	bl	800cbec <__sinit>
 800f32c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f32e:	07d9      	lsls	r1, r3, #31
 800f330:	d405      	bmi.n	800f33e <_vfiprintf_r+0x2a>
 800f332:	89ab      	ldrh	r3, [r5, #12]
 800f334:	059a      	lsls	r2, r3, #22
 800f336:	d402      	bmi.n	800f33e <_vfiprintf_r+0x2a>
 800f338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f33a:	f7fd fe6a 	bl	800d012 <__retarget_lock_acquire_recursive>
 800f33e:	89ab      	ldrh	r3, [r5, #12]
 800f340:	071b      	lsls	r3, r3, #28
 800f342:	d501      	bpl.n	800f348 <_vfiprintf_r+0x34>
 800f344:	692b      	ldr	r3, [r5, #16]
 800f346:	b99b      	cbnz	r3, 800f370 <_vfiprintf_r+0x5c>
 800f348:	4629      	mov	r1, r5
 800f34a:	4630      	mov	r0, r6
 800f34c:	f000 f938 	bl	800f5c0 <__swsetup_r>
 800f350:	b170      	cbz	r0, 800f370 <_vfiprintf_r+0x5c>
 800f352:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f354:	07dc      	lsls	r4, r3, #31
 800f356:	d504      	bpl.n	800f362 <_vfiprintf_r+0x4e>
 800f358:	f04f 30ff 	mov.w	r0, #4294967295
 800f35c:	b01d      	add	sp, #116	@ 0x74
 800f35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f362:	89ab      	ldrh	r3, [r5, #12]
 800f364:	0598      	lsls	r0, r3, #22
 800f366:	d4f7      	bmi.n	800f358 <_vfiprintf_r+0x44>
 800f368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f36a:	f7fd fe53 	bl	800d014 <__retarget_lock_release_recursive>
 800f36e:	e7f3      	b.n	800f358 <_vfiprintf_r+0x44>
 800f370:	2300      	movs	r3, #0
 800f372:	9309      	str	r3, [sp, #36]	@ 0x24
 800f374:	2320      	movs	r3, #32
 800f376:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f37a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f37e:	2330      	movs	r3, #48	@ 0x30
 800f380:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f530 <_vfiprintf_r+0x21c>
 800f384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f388:	f04f 0901 	mov.w	r9, #1
 800f38c:	4623      	mov	r3, r4
 800f38e:	469a      	mov	sl, r3
 800f390:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f394:	b10a      	cbz	r2, 800f39a <_vfiprintf_r+0x86>
 800f396:	2a25      	cmp	r2, #37	@ 0x25
 800f398:	d1f9      	bne.n	800f38e <_vfiprintf_r+0x7a>
 800f39a:	ebba 0b04 	subs.w	fp, sl, r4
 800f39e:	d00b      	beq.n	800f3b8 <_vfiprintf_r+0xa4>
 800f3a0:	465b      	mov	r3, fp
 800f3a2:	4622      	mov	r2, r4
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f7ff ffa1 	bl	800f2ee <__sfputs_r>
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	f000 80a7 	beq.w	800f500 <_vfiprintf_r+0x1ec>
 800f3b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3b4:	445a      	add	r2, fp
 800f3b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 809f 	beq.w	800f500 <_vfiprintf_r+0x1ec>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3cc:	f10a 0a01 	add.w	sl, sl, #1
 800f3d0:	9304      	str	r3, [sp, #16]
 800f3d2:	9307      	str	r3, [sp, #28]
 800f3d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3da:	4654      	mov	r4, sl
 800f3dc:	2205      	movs	r2, #5
 800f3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e2:	4853      	ldr	r0, [pc, #332]	@ (800f530 <_vfiprintf_r+0x21c>)
 800f3e4:	f7f0 fef4 	bl	80001d0 <memchr>
 800f3e8:	9a04      	ldr	r2, [sp, #16]
 800f3ea:	b9d8      	cbnz	r0, 800f424 <_vfiprintf_r+0x110>
 800f3ec:	06d1      	lsls	r1, r2, #27
 800f3ee:	bf44      	itt	mi
 800f3f0:	2320      	movmi	r3, #32
 800f3f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3f6:	0713      	lsls	r3, r2, #28
 800f3f8:	bf44      	itt	mi
 800f3fa:	232b      	movmi	r3, #43	@ 0x2b
 800f3fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f400:	f89a 3000 	ldrb.w	r3, [sl]
 800f404:	2b2a      	cmp	r3, #42	@ 0x2a
 800f406:	d015      	beq.n	800f434 <_vfiprintf_r+0x120>
 800f408:	9a07      	ldr	r2, [sp, #28]
 800f40a:	4654      	mov	r4, sl
 800f40c:	2000      	movs	r0, #0
 800f40e:	f04f 0c0a 	mov.w	ip, #10
 800f412:	4621      	mov	r1, r4
 800f414:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f418:	3b30      	subs	r3, #48	@ 0x30
 800f41a:	2b09      	cmp	r3, #9
 800f41c:	d94b      	bls.n	800f4b6 <_vfiprintf_r+0x1a2>
 800f41e:	b1b0      	cbz	r0, 800f44e <_vfiprintf_r+0x13a>
 800f420:	9207      	str	r2, [sp, #28]
 800f422:	e014      	b.n	800f44e <_vfiprintf_r+0x13a>
 800f424:	eba0 0308 	sub.w	r3, r0, r8
 800f428:	fa09 f303 	lsl.w	r3, r9, r3
 800f42c:	4313      	orrs	r3, r2
 800f42e:	9304      	str	r3, [sp, #16]
 800f430:	46a2      	mov	sl, r4
 800f432:	e7d2      	b.n	800f3da <_vfiprintf_r+0xc6>
 800f434:	9b03      	ldr	r3, [sp, #12]
 800f436:	1d19      	adds	r1, r3, #4
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	9103      	str	r1, [sp, #12]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	bfbb      	ittet	lt
 800f440:	425b      	neglt	r3, r3
 800f442:	f042 0202 	orrlt.w	r2, r2, #2
 800f446:	9307      	strge	r3, [sp, #28]
 800f448:	9307      	strlt	r3, [sp, #28]
 800f44a:	bfb8      	it	lt
 800f44c:	9204      	strlt	r2, [sp, #16]
 800f44e:	7823      	ldrb	r3, [r4, #0]
 800f450:	2b2e      	cmp	r3, #46	@ 0x2e
 800f452:	d10a      	bne.n	800f46a <_vfiprintf_r+0x156>
 800f454:	7863      	ldrb	r3, [r4, #1]
 800f456:	2b2a      	cmp	r3, #42	@ 0x2a
 800f458:	d132      	bne.n	800f4c0 <_vfiprintf_r+0x1ac>
 800f45a:	9b03      	ldr	r3, [sp, #12]
 800f45c:	1d1a      	adds	r2, r3, #4
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	9203      	str	r2, [sp, #12]
 800f462:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f466:	3402      	adds	r4, #2
 800f468:	9305      	str	r3, [sp, #20]
 800f46a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f540 <_vfiprintf_r+0x22c>
 800f46e:	7821      	ldrb	r1, [r4, #0]
 800f470:	2203      	movs	r2, #3
 800f472:	4650      	mov	r0, sl
 800f474:	f7f0 feac 	bl	80001d0 <memchr>
 800f478:	b138      	cbz	r0, 800f48a <_vfiprintf_r+0x176>
 800f47a:	9b04      	ldr	r3, [sp, #16]
 800f47c:	eba0 000a 	sub.w	r0, r0, sl
 800f480:	2240      	movs	r2, #64	@ 0x40
 800f482:	4082      	lsls	r2, r0
 800f484:	4313      	orrs	r3, r2
 800f486:	3401      	adds	r4, #1
 800f488:	9304      	str	r3, [sp, #16]
 800f48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f48e:	4829      	ldr	r0, [pc, #164]	@ (800f534 <_vfiprintf_r+0x220>)
 800f490:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f494:	2206      	movs	r2, #6
 800f496:	f7f0 fe9b 	bl	80001d0 <memchr>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d03f      	beq.n	800f51e <_vfiprintf_r+0x20a>
 800f49e:	4b26      	ldr	r3, [pc, #152]	@ (800f538 <_vfiprintf_r+0x224>)
 800f4a0:	bb1b      	cbnz	r3, 800f4ea <_vfiprintf_r+0x1d6>
 800f4a2:	9b03      	ldr	r3, [sp, #12]
 800f4a4:	3307      	adds	r3, #7
 800f4a6:	f023 0307 	bic.w	r3, r3, #7
 800f4aa:	3308      	adds	r3, #8
 800f4ac:	9303      	str	r3, [sp, #12]
 800f4ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b0:	443b      	add	r3, r7
 800f4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4b4:	e76a      	b.n	800f38c <_vfiprintf_r+0x78>
 800f4b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4ba:	460c      	mov	r4, r1
 800f4bc:	2001      	movs	r0, #1
 800f4be:	e7a8      	b.n	800f412 <_vfiprintf_r+0xfe>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	3401      	adds	r4, #1
 800f4c4:	9305      	str	r3, [sp, #20]
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	f04f 0c0a 	mov.w	ip, #10
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4d2:	3a30      	subs	r2, #48	@ 0x30
 800f4d4:	2a09      	cmp	r2, #9
 800f4d6:	d903      	bls.n	800f4e0 <_vfiprintf_r+0x1cc>
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d0c6      	beq.n	800f46a <_vfiprintf_r+0x156>
 800f4dc:	9105      	str	r1, [sp, #20]
 800f4de:	e7c4      	b.n	800f46a <_vfiprintf_r+0x156>
 800f4e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4e4:	4604      	mov	r4, r0
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e7f0      	b.n	800f4cc <_vfiprintf_r+0x1b8>
 800f4ea:	ab03      	add	r3, sp, #12
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	462a      	mov	r2, r5
 800f4f0:	4b12      	ldr	r3, [pc, #72]	@ (800f53c <_vfiprintf_r+0x228>)
 800f4f2:	a904      	add	r1, sp, #16
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7fc ff37 	bl	800c368 <_printf_float>
 800f4fa:	4607      	mov	r7, r0
 800f4fc:	1c78      	adds	r0, r7, #1
 800f4fe:	d1d6      	bne.n	800f4ae <_vfiprintf_r+0x19a>
 800f500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f502:	07d9      	lsls	r1, r3, #31
 800f504:	d405      	bmi.n	800f512 <_vfiprintf_r+0x1fe>
 800f506:	89ab      	ldrh	r3, [r5, #12]
 800f508:	059a      	lsls	r2, r3, #22
 800f50a:	d402      	bmi.n	800f512 <_vfiprintf_r+0x1fe>
 800f50c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f50e:	f7fd fd81 	bl	800d014 <__retarget_lock_release_recursive>
 800f512:	89ab      	ldrh	r3, [r5, #12]
 800f514:	065b      	lsls	r3, r3, #25
 800f516:	f53f af1f 	bmi.w	800f358 <_vfiprintf_r+0x44>
 800f51a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f51c:	e71e      	b.n	800f35c <_vfiprintf_r+0x48>
 800f51e:	ab03      	add	r3, sp, #12
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	462a      	mov	r2, r5
 800f524:	4b05      	ldr	r3, [pc, #20]	@ (800f53c <_vfiprintf_r+0x228>)
 800f526:	a904      	add	r1, sp, #16
 800f528:	4630      	mov	r0, r6
 800f52a:	f7fd f9b5 	bl	800c898 <_printf_i>
 800f52e:	e7e4      	b.n	800f4fa <_vfiprintf_r+0x1e6>
 800f530:	0800fc54 	.word	0x0800fc54
 800f534:	0800fc5e 	.word	0x0800fc5e
 800f538:	0800c369 	.word	0x0800c369
 800f53c:	0800f2ef 	.word	0x0800f2ef
 800f540:	0800fc5a 	.word	0x0800fc5a

0800f544 <__swbuf_r>:
 800f544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f546:	460e      	mov	r6, r1
 800f548:	4614      	mov	r4, r2
 800f54a:	4605      	mov	r5, r0
 800f54c:	b118      	cbz	r0, 800f556 <__swbuf_r+0x12>
 800f54e:	6a03      	ldr	r3, [r0, #32]
 800f550:	b90b      	cbnz	r3, 800f556 <__swbuf_r+0x12>
 800f552:	f7fd fb4b 	bl	800cbec <__sinit>
 800f556:	69a3      	ldr	r3, [r4, #24]
 800f558:	60a3      	str	r3, [r4, #8]
 800f55a:	89a3      	ldrh	r3, [r4, #12]
 800f55c:	071a      	lsls	r2, r3, #28
 800f55e:	d501      	bpl.n	800f564 <__swbuf_r+0x20>
 800f560:	6923      	ldr	r3, [r4, #16]
 800f562:	b943      	cbnz	r3, 800f576 <__swbuf_r+0x32>
 800f564:	4621      	mov	r1, r4
 800f566:	4628      	mov	r0, r5
 800f568:	f000 f82a 	bl	800f5c0 <__swsetup_r>
 800f56c:	b118      	cbz	r0, 800f576 <__swbuf_r+0x32>
 800f56e:	f04f 37ff 	mov.w	r7, #4294967295
 800f572:	4638      	mov	r0, r7
 800f574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f576:	6823      	ldr	r3, [r4, #0]
 800f578:	6922      	ldr	r2, [r4, #16]
 800f57a:	1a98      	subs	r0, r3, r2
 800f57c:	6963      	ldr	r3, [r4, #20]
 800f57e:	b2f6      	uxtb	r6, r6
 800f580:	4283      	cmp	r3, r0
 800f582:	4637      	mov	r7, r6
 800f584:	dc05      	bgt.n	800f592 <__swbuf_r+0x4e>
 800f586:	4621      	mov	r1, r4
 800f588:	4628      	mov	r0, r5
 800f58a:	f7ff fddd 	bl	800f148 <_fflush_r>
 800f58e:	2800      	cmp	r0, #0
 800f590:	d1ed      	bne.n	800f56e <__swbuf_r+0x2a>
 800f592:	68a3      	ldr	r3, [r4, #8]
 800f594:	3b01      	subs	r3, #1
 800f596:	60a3      	str	r3, [r4, #8]
 800f598:	6823      	ldr	r3, [r4, #0]
 800f59a:	1c5a      	adds	r2, r3, #1
 800f59c:	6022      	str	r2, [r4, #0]
 800f59e:	701e      	strb	r6, [r3, #0]
 800f5a0:	6962      	ldr	r2, [r4, #20]
 800f5a2:	1c43      	adds	r3, r0, #1
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d004      	beq.n	800f5b2 <__swbuf_r+0x6e>
 800f5a8:	89a3      	ldrh	r3, [r4, #12]
 800f5aa:	07db      	lsls	r3, r3, #31
 800f5ac:	d5e1      	bpl.n	800f572 <__swbuf_r+0x2e>
 800f5ae:	2e0a      	cmp	r6, #10
 800f5b0:	d1df      	bne.n	800f572 <__swbuf_r+0x2e>
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	4628      	mov	r0, r5
 800f5b6:	f7ff fdc7 	bl	800f148 <_fflush_r>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d0d9      	beq.n	800f572 <__swbuf_r+0x2e>
 800f5be:	e7d6      	b.n	800f56e <__swbuf_r+0x2a>

0800f5c0 <__swsetup_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4b29      	ldr	r3, [pc, #164]	@ (800f668 <__swsetup_r+0xa8>)
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	6818      	ldr	r0, [r3, #0]
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	b118      	cbz	r0, 800f5d4 <__swsetup_r+0x14>
 800f5cc:	6a03      	ldr	r3, [r0, #32]
 800f5ce:	b90b      	cbnz	r3, 800f5d4 <__swsetup_r+0x14>
 800f5d0:	f7fd fb0c 	bl	800cbec <__sinit>
 800f5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d8:	0719      	lsls	r1, r3, #28
 800f5da:	d422      	bmi.n	800f622 <__swsetup_r+0x62>
 800f5dc:	06da      	lsls	r2, r3, #27
 800f5de:	d407      	bmi.n	800f5f0 <__swsetup_r+0x30>
 800f5e0:	2209      	movs	r2, #9
 800f5e2:	602a      	str	r2, [r5, #0]
 800f5e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5e8:	81a3      	strh	r3, [r4, #12]
 800f5ea:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ee:	e033      	b.n	800f658 <__swsetup_r+0x98>
 800f5f0:	0758      	lsls	r0, r3, #29
 800f5f2:	d512      	bpl.n	800f61a <__swsetup_r+0x5a>
 800f5f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5f6:	b141      	cbz	r1, 800f60a <__swsetup_r+0x4a>
 800f5f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5fc:	4299      	cmp	r1, r3
 800f5fe:	d002      	beq.n	800f606 <__swsetup_r+0x46>
 800f600:	4628      	mov	r0, r5
 800f602:	f7fe fb79 	bl	800dcf8 <_free_r>
 800f606:	2300      	movs	r3, #0
 800f608:	6363      	str	r3, [r4, #52]	@ 0x34
 800f60a:	89a3      	ldrh	r3, [r4, #12]
 800f60c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f610:	81a3      	strh	r3, [r4, #12]
 800f612:	2300      	movs	r3, #0
 800f614:	6063      	str	r3, [r4, #4]
 800f616:	6923      	ldr	r3, [r4, #16]
 800f618:	6023      	str	r3, [r4, #0]
 800f61a:	89a3      	ldrh	r3, [r4, #12]
 800f61c:	f043 0308 	orr.w	r3, r3, #8
 800f620:	81a3      	strh	r3, [r4, #12]
 800f622:	6923      	ldr	r3, [r4, #16]
 800f624:	b94b      	cbnz	r3, 800f63a <__swsetup_r+0x7a>
 800f626:	89a3      	ldrh	r3, [r4, #12]
 800f628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f630:	d003      	beq.n	800f63a <__swsetup_r+0x7a>
 800f632:	4621      	mov	r1, r4
 800f634:	4628      	mov	r0, r5
 800f636:	f000 f83f 	bl	800f6b8 <__smakebuf_r>
 800f63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f63e:	f013 0201 	ands.w	r2, r3, #1
 800f642:	d00a      	beq.n	800f65a <__swsetup_r+0x9a>
 800f644:	2200      	movs	r2, #0
 800f646:	60a2      	str	r2, [r4, #8]
 800f648:	6962      	ldr	r2, [r4, #20]
 800f64a:	4252      	negs	r2, r2
 800f64c:	61a2      	str	r2, [r4, #24]
 800f64e:	6922      	ldr	r2, [r4, #16]
 800f650:	b942      	cbnz	r2, 800f664 <__swsetup_r+0xa4>
 800f652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f656:	d1c5      	bne.n	800f5e4 <__swsetup_r+0x24>
 800f658:	bd38      	pop	{r3, r4, r5, pc}
 800f65a:	0799      	lsls	r1, r3, #30
 800f65c:	bf58      	it	pl
 800f65e:	6962      	ldrpl	r2, [r4, #20]
 800f660:	60a2      	str	r2, [r4, #8]
 800f662:	e7f4      	b.n	800f64e <__swsetup_r+0x8e>
 800f664:	2000      	movs	r0, #0
 800f666:	e7f7      	b.n	800f658 <__swsetup_r+0x98>
 800f668:	20000188 	.word	0x20000188

0800f66c <__swhatbuf_r>:
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	460c      	mov	r4, r1
 800f670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f674:	2900      	cmp	r1, #0
 800f676:	b096      	sub	sp, #88	@ 0x58
 800f678:	4615      	mov	r5, r2
 800f67a:	461e      	mov	r6, r3
 800f67c:	da0d      	bge.n	800f69a <__swhatbuf_r+0x2e>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f684:	f04f 0100 	mov.w	r1, #0
 800f688:	bf14      	ite	ne
 800f68a:	2340      	movne	r3, #64	@ 0x40
 800f68c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f690:	2000      	movs	r0, #0
 800f692:	6031      	str	r1, [r6, #0]
 800f694:	602b      	str	r3, [r5, #0]
 800f696:	b016      	add	sp, #88	@ 0x58
 800f698:	bd70      	pop	{r4, r5, r6, pc}
 800f69a:	466a      	mov	r2, sp
 800f69c:	f000 f848 	bl	800f730 <_fstat_r>
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	dbec      	blt.n	800f67e <__swhatbuf_r+0x12>
 800f6a4:	9901      	ldr	r1, [sp, #4]
 800f6a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f6aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f6ae:	4259      	negs	r1, r3
 800f6b0:	4159      	adcs	r1, r3
 800f6b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6b6:	e7eb      	b.n	800f690 <__swhatbuf_r+0x24>

0800f6b8 <__smakebuf_r>:
 800f6b8:	898b      	ldrh	r3, [r1, #12]
 800f6ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6bc:	079d      	lsls	r5, r3, #30
 800f6be:	4606      	mov	r6, r0
 800f6c0:	460c      	mov	r4, r1
 800f6c2:	d507      	bpl.n	800f6d4 <__smakebuf_r+0x1c>
 800f6c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	6123      	str	r3, [r4, #16]
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	6163      	str	r3, [r4, #20]
 800f6d0:	b003      	add	sp, #12
 800f6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6d4:	ab01      	add	r3, sp, #4
 800f6d6:	466a      	mov	r2, sp
 800f6d8:	f7ff ffc8 	bl	800f66c <__swhatbuf_r>
 800f6dc:	9f00      	ldr	r7, [sp, #0]
 800f6de:	4605      	mov	r5, r0
 800f6e0:	4639      	mov	r1, r7
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7fb ff06 	bl	800b4f4 <_malloc_r>
 800f6e8:	b948      	cbnz	r0, 800f6fe <__smakebuf_r+0x46>
 800f6ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ee:	059a      	lsls	r2, r3, #22
 800f6f0:	d4ee      	bmi.n	800f6d0 <__smakebuf_r+0x18>
 800f6f2:	f023 0303 	bic.w	r3, r3, #3
 800f6f6:	f043 0302 	orr.w	r3, r3, #2
 800f6fa:	81a3      	strh	r3, [r4, #12]
 800f6fc:	e7e2      	b.n	800f6c4 <__smakebuf_r+0xc>
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	6020      	str	r0, [r4, #0]
 800f702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f706:	81a3      	strh	r3, [r4, #12]
 800f708:	9b01      	ldr	r3, [sp, #4]
 800f70a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f70e:	b15b      	cbz	r3, 800f728 <__smakebuf_r+0x70>
 800f710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f714:	4630      	mov	r0, r6
 800f716:	f000 f81d 	bl	800f754 <_isatty_r>
 800f71a:	b128      	cbz	r0, 800f728 <__smakebuf_r+0x70>
 800f71c:	89a3      	ldrh	r3, [r4, #12]
 800f71e:	f023 0303 	bic.w	r3, r3, #3
 800f722:	f043 0301 	orr.w	r3, r3, #1
 800f726:	81a3      	strh	r3, [r4, #12]
 800f728:	89a3      	ldrh	r3, [r4, #12]
 800f72a:	431d      	orrs	r5, r3
 800f72c:	81a5      	strh	r5, [r4, #12]
 800f72e:	e7cf      	b.n	800f6d0 <__smakebuf_r+0x18>

0800f730 <_fstat_r>:
 800f730:	b538      	push	{r3, r4, r5, lr}
 800f732:	4d07      	ldr	r5, [pc, #28]	@ (800f750 <_fstat_r+0x20>)
 800f734:	2300      	movs	r3, #0
 800f736:	4604      	mov	r4, r0
 800f738:	4608      	mov	r0, r1
 800f73a:	4611      	mov	r1, r2
 800f73c:	602b      	str	r3, [r5, #0]
 800f73e:	f7f3 fdad 	bl	800329c <_fstat>
 800f742:	1c43      	adds	r3, r0, #1
 800f744:	d102      	bne.n	800f74c <_fstat_r+0x1c>
 800f746:	682b      	ldr	r3, [r5, #0]
 800f748:	b103      	cbz	r3, 800f74c <_fstat_r+0x1c>
 800f74a:	6023      	str	r3, [r4, #0]
 800f74c:	bd38      	pop	{r3, r4, r5, pc}
 800f74e:	bf00      	nop
 800f750:	200052f4 	.word	0x200052f4

0800f754 <_isatty_r>:
 800f754:	b538      	push	{r3, r4, r5, lr}
 800f756:	4d06      	ldr	r5, [pc, #24]	@ (800f770 <_isatty_r+0x1c>)
 800f758:	2300      	movs	r3, #0
 800f75a:	4604      	mov	r4, r0
 800f75c:	4608      	mov	r0, r1
 800f75e:	602b      	str	r3, [r5, #0]
 800f760:	f7f3 fda8 	bl	80032b4 <_isatty>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	d102      	bne.n	800f76e <_isatty_r+0x1a>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	b103      	cbz	r3, 800f76e <_isatty_r+0x1a>
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	200052f4 	.word	0x200052f4

0800f774 <_exit>:
 800f774:	e7fe      	b.n	800f774 <_exit>
	...

0800f778 <_init>:
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77a:	bf00      	nop
 800f77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f77e:	bc08      	pop	{r3}
 800f780:	469e      	mov	lr, r3
 800f782:	4770      	bx	lr

0800f784 <_fini>:
 800f784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f786:	bf00      	nop
 800f788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f78a:	bc08      	pop	{r3}
 800f78c:	469e      	mov	lr, r3
 800f78e:	4770      	bx	lr
